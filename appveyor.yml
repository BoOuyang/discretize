# AppVeyor.com is a Continuous Integration service to build and run tests under Windows

build: off

environment:
  matrix:
    - PYTHON_VERSION: 2.7
      CONDA: C:\Miniconda

    - PYTHON_VERSION: 3.5
      CONDA: C:\Miniconda35

    - PYTHON_VERSION: 3.6
      CONDA: C:\Miniconda36

  pypi_password:
    secure: S2mZCxm5LzIF4KFDss/f7g==

image: Visual Studio 2015

platform:
- x86
- x64

init:
  - ps: if ($Env:PLATFORM -eq "x64") { $Env:CONDA = "${Env:CONDA}-x64" }
  - ps: Write-Host $Env:PYTHON_VERSION
  - ps: Write-Host $Env:CONDA
  - ps: Write-Host $Env:PLATFORM

install:
  # Load the conda root environment, configure and install some packages
  - '"%CONDA%\Scripts\activate.bat"'
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - conda install numpy scipy matplotlib cython ipython pillow wheel
  - pip install nose
  - python setup.py install

test_script:
  - cd tests
  - nosetests -v -s base/test_interpolation.py base/test_tensor_io.py
  - nosetests -v -s tree
  - cd ..

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - python setup.py bdist_wheel

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

deploy_script:
  # following https://github.com/AndrewAnnex/SpiceyPy/blob/master/appveyor.yml
  - echo "Starting Artifact deployment"
  - echo [pypi] >> %USERPROFILE%\\.pypirc
  - echo username=lheagy >> %USERPROFILE%\\.pypirc
  - echo password=%pypi_password% >> %USERPROFILE%\\.pypirc
  # - twine upload dist\* --skip-existing
  # deploy on dev or master
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true" ) { Invoke-Expression "twine upload dist\*.whl --skip-existing" 2>$null } Else { write-output "Not on a tag, won't deploy to pypi"}
