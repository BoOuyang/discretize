/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "discretize/tree.h"
        ],
        "language": "c++"
    },
    "module_name": "discretize.tree_ext"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__discretize__tree_ext
#define __PYX_HAVE_API__discretize__tree_ext
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <math.h>
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include "tree.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "discretize/tree_ext.pyx",
  "__init__.pxd",
  "stringsource",
  "type.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif


/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_10discretize_8tree_ext_Cell;
struct __pyx_obj_10discretize_8tree_ext__TreeMesh;
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine;
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx;
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx;
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx;
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "discretize/tree_ext.pyx":15
 * from discretize import utils
 * 
 * cdef class Cell:             # <<<<<<<<<<<<<<
 *     cdef double _x, _y, _z, _x0, _y0, _z0, _wx, _wy, _wz
 *     cdef int_t _dim
 */
struct __pyx_obj_10discretize_8tree_ext_Cell {
  PyObject_HEAD
  struct __pyx_vtabstruct_10discretize_8tree_ext_Cell *__pyx_vtab;
  double _x;
  double _y;
  double _z;
  double _x0;
  double _y0;
  double _z0;
  double _wx;
  double _wy;
  double _wz;
  int_t _dim;
  Cell *_cell;
};


/* "discretize/tree_ext.pyx":142
 *     return <int_t> func(pycell)
 * 
 * cdef class _TreeMesh:             # <<<<<<<<<<<<<<
 *     cdef c_Tree *tree
 *     cdef PyWrapper *wrapper
 */
struct __pyx_obj_10discretize_8tree_ext__TreeMesh {
  PyObject_HEAD
  Tree *tree;
  PyWrapper *wrapper;
  int_t _dim;
  double _xc[3];
  double _xf[3];
  int_t ls[3];
  __Pyx_memviewslice _xs;
  __Pyx_memviewslice _ys;
  __Pyx_memviewslice _zs;
  __Pyx_memviewslice _x0;
  PyObject *_gridCC;
  PyObject *_gridN;
  PyObject *_gridhN;
  PyObject *_gridEx;
  PyObject *_gridEy;
  PyObject *_gridEz;
  PyObject *_gridhEx;
  PyObject *_gridhEy;
  PyObject *_gridhEz;
  PyObject *_gridFx;
  PyObject *_gridFy;
  PyObject *_gridFz;
  PyObject *_gridhFx;
  PyObject *_gridhFy;
  PyObject *_gridhFz;
  PyObject *_h_gridded;
  PyObject *_vol;
  PyObject *_area;
  PyObject *_edge;
  PyObject *_aveFx2CC;
  PyObject *_aveFy2CC;
  PyObject *_aveFz2CC;
  PyObject *_aveF2CC;
  PyObject *_aveF2CCV;
  PyObject *_aveN2CC;
  PyObject *_aveEx2CC;
  PyObject *_aveEy2CC;
  PyObject *_aveEz2CC;
  PyObject *_aveE2CC;
  PyObject *_aveE2CCV;
  PyObject *_faceDiv;
  PyObject *_edgeCurl;
  PyObject *_nodalGrad;
  PyObject *__pyx___ubc_order;
  PyObject *__pyx___ubc_indArr;
};


/* "discretize/tree_ext.pyx":249
 *         self.__ubc_indArr = None
 * 
 *     def refine(self, function, finalize=True):             # <<<<<<<<<<<<<<
 *         if type(function) in integer_types:
 *             level = function
 */
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine {
  PyObject_HEAD
  PyObject *__pyx_v_level;
};


/* "discretize/tree_ext.pyx":1840
 *         return P*Rf
 * 
 *     def _getFacePxx(self):             # <<<<<<<<<<<<<<
 *         def Pxx(xFace, yFace):
 *             return self._getFaceP(xFace, yFace, None)
 */
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx {
  PyObject_HEAD
  struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self;
};


/* "discretize/tree_ext.pyx":1845
 *         return Pxx
 * 
 *     def _getFacePxxx(self):             # <<<<<<<<<<<<<<
 *         def Pxxx(xFace, yFace, zFace):
 *             return self._getFaceP(xFace, yFace, zFace)
 */
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx {
  PyObject_HEAD
  struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self;
};


/* "discretize/tree_ext.pyx":1896
 *         return P*Rf
 * 
 *     def _getEdgePxx(self):             # <<<<<<<<<<<<<<
 *         def Pxx(xEdge, yEdge):
 *             return self._getEdgeP(xEdge, yEdge, None)
 */
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx {
  PyObject_HEAD
  struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self;
};


/* "discretize/tree_ext.pyx":1901
 *         return Pxx
 * 
 *     def _getEdgePxxx(self):             # <<<<<<<<<<<<<<
 *         def Pxxx(xEdge, yEdge, zEdge):
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 */
struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx {
  PyObject_HEAD
  struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self;
};


/* "View.MemoryView":103
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":275
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":326
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":951
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "discretize/tree_ext.pyx":15
 * from discretize import utils
 * 
 * cdef class Cell:             # <<<<<<<<<<<<<<
 *     cdef double _x, _y, _z, _x0, _y0, _z0, _wx, _wy, _wz
 *     cdef int_t _dim
 */

struct __pyx_vtabstruct_10discretize_8tree_ext_Cell {
  void (*_set)(struct __pyx_obj_10discretize_8tree_ext_Cell *, Cell *);
};
static struct __pyx_vtabstruct_10discretize_8tree_ext_Cell *__pyx_vtabptr_10discretize_8tree_ext_Cell;


/* "View.MemoryView":103
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":326
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":951
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* BufferFormatCheck.proto */
static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type); // PROTO

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* IncludeStringH.proto */
#include <string.h>

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RshiftObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_RshiftObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceRshift(op1, op2) : PyNumber_Rshift(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_RemainderObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceRemainder(op1, op2) : PyNumber_Remainder(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_FloorDivideObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceFloorDivide(op1, op2) : PyNumber_FloorDivide(op1, op2))
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* None.proto */
static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs,
                                        char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int_t(int_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int64(npy_int64 value);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_float64_t(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_float64_t(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_int64_t(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_int64_t(const char *itemp, PyObject *obj);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int_t __Pyx_PyInt_As_int_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_int64 __Pyx_PyInt_As_npy_int64(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int64_t(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int_t(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int_t(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_10discretize_8tree_ext_4Cell__set(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self, Cell *__pyx_v_cell); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libc.math' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'discretize.tree' */

/* Module declarations from 'discretize.tree_ext' */
static PyTypeObject *__pyx_ptype_10discretize_8tree_ext_Cell = 0;
static PyTypeObject *__pyx_ptype_10discretize_8tree_ext__TreeMesh = 0;
static PyTypeObject *__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct__refine = 0;
static PyTypeObject *__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx = 0;
static PyTypeObject *__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx = 0;
static PyTypeObject *__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx = 0;
static PyTypeObject *__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static int_t __pyx_f_10discretize_8tree_ext__evaluate_func(void *, Cell *); /*proto*/
static CYTHON_INLINE double __pyx_f_10discretize_8tree_ext__clip01(double); /*proto*/
static void __pyx_f_10discretize_8tree_ext__project_point_to_edge(double *, double *, double *, int, double *); /*proto*/
static void __pyx_f_10discretize_8tree_ext__project_point_to_triangle(double *, double *, double *, double *, int, double *); /*proto*/
static void __pyx_f_10discretize_8tree_ext__barycentric_edge(double *, double *, double *, double *, int); /*proto*/
static void __pyx_f_10discretize_8tree_ext__barycentric_triangle(double *, double *, double *, double *, double *, int); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *, Py_ssize_t); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
#define __Pyx_MODULE_NAME "discretize.tree_ext"
int __pyx_module_is_main_discretize__tree_ext = 0;

/* Implementation of 'discretize.tree_ext' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static const char __pyx_k_A[] = "_A";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_b[] = "b-";
static const char __pyx_k_c[] = "c_";
static const char __pyx_k_g[] = "g>";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_k[] = "k>";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_r[] = "r_";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_3d[] = "3d";
static const char __pyx_k_CC[] = "CC";
static const char __pyx_k_Ex[] = "Ex";
static const char __pyx_k_Ey[] = "Ey";
static const char __pyx_k_Ez[] = "Ez";
static const char __pyx_k_Fx[] = "Fx";
static const char __pyx_k_Fy[] = "Fy";
static const char __pyx_k_Fz[] = "Fz";
static const char __pyx_k_ax[] = "ax";
static const char __pyx_k_gs[] = "gs";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_ks[] = "ks";
static const char __pyx_k_ms[] = "ms";
static const char __pyx_k_nC[] = "nC";
static const char __pyx_k_nE[] = "nE";
static const char __pyx_k_nF[] = "nF";
static const char __pyx_k_nN[] = "nN";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_ps[] = "ps";
static const char __pyx_k_ro[] = "ro";
static const char __pyx_k_sp[] = "sp";
static const char __pyx_k_x0[] = "x0";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_x3[] = "x3";
static const char __pyx_k_xy[] = "xy";
static const char __pyx_k_xz[] = "xz";
static const char __pyx_k_yz[] = "yz";
static const char __pyx_k_zs[] = "zs";
static const char __pyx_k_Pxx[] = "Pxx";
static const char __pyx_k__54[] = "*";
static const char __pyx_k_c_2[] = "c";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_eps[] = "eps";
static const char __pyx_k_fXp[] = "fXp";
static const char __pyx_k_fYp[] = "fYp";
static const char __pyx_k_fZp[] = "fZp";
static const char __pyx_k_g_2[] = "g";
static const char __pyx_k_g_3[] = "g^";
static const char __pyx_k_inf[] = "inf";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_k_2[] = "k";
static const char __pyx_k_mec[] = "mec";
static const char __pyx_k_mfc[] = "mfc";
static const char __pyx_k_nEx[] = "nEx";
static const char __pyx_k_nEy[] = "nEy";
static const char __pyx_k_nEz[] = "nEz";
static const char __pyx_k_nFx[] = "nFx";
static const char __pyx_k_nFy[] = "nFy";
static const char __pyx_k_nFz[] = "nFz";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_nhE[] = "nhE";
static const char __pyx_k_nhF[] = "nhF";
static const char __pyx_k_nhN[] = "nhN";
static const char __pyx_k_ntE[] = "ntE";
static const char __pyx_k_ntF[] = "ntF";
static const char __pyx_k_ntN[] = "ntN";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_r_2[] = "r.";
static const char __pyx_k_r_3[] = "r:";
static const char __pyx_k_six[] = "six";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_xyz[] = "xyz";
static const char __pyx_k_Axes[] = "Axes";
static const char __pyx_k_Pxxx[] = "Pxxx";
static const char __pyx_k_axes[] = "axes";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_clim[] = "clim";
static const char __pyx_k_cmap[] = "cmap";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_edge[] = "edge";
static const char __pyx_k_full[] = "full";
static const char __pyx_k_grid[] = "grid";
static const char __pyx_k_locs[] = "locs";
static const char __pyx_k_log2[] = "log2";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_nhEx[] = "nhEx";
static const char __pyx_k_nhEy[] = "nhEy";
static const char __pyx_k_nhEz[] = "nhEz";
static const char __pyx_k_nhFx[] = "nhFx";
static const char __pyx_k_nhFy[] = "nhFy";
static const char __pyx_k_nhFz[] = "nhFz";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_ntEx[] = "ntEx";
static const char __pyx_k_ntEy[] = "ntEy";
static const char __pyx_k_ntEz[] = "ntEz";
static const char __pyx_k_ntFx[] = "ntFx";
static const char __pyx_k_ntFy[] = "ntFy";
static const char __pyx_k_ntFz[] = "ntFz";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_plot[] = "plot";
static const char __pyx_k_show[] = "show";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_vmax[] = "vmax";
static const char __pyx_k_vmin[] = "vmin";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_cells[] = "cells";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_finfo[] = "finfo";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_gridN[] = "gridN";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_isnan[] = "isnan";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_query[] = "query";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_simps[] = "simps";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_tocsr[] = "tocsr";
static const char __pyx_k_utils[] = "utils";
static const char __pyx_k_where[] = "where";
static const char __pyx_k_xEdge[] = "xEdge";
static const char __pyx_k_xFace[] = "xFace";
static const char __pyx_k_yEdge[] = "yEdge";
static const char __pyx_k_yFace[] = "yFace";
static const char __pyx_k_zEdge[] = "zEdge";
static const char __pyx_k_zFace[] = "zFace";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Axes3D[] = "Axes3D";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_cumsum[] = "cumsum";
static const char __pyx_k_edgesX[] = "edgesX";
static const char __pyx_k_edgesY[] = "edgesY";
static const char __pyx_k_edgesZ[] = "edgesZ";
static const char __pyx_k_einsum[] = "einsum";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_facesX[] = "facesX";
static const char __pyx_k_facesY[] = "facesY";
static const char __pyx_k_facesZ[] = "facesZ";
static const char __pyx_k_figure[] = "figure";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_getnnz[] = "getnnz";
static const char __pyx_k_gridCC[] = "gridCC";
static const char __pyx_k_gridEx[] = "gridEx";
static const char __pyx_k_gridEy[] = "gridEy";
static const char __pyx_k_gridEz[] = "gridEz";
static const char __pyx_k_gridFx[] = "gridFx";
static const char __pyx_k_gridFy[] = "gridFy";
static const char __pyx_k_gridFz[] = "gridFz";
static const char __pyx_k_gridhN[] = "gridhN";
static const char __pyx_k_hstack[] = "hstack";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_levels[] = "levels";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_nanmax[] = "nanmax";
static const char __pyx_k_nanmin[] = "nanmin";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_showIt[] = "showIt";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_cKDTree[] = "cKDTree";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_gridhEx[] = "gridhEx";
static const char __pyx_k_gridhEy[] = "gridhEy";
static const char __pyx_k_gridhEz[] = "gridhEz";
static const char __pyx_k_gridhFx[] = "gridhFx";
static const char __pyx_k_gridhFy[] = "gridhFy";
static const char __pyx_k_gridhFz[] = "gridhFz";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_lexsort[] = "lexsort";
static const char __pyx_k_locType[] = "locType";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_nonzero[] = "nonzero";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_subplot[] = "subplot";
static const char __pyx_k_to_rgba[] = "to_rgba";
static const char __pyx_k_Delaunay[] = "Delaunay";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_Sentinel[] = "Sentinel";
static const char __pyx_k_aveEx2CC[] = "aveEx2CC";
static const char __pyx_k_aveEy2CC[] = "aveEy2CC";
static const char __pyx_k_aveEz2CC[] = "aveEz2CC";
static const char __pyx_k_aveFx2CC[] = "aveFx2CC";
static const char __pyx_k_aveFy2CC[] = "aveFy2CC";
static const char __pyx_k_aveFz2CC[] = "aveFz2CC";
static const char __pyx_k_cellLine[] = "cellLine";
static const char __pyx_k_cull_dir[] = "cull_dir";
static const char __pyx_k_finalize[] = "finalize";
static const char __pyx_k_function[] = "function";
static const char __pyx_k_getEdgeP[] = "_getEdgeP";
static const char __pyx_k_getFaceP[] = "_getFaceP";
static const char __pyx_k_get_cmap[] = "get_cmap";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_nsimplex[] = "nsimplex";
static const char __pyx_k_set_xlim[] = "set_xlim";
static const char __pyx_k_set_ylim[] = "set_ylim";
static const char __pyx_k_vertices[] = "vertices";
static const char __pyx_k_Normalize[] = "Normalize";
static const char __pyx_k_Rectangle[] = "Rectangle";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_patch[] = "add_patch";
static const char __pyx_k_edgecolor[] = "edgecolor";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_equations[] = "equations";
static const char __pyx_k_faceDiv2D[] = "_faceDiv2D";
static const char __pyx_k_faceDiv3D[] = "_faceDiv3D";
static const char __pyx_k_facecolor[] = "facecolor";
static const char __pyx_k_ikj_ij_ik[] = "ikj,ij->ik";
static const char __pyx_k_neighbors[] = "neighbors";
static const char __pyx_k_simplices[] = "simplices";
static const char __pyx_k_transform[] = "_transform";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_atleast_2d[] = "atleast_2d";
static const char __pyx_k_block_diag[] = "block_diag";
static const char __pyx_k_csr_matrix[] = "csr_matrix";
static const char __pyx_k_discretize[] = "discretize";
static const char __pyx_k_empty_like[] = "empty_like";
static const char __pyx_k_matplotlib[] = "matplotlib";
static const char __pyx_k_projection[] = "projection";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_set_xlabel[] = "set_xlabel";
static const char __pyx_k_set_ylabel[] = "set_ylabel";
static const char __pyx_k_set_zlabel[] = "set_zlabel";
static const char __pyx_k_ubc_indArr[] = "_ubc_indArr";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_convex_hull[] = "convex_hull";
static const char __pyx_k_transform_2[] = "transform";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_column_stack[] = "column_stack";
static const char __pyx_k_find_simplex[] = "find_simplex";
static const char __pyx_k_insert_cells[] = "insert_cells";
static const char __pyx_k_scipy_sparse[] = "scipy.sparse";
static const char __pyx_k_zerosOutside[] = "zerosOutside";
static const char __pyx_k_deflate_edges[] = "_deflate_edges";
static const char __pyx_k_deflate_faces[] = "_deflate_faces";
static const char __pyx_k_deflate_nodes[] = "_deflate_nodes";
static const char __pyx_k_getNodeIntMat[] = "_getNodeIntMat";
static const char __pyx_k_integer_types[] = "integer_types";
static const char __pyx_k_matplotlib_cm[] = "matplotlib.cm";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_scipy_spatial[] = "scipy.spatial";
static const char __pyx_k_ScalarMappable[] = "ScalarMappable";
static const char __pyx_k_Use_plot_slice[] = "Use plot slice?";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_asArray_N_x_Dim[] = "asArray_N_x_Dim";
static const char __pyx_k_deflate_edges_x[] = "_deflate_edges_x";
static const char __pyx_k_deflate_edges_y[] = "_deflate_edges_y";
static const char __pyx_k_deflate_edges_z[] = "_deflate_edges_z";
static const char __pyx_k_deflate_faces_x[] = "_deflate_faces_x";
static const char __pyx_k_deflate_faces_y[] = "_deflate_faces_y";
static const char __pyx_k_deflate_faces_z[] = "_deflate_faces_z";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_get_grid_triang[] = "_get_grid_triang";
static const char __pyx_k_properties_utils[] = "properties.utils";
static const char __pyx_k_matplotlib_colors[] = "matplotlib.colors";
static const char __pyx_k_matplotlib_pyplot[] = "matplotlib.pyplot";
static const char __pyx_k_vertex_to_simplex[] = "_vertex_to_simplex";
static const char __pyx_k_ax_must_be_an_Axes[] = "ax must be an Axes!";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_discretize_tree_ext[] = "discretize.tree_ext";
static const char __pyx_k_cull_outer_simplices[] = "_cull_outer_simplices";
static const char __pyx_k_mpl_toolkits_mplot3d[] = "mpl_toolkits.mplot3d";
static const char __pyx_k_refine_locals_lambda[] = "refine.<locals>.<lambda>";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_Invalid_argument_type[] = "Invalid argument type.";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_getEdgePxx_locals_Pxx[] = "_getEdgePxx.<locals>.Pxx";
static const char __pyx_k_getFacePxx_locals_Pxx[] = "_getFacePxx.<locals>.Pxx";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_getEdgePxxx_locals_Pxxx[] = "_getEdgePxxx.<locals>.Pxxx";
static const char __pyx_k_getFacePxxx_locals_Pxxx[] = "_getFacePxxx.<locals>.Pxxx";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_vertex_neighbor_vertices[] = "_vertex_neighbor_vertices";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_There_are_no_z_edges_in_2D[] = "There are no z-edges in 2D";
static const char __pyx_k_There_are_no_z_faces_in_2D[] = "There are no z-faces in 2D";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_The_index_0_d_is_out_of_range[] = "The index ({0:d}) is out of range.";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Users_josephcapriotti_codes_dis[] = "/Users/josephcapriotti/codes/discretize/discretize/tree_ext.pyx";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Last_character_of_edge_string_mu[] = "Last character of edge string must be 0, 1, 2, or 3";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_PlotSlice_has_not_been_implement[] = "PlotSlice has not been implemented yet";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_Unable_to_interpolate_from_Z_edg[] = "Unable to interpolate from Z edges/face in 2D";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_locType_must_be_one_of_N_CC_Ex_E[] = "locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_x0_must_be_a_list_tuple_or_numpy[] = "x0 must be a list, tuple or numpy array";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_3d;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_Axes;
static PyObject *__pyx_n_s_Axes3D;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_CC;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Delaunay;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Ex;
static PyObject *__pyx_n_s_Ey;
static PyObject *__pyx_n_s_Ez;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_Fx;
static PyObject *__pyx_n_s_Fy;
static PyObject *__pyx_n_s_Fz;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_argument_type;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_kp_s_Last_character_of_edge_string_mu;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_Normalize;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_kp_s_PlotSlice_has_not_been_implement;
static PyObject *__pyx_n_s_Pxx;
static PyObject *__pyx_n_s_Pxxx;
static PyObject *__pyx_n_s_Rectangle;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_ScalarMappable;
static PyObject *__pyx_n_s_Sentinel;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_kp_s_The_index_0_d_is_out_of_range;
static PyObject *__pyx_kp_s_There_are_no_z_edges_in_2D;
static PyObject *__pyx_kp_s_There_are_no_z_faces_in_2D;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_kp_s_Unable_to_interpolate_from_Z_edg;
static PyObject *__pyx_kp_s_Use_plot_slice;
static PyObject *__pyx_kp_s_Users_josephcapriotti_codes_dis;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s__54;
static PyObject *__pyx_n_s_add_patch;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asArray_N_x_Dim;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_atleast_2d;
static PyObject *__pyx_n_s_aveEx2CC;
static PyObject *__pyx_n_s_aveEy2CC;
static PyObject *__pyx_n_s_aveEz2CC;
static PyObject *__pyx_n_s_aveFx2CC;
static PyObject *__pyx_n_s_aveFy2CC;
static PyObject *__pyx_n_s_aveFz2CC;
static PyObject *__pyx_n_s_ax;
static PyObject *__pyx_kp_s_ax_must_be_an_Axes;
static PyObject *__pyx_n_s_axes;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_kp_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_block_diag;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cKDTree;
static PyObject *__pyx_n_s_c_2;
static PyObject *__pyx_n_u_c_2;
static PyObject *__pyx_n_s_cellLine;
static PyObject *__pyx_n_s_cells;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_clim;
static PyObject *__pyx_n_s_cmap;
static PyObject *__pyx_n_s_column_stack;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_convex_hull;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_csr_matrix;
static PyObject *__pyx_n_s_cull_dir;
static PyObject *__pyx_n_s_cull_outer_simplices;
static PyObject *__pyx_n_s_cumsum;
static PyObject *__pyx_n_s_deflate_edges;
static PyObject *__pyx_n_s_deflate_edges_x;
static PyObject *__pyx_n_s_deflate_edges_y;
static PyObject *__pyx_n_s_deflate_edges_z;
static PyObject *__pyx_n_s_deflate_faces;
static PyObject *__pyx_n_s_deflate_faces_x;
static PyObject *__pyx_n_s_deflate_faces_y;
static PyObject *__pyx_n_s_deflate_faces_z;
static PyObject *__pyx_n_s_deflate_nodes;
static PyObject *__pyx_n_s_dim;
static PyObject *__pyx_n_s_discretize;
static PyObject *__pyx_n_s_discretize_tree_ext;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_edge;
static PyObject *__pyx_n_s_edgecolor;
static PyObject *__pyx_n_s_edgesX;
static PyObject *__pyx_n_s_edgesY;
static PyObject *__pyx_n_s_edgesZ;
static PyObject *__pyx_n_s_einsum;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_empty_like;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eps;
static PyObject *__pyx_n_s_equations;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_fXp;
static PyObject *__pyx_n_s_fYp;
static PyObject *__pyx_n_s_fZp;
static PyObject *__pyx_n_s_faceDiv2D;
static PyObject *__pyx_n_s_faceDiv3D;
static PyObject *__pyx_n_s_facecolor;
static PyObject *__pyx_n_s_facesX;
static PyObject *__pyx_n_s_facesY;
static PyObject *__pyx_n_s_facesZ;
static PyObject *__pyx_n_s_figure;
static PyObject *__pyx_n_s_finalize;
static PyObject *__pyx_n_s_find_simplex;
static PyObject *__pyx_n_s_finfo;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_full;
static PyObject *__pyx_n_s_function;
static PyObject *__pyx_kp_s_g;
static PyObject *__pyx_n_s_g_2;
static PyObject *__pyx_kp_s_g_3;
static PyObject *__pyx_n_s_getEdgeP;
static PyObject *__pyx_n_s_getEdgePxx_locals_Pxx;
static PyObject *__pyx_n_s_getEdgePxxx_locals_Pxxx;
static PyObject *__pyx_n_s_getFaceP;
static PyObject *__pyx_n_s_getFacePxx_locals_Pxx;
static PyObject *__pyx_n_s_getFacePxxx_locals_Pxxx;
static PyObject *__pyx_n_s_getNodeIntMat;
static PyObject *__pyx_n_s_get_cmap;
static PyObject *__pyx_n_s_get_grid_triang;
static PyObject *__pyx_n_s_getnnz;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_grid;
static PyObject *__pyx_n_s_gridCC;
static PyObject *__pyx_n_s_gridEx;
static PyObject *__pyx_n_s_gridEy;
static PyObject *__pyx_n_s_gridEz;
static PyObject *__pyx_n_s_gridFx;
static PyObject *__pyx_n_s_gridFy;
static PyObject *__pyx_n_s_gridFz;
static PyObject *__pyx_n_s_gridN;
static PyObject *__pyx_n_s_gridhEx;
static PyObject *__pyx_n_s_gridhEy;
static PyObject *__pyx_n_s_gridhEz;
static PyObject *__pyx_n_s_gridhFx;
static PyObject *__pyx_n_s_gridhFy;
static PyObject *__pyx_n_s_gridhFz;
static PyObject *__pyx_n_s_gridhN;
static PyObject *__pyx_n_s_gs;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_hstack;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_kp_s_ikj_ij_ik;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_inf;
static PyObject *__pyx_n_s_insert_cells;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_integer_types;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_kp_s_k;
static PyObject *__pyx_n_s_k_2;
static PyObject *__pyx_n_s_ks;
static PyObject *__pyx_n_s_levels;
static PyObject *__pyx_n_s_lexsort;
static PyObject *__pyx_n_s_locType;
static PyObject *__pyx_kp_s_locType_must_be_one_of_N_CC_Ex_E;
static PyObject *__pyx_n_s_locs;
static PyObject *__pyx_n_s_log2;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matplotlib;
static PyObject *__pyx_n_s_matplotlib_cm;
static PyObject *__pyx_n_s_matplotlib_colors;
static PyObject *__pyx_n_s_matplotlib_pyplot;
static PyObject *__pyx_n_s_mec;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mfc;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mpl_toolkits_mplot3d;
static PyObject *__pyx_n_s_ms;
static PyObject *__pyx_n_s_nC;
static PyObject *__pyx_n_s_nE;
static PyObject *__pyx_n_s_nEx;
static PyObject *__pyx_n_s_nEy;
static PyObject *__pyx_n_s_nEz;
static PyObject *__pyx_n_s_nF;
static PyObject *__pyx_n_s_nFx;
static PyObject *__pyx_n_s_nFy;
static PyObject *__pyx_n_s_nFz;
static PyObject *__pyx_n_s_nN;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_nan;
static PyObject *__pyx_n_s_nanmax;
static PyObject *__pyx_n_s_nanmin;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_neighbors;
static PyObject *__pyx_n_s_nhE;
static PyObject *__pyx_n_s_nhEx;
static PyObject *__pyx_n_s_nhEy;
static PyObject *__pyx_n_s_nhEz;
static PyObject *__pyx_n_s_nhF;
static PyObject *__pyx_n_s_nhFx;
static PyObject *__pyx_n_s_nhFy;
static PyObject *__pyx_n_s_nhFz;
static PyObject *__pyx_n_s_nhN;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_none;
static PyObject *__pyx_n_s_nonzero;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nsimplex;
static PyObject *__pyx_n_s_ntE;
static PyObject *__pyx_n_s_ntEx;
static PyObject *__pyx_n_s_ntEy;
static PyObject *__pyx_n_s_ntEz;
static PyObject *__pyx_n_s_ntF;
static PyObject *__pyx_n_s_ntFx;
static PyObject *__pyx_n_s_ntFy;
static PyObject *__pyx_n_s_ntFz;
static PyObject *__pyx_n_s_ntN;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_ones;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_plot;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_projection;
static PyObject *__pyx_n_s_properties_utils;
static PyObject *__pyx_n_s_ps;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_query;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_kp_s_r_2;
static PyObject *__pyx_kp_s_r_3;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_refine_locals_lambda;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_ro;
static PyObject *__pyx_n_s_scipy_sparse;
static PyObject *__pyx_n_s_scipy_spatial;
static PyObject *__pyx_n_s_set_xlabel;
static PyObject *__pyx_n_s_set_xlim;
static PyObject *__pyx_n_s_set_ylabel;
static PyObject *__pyx_n_s_set_ylim;
static PyObject *__pyx_n_s_set_zlabel;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_show;
static PyObject *__pyx_n_s_showIt;
static PyObject *__pyx_n_s_simplices;
static PyObject *__pyx_n_s_simps;
static PyObject *__pyx_n_s_six;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sp;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_subplot;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_rgba;
static PyObject *__pyx_n_s_tocsr;
static PyObject *__pyx_n_s_transform;
static PyObject *__pyx_n_s_transform_2;
static PyObject *__pyx_n_s_ubc_indArr;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unique;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_utils;
static PyObject *__pyx_n_s_vertex_neighbor_vertices;
static PyObject *__pyx_n_s_vertex_to_simplex;
static PyObject *__pyx_n_s_vertices;
static PyObject *__pyx_n_s_vmax;
static PyObject *__pyx_n_s_vmin;
static PyObject *__pyx_n_s_where;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x0;
static PyObject *__pyx_kp_s_x0_must_be_a_list_tuple_or_numpy;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_x3;
static PyObject *__pyx_n_s_xEdge;
static PyObject *__pyx_n_s_xFace;
static PyObject *__pyx_n_s_xy;
static PyObject *__pyx_n_s_xyz;
static PyObject *__pyx_n_s_xz;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_yEdge;
static PyObject *__pyx_n_s_yFace;
static PyObject *__pyx_n_s_yz;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zEdge;
static PyObject *__pyx_n_s_zFace;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zerosOutside;
static PyObject *__pyx_n_s_zs;
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_5nodes___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_6center___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_2x0___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_1h___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_3dim___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_5index___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_9neighbors___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_10_index_loc___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_6_level___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self); /* proto */
static int __pyx_pf_10discretize_8tree_ext_9_TreeMesh___cinit__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2__init__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_h, PyObject *__pyx_v_x0); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_cell); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4refine(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_function, PyObject *__pyx_v_finalize); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6insert_cells(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_levels, PyObject *__pyx_v_finalize); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8finalize(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_10number(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2xC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2x0___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static int __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2x0_2__set__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_x0); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4fill___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8maxLevel___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nE___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhE___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntE___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nF___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhF___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntF___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridCC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_5gridN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridhN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_9h_gridded___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3vol___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4area___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4edge___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7faceDiv___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_faceDiv2D(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_14_faceDiv3D(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8edgeCurl___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_9nodalGrad___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_16_aveCC2FxStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_18_aveCC2FyStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_20_aveCC2FzStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_22_cellGradxStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_24_cellGradyStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_26_cellGradzStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_28_deflate_edges_x(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_30_deflate_edges_y(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_32_deflate_edges_z(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_34_deflate_edges(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_36_deflate_faces(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_38_deflate_faces_x(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_40_deflate_faces_y(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_42_deflate_faces_z(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_44_deflate_nodes(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEx2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEy2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEz2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveE2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveE2CCV___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFx2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFy2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFz2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveF2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveF2CCV___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveN2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_46_get_containing_cell_index(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_loc); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_48_getFaceP(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_xFace, PyObject *__pyx_v_yFace, PyObject *__pyx_v_zFace); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_getFacePxx_Pxx(PyObject *__pyx_self, PyObject *__pyx_v_xFace, PyObject *__pyx_v_yFace); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_50_getFacePxx(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_getFacePxxx_Pxxx(PyObject *__pyx_self, PyObject *__pyx_v_xFace, PyObject *__pyx_v_yFace, PyObject *__pyx_v_zFace); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_52_getFacePxxx(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_54_getEdgeP(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_xEdge, PyObject *__pyx_v_yEdge, PyObject *__pyx_v_zEdge); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_getEdgePxx_Pxx(PyObject *__pyx_self, PyObject *__pyx_v_xEdge, PyObject *__pyx_v_yEdge); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_56_getEdgePxx(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_getEdgePxxx_Pxxx(PyObject *__pyx_self, PyObject *__pyx_v_xEdge, PyObject *__pyx_v_yEdge, PyObject *__pyx_v_zEdge); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_58_getEdgePxxx(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_60_cull_outer_simplices(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_ps, PyObject *__pyx_v_simps, PyObject *__pyx_v_cull_dir); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_62_get_grid_triang(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_grid, CYTHON_UNUSED double __pyx_v_eps); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_64getInterpolationMat(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_locs, PyObject *__pyx_v_locType, PyObject *__pyx_v_zerosOutside); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_66_getNodeIntMat(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_locs, PyObject *__pyx_v_zerosOutside); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_68plotGrid(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_ax, PyObject *__pyx_v_showIt, PyObject *__pyx_v_grid, PyObject *__pyx_v_cells, PyObject *__pyx_v_cellLine, PyObject *__pyx_v_nodes, PyObject *__pyx_v_facesX, PyObject *__pyx_v_facesY, PyObject *__pyx_v_facesZ, PyObject *__pyx_v_edgesX, PyObject *__pyx_v_edgesY, PyObject *__pyx_v_edgesZ); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_70plotImage(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_I, PyObject *__pyx_v_ax, PyObject *__pyx_v_showIt, PyObject *__pyx_v_grid, PyObject *__pyx_v_clim); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_72plotSlice(CYTHON_UNUSED struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_74__getstate__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_76__setstate__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_state); /* proto */
static Py_ssize_t __pyx_pf_10discretize_8tree_ext_9_TreeMesh_78__len__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_80__getitem__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_ubc_indArr___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_10_ubc_order___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static void __pyx_pf_10discretize_8tree_ext_9_TreeMesh_82__dealloc__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_10discretize_8tree_ext_Cell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10discretize_8tree_ext__TreeMesh(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct__refine(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_111;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_slice__3;
static PyObject *__pyx_slice__4;
static PyObject *__pyx_slice__5;
static PyObject *__pyx_slice__6;
static PyObject *__pyx_slice__7;
static PyObject *__pyx_slice__8;
static PyObject *__pyx_slice__9;
static PyObject *__pyx_slice__10;
static PyObject *__pyx_slice__11;
static PyObject *__pyx_slice__12;
static PyObject *__pyx_slice__25;
static PyObject *__pyx_slice__28;
static PyObject *__pyx_slice__31;
static PyObject *__pyx_slice__34;
static PyObject *__pyx_slice__46;
static PyObject *__pyx_slice__49;
static PyObject *__pyx_slice__50;
static PyObject *__pyx_slice__82;
static PyObject *__pyx_slice__84;
static PyObject *__pyx_slice__86;
static PyObject *__pyx_slice__88;
static PyObject *__pyx_slice__90;
static PyObject *__pyx_slice__93;
static PyObject *__pyx_slice__95;
static PyObject *__pyx_slice__97;
static PyObject *__pyx_slice__99;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_slice__101;
static PyObject *__pyx_slice__103;
static PyObject *__pyx_slice__123;
static PyObject *__pyx_slice__124;
static PyObject *__pyx_slice__125;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;

/* "discretize/tree_ext.pyx":19
 *     cdef int_t _dim
 *     cdef c_Cell* _cell
 *     cdef void _set(self, c_Cell* cell):             # <<<<<<<<<<<<<<
 *         self._cell = cell
 *         self._dim = cell.n_dim
 */

static void __pyx_f_10discretize_8tree_ext_4Cell__set(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self, Cell *__pyx_v_cell) {
  __Pyx_RefNannyDeclarations
  int_t __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_set", 0);

  /* "discretize/tree_ext.pyx":20
 *     cdef c_Cell* _cell
 *     cdef void _set(self, c_Cell* cell):
 *         self._cell = cell             # <<<<<<<<<<<<<<
 *         self._dim = cell.n_dim
 *         self._x = cell.location[0]
 */
  __pyx_v_self->_cell = __pyx_v_cell;

  /* "discretize/tree_ext.pyx":21
 *     cdef void _set(self, c_Cell* cell):
 *         self._cell = cell
 *         self._dim = cell.n_dim             # <<<<<<<<<<<<<<
 *         self._x = cell.location[0]
 *         self._x0 = cell.points[0].location[0]
 */
  __pyx_t_1 = __pyx_v_cell->n_dim;
  __pyx_v_self->_dim = __pyx_t_1;

  /* "discretize/tree_ext.pyx":22
 *         self._cell = cell
 *         self._dim = cell.n_dim
 *         self._x = cell.location[0]             # <<<<<<<<<<<<<<
 *         self._x0 = cell.points[0].location[0]
 * 
 */
  __pyx_v_self->_x = (__pyx_v_cell->location[0]);

  /* "discretize/tree_ext.pyx":23
 *         self._dim = cell.n_dim
 *         self._x = cell.location[0]
 *         self._x0 = cell.points[0].location[0]             # <<<<<<<<<<<<<<
 * 
 *         self._y = cell.location[1]
 */
  __pyx_v_self->_x0 = ((__pyx_v_cell->points[0])->location[0]);

  /* "discretize/tree_ext.pyx":25
 *         self._x0 = cell.points[0].location[0]
 * 
 *         self._y = cell.location[1]             # <<<<<<<<<<<<<<
 *         self._y0 = cell.points[0].location[1]
 * 
 */
  __pyx_v_self->_y = (__pyx_v_cell->location[1]);

  /* "discretize/tree_ext.pyx":26
 * 
 *         self._y = cell.location[1]
 *         self._y0 = cell.points[0].location[1]             # <<<<<<<<<<<<<<
 * 
 *         self._wx = cell.points[3].location[0] - self._x0
 */
  __pyx_v_self->_y0 = ((__pyx_v_cell->points[0])->location[1]);

  /* "discretize/tree_ext.pyx":28
 *         self._y0 = cell.points[0].location[1]
 * 
 *         self._wx = cell.points[3].location[0] - self._x0             # <<<<<<<<<<<<<<
 *         self._wy = cell.points[3].location[1] - self._y0
 *         if(self._dim > 2):
 */
  __pyx_v_self->_wx = (((__pyx_v_cell->points[3])->location[0]) - __pyx_v_self->_x0);

  /* "discretize/tree_ext.pyx":29
 * 
 *         self._wx = cell.points[3].location[0] - self._x0
 *         self._wy = cell.points[3].location[1] - self._y0             # <<<<<<<<<<<<<<
 *         if(self._dim > 2):
 *             self._z = cell.location[2]
 */
  __pyx_v_self->_wy = (((__pyx_v_cell->points[3])->location[1]) - __pyx_v_self->_y0);

  /* "discretize/tree_ext.pyx":30
 *         self._wx = cell.points[3].location[0] - self._x0
 *         self._wy = cell.points[3].location[1] - self._y0
 *         if(self._dim > 2):             # <<<<<<<<<<<<<<
 *             self._z = cell.location[2]
 *             self._z0 = cell.points[0].location[2]
 */
  __pyx_t_2 = ((__pyx_v_self->_dim > 2) != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":31
 *         self._wy = cell.points[3].location[1] - self._y0
 *         if(self._dim > 2):
 *             self._z = cell.location[2]             # <<<<<<<<<<<<<<
 *             self._z0 = cell.points[0].location[2]
 *             self._wz = cell.points[7].location[2] - self._z0
 */
    __pyx_v_self->_z = (__pyx_v_cell->location[2]);

    /* "discretize/tree_ext.pyx":32
 *         if(self._dim > 2):
 *             self._z = cell.location[2]
 *             self._z0 = cell.points[0].location[2]             # <<<<<<<<<<<<<<
 *             self._wz = cell.points[7].location[2] - self._z0
 * 
 */
    __pyx_v_self->_z0 = ((__pyx_v_cell->points[0])->location[2]);

    /* "discretize/tree_ext.pyx":33
 *             self._z = cell.location[2]
 *             self._z0 = cell.points[0].location[2]
 *             self._wz = cell.points[7].location[2] - self._z0             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_v_self->_wz = (((__pyx_v_cell->points[7])->location[2]) - __pyx_v_self->_z0);

    /* "discretize/tree_ext.pyx":30
 *         self._wx = cell.points[3].location[0] - self._x0
 *         self._wy = cell.points[3].location[1] - self._y0
 *         if(self._dim > 2):             # <<<<<<<<<<<<<<
 *             self._z = cell.location[2]
 *             self._z0 = cell.points[0].location[2]
 */
  }

  /* "discretize/tree_ext.pyx":19
 *     cdef int_t _dim
 *     cdef c_Cell* _cell
 *     cdef void _set(self, c_Cell* cell):             # <<<<<<<<<<<<<<
 *         self._cell = cell
 *         self._dim = cell.n_dim
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "discretize/tree_ext.pyx":36
 * 
 *     @property
 *     def nodes(self):             # <<<<<<<<<<<<<<
 *         cdef c_Cell* cell = self._cell
 *         if self._dim > 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_5nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_5nodes___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_5nodes___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  Cell *__pyx_v_cell;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Cell *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":37
 *     @property
 *     def nodes(self):
 *         cdef c_Cell* cell = self._cell             # <<<<<<<<<<<<<<
 *         if self._dim > 2:
 *             return tuple((cell.points[0].index, cell.points[1].index,
 */
  __pyx_t_1 = __pyx_v_self->_cell;
  __pyx_v_cell = __pyx_t_1;

  /* "discretize/tree_ext.pyx":38
 *     def nodes(self):
 *         cdef c_Cell* cell = self._cell
 *         if self._dim > 2:             # <<<<<<<<<<<<<<
 *             return tuple((cell.points[0].index, cell.points[1].index,
 *                           cell.points[2].index, cell.points[3].index,
 */
  __pyx_t_2 = ((__pyx_v_self->_dim > 2) != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":39
 *         cdef c_Cell* cell = self._cell
 *         if self._dim > 2:
 *             return tuple((cell.points[0].index, cell.points[1].index,             # <<<<<<<<<<<<<<
 *                           cell.points[2].index, cell.points[3].index,
 *                           cell.points[4].index, cell.points[5].index,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[0])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[1])->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "discretize/tree_ext.pyx":40
 *         if self._dim > 2:
 *             return tuple((cell.points[0].index, cell.points[1].index,
 *                           cell.points[2].index, cell.points[3].index,             # <<<<<<<<<<<<<<
 *                           cell.points[4].index, cell.points[5].index,
 *                           cell.points[6].index, cell.points[7].index))
 */
    __pyx_t_5 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[2])->index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[3])->index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "discretize/tree_ext.pyx":41
 *             return tuple((cell.points[0].index, cell.points[1].index,
 *                           cell.points[2].index, cell.points[3].index,
 *                           cell.points[4].index, cell.points[5].index,             # <<<<<<<<<<<<<<
 *                           cell.points[6].index, cell.points[7].index))
 *         return tuple((cell.points[0].index, cell.points[1].index,
 */
    __pyx_t_7 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[4])->index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[5])->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "discretize/tree_ext.pyx":42
 *                           cell.points[2].index, cell.points[3].index,
 *                           cell.points[4].index, cell.points[5].index,
 *                           cell.points[6].index, cell.points[7].index))             # <<<<<<<<<<<<<<
 *         return tuple((cell.points[0].index, cell.points[1].index,
 *                       cell.points[2].index, cell.points[3].index))
 */
    __pyx_t_9 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[6])->index); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[7])->index); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);

    /* "discretize/tree_ext.pyx":39
 *         cdef c_Cell* cell = self._cell
 *         if self._dim > 2:
 *             return tuple((cell.points[0].index, cell.points[1].index,             # <<<<<<<<<<<<<<
 *                           cell.points[2].index, cell.points[3].index,
 *                           cell.points[4].index, cell.points[5].index,
 */
    __pyx_t_11 = PyTuple_New(8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_11, 5, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_11, 6, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_11, 7, __pyx_t_10);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":38
 *     def nodes(self):
 *         cdef c_Cell* cell = self._cell
 *         if self._dim > 2:             # <<<<<<<<<<<<<<
 *             return tuple((cell.points[0].index, cell.points[1].index,
 *                           cell.points[2].index, cell.points[3].index,
 */
  }

  /* "discretize/tree_ext.pyx":43
 *                           cell.points[4].index, cell.points[5].index,
 *                           cell.points[6].index, cell.points[7].index))
 *         return tuple((cell.points[0].index, cell.points[1].index,             # <<<<<<<<<<<<<<
 *                       cell.points[2].index, cell.points[3].index))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[0])->index); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[1])->index); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "discretize/tree_ext.pyx":44
 *                           cell.points[6].index, cell.points[7].index))
 *         return tuple((cell.points[0].index, cell.points[1].index,
 *                       cell.points[2].index, cell.points[3].index))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_9 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[2])->index); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = __Pyx_PyInt_From_int_t((__pyx_v_cell->points[3])->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "discretize/tree_ext.pyx":43
 *                           cell.points[4].index, cell.points[5].index,
 *                           cell.points[6].index, cell.points[7].index))
 *         return tuple((cell.points[0].index, cell.points[1].index,             # <<<<<<<<<<<<<<
 *                       cell.points[2].index, cell.points[3].index))
 * 
 */
  __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_8);
  __pyx_t_11 = 0;
  __pyx_t_10 = 0;
  __pyx_t_9 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":36
 * 
 *     @property
 *     def nodes(self):             # <<<<<<<<<<<<<<
 *         cdef c_Cell* cell = self._cell
 *         if self._dim > 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("discretize.tree_ext.Cell.nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":47
 * 
 *     @property
 *     def center(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2: return np.array([self._x, self._y])
 *         return np.array([self._x, self._y, self._z])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_6center_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_6center_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_6center___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_6center___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":48
 *     @property
 *     def center(self):
 *         if self._dim == 2: return np.array([self._x, self._y])             # <<<<<<<<<<<<<<
 *         return np.array([self._x, self._y, self._z])
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":49
 *     def center(self):
 *         if self._dim == 2: return np.array([self._x, self._y])
 *         return np.array([self._x, self._y, self._z])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":47
 * 
 *     @property
 *     def center(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2: return np.array([self._x, self._y])
 *         return np.array([self._x, self._y, self._z])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("discretize.tree_ext.Cell.center.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":52
 * 
 *     @property
 *     def x0(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2: return np.array([self._x0, self._y0])
 *         return np.array([self._x0, self._y0, self._z0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_2x0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_2x0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_2x0___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_2x0___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":53
 *     @property
 *     def x0(self):
 *         if self._dim == 2: return np.array([self._x0, self._y0])             # <<<<<<<<<<<<<<
 *         return np.array([self._x0, self._y0, self._z0])
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_x0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_y0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":54
 *     def x0(self):
 *         if self._dim == 2: return np.array([self._x0, self._y0])
 *         return np.array([self._x0, self._y0, self._z0])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_x0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_y0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_z0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":52
 * 
 *     @property
 *     def x0(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2: return np.array([self._x0, self._y0])
 *         return np.array([self._x0, self._y0, self._z0])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("discretize.tree_ext.Cell.x0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":57
 * 
 *     @property
 *     def h(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2: return np.array([self._wx, self._wy])
 *         return np.array([self._wx, self._wy, self._wz])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_1h_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_1h_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_1h___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_1h___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":58
 *     @property
 *     def h(self):
 *         if self._dim == 2: return np.array([self._wx, self._wy])             # <<<<<<<<<<<<<<
 *         return np.array([self._wx, self._wy, self._wz])
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_wx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_wy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":59
 *     def h(self):
 *         if self._dim == 2: return np.array([self._wx, self._wy])
 *         return np.array([self._wx, self._wy, self._wz])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_wx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_wy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_wz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":57
 * 
 *     @property
 *     def h(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2: return np.array([self._wx, self._wy])
 *         return np.array([self._wx, self._wy, self._wz])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("discretize.tree_ext.Cell.h.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":62
 * 
 *     @property
 *     def dim(self):             # <<<<<<<<<<<<<<
 *         return self._dim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_3dim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_3dim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_3dim___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_3dim___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":63
 *     @property
 *     def dim(self):
 *         return self._dim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int_t(__pyx_v_self->_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":62
 * 
 *     @property
 *     def dim(self):             # <<<<<<<<<<<<<<
 *         return self._dim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext.Cell.dim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":66
 * 
 *     @property
 *     def index(self):             # <<<<<<<<<<<<<<
 *         return self._cell.index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_5index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_5index___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_5index___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":67
 *     @property
 *     def index(self):
 *         return self._cell.index             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int_t(__pyx_v_self->_cell->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":66
 * 
 *     @property
 *     def index(self):             # <<<<<<<<<<<<<<
 *         return self._cell.index
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext.Cell.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":70
 * 
 *     @property
 *     def neighbors(self):             # <<<<<<<<<<<<<<
 *         neighbors = np.empty(self._dim*2, dtype=object)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_9neighbors_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_9neighbors_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_9neighbors___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_9neighbors___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  PyObject *__pyx_v_neighbors = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":71
 *     @property
 *     def neighbors(self):
 *         neighbors = np.empty(self._dim*2, dtype=object)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self._dim*2):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->_dim * 2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_builtin_object) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_neighbors = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":73
 *         neighbors = np.empty(self._dim*2, dtype=object)
 * 
 *         for i in range(self._dim*2):             # <<<<<<<<<<<<<<
 *             if self._cell.neighbors[i] is NULL:
 *                 neighbors[i] = -1
 */
  __pyx_t_5 = (__pyx_v_self->_dim * 2);
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "discretize/tree_ext.pyx":74
 * 
 *         for i in range(self._dim*2):
 *             if self._cell.neighbors[i] is NULL:             # <<<<<<<<<<<<<<
 *                 neighbors[i] = -1
 *             elif self._cell.neighbors[i].is_leaf():
 */
    __pyx_t_7 = (((__pyx_v_self->_cell->neighbors[__pyx_v_i]) == NULL) != 0);
    if (__pyx_t_7) {

      /* "discretize/tree_ext.pyx":75
 *         for i in range(self._dim*2):
 *             if self._cell.neighbors[i] is NULL:
 *                 neighbors[i] = -1             # <<<<<<<<<<<<<<
 *             elif self._cell.neighbors[i].is_leaf():
 *                 neighbors[i] = self._cell.neighbors[i].index
 */
      if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_int_neg_1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 75, __pyx_L1_error)

      /* "discretize/tree_ext.pyx":74
 * 
 *         for i in range(self._dim*2):
 *             if self._cell.neighbors[i] is NULL:             # <<<<<<<<<<<<<<
 *                 neighbors[i] = -1
 *             elif self._cell.neighbors[i].is_leaf():
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":76
 *             if self._cell.neighbors[i] is NULL:
 *                 neighbors[i] = -1
 *             elif self._cell.neighbors[i].is_leaf():             # <<<<<<<<<<<<<<
 *                 neighbors[i] = self._cell.neighbors[i].index
 *             else:
 */
    __pyx_t_7 = ((__pyx_v_self->_cell->neighbors[__pyx_v_i])->is_leaf() != 0);
    if (__pyx_t_7) {

      /* "discretize/tree_ext.pyx":77
 *                 neighbors[i] = -1
 *             elif self._cell.neighbors[i].is_leaf():
 *                 neighbors[i] = self._cell.neighbors[i].index             # <<<<<<<<<<<<<<
 *             else:
 *                 if self._dim==2:
 */
      __pyx_t_4 = __Pyx_PyInt_From_int_t((__pyx_v_self->_cell->neighbors[__pyx_v_i])->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "discretize/tree_ext.pyx":76
 *             if self._cell.neighbors[i] is NULL:
 *                 neighbors[i] = -1
 *             elif self._cell.neighbors[i].is_leaf():             # <<<<<<<<<<<<<<
 *                 neighbors[i] = self._cell.neighbors[i].index
 *             else:
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":79
 *                 neighbors[i] = self._cell.neighbors[i].index
 *             else:
 *                 if self._dim==2:             # <<<<<<<<<<<<<<
 *                     if i==0:
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 */
    /*else*/ {
      __pyx_t_7 = ((__pyx_v_self->_dim == 2) != 0);
      if (__pyx_t_7) {

        /* "discretize/tree_ext.pyx":80
 *             else:
 *                 if self._dim==2:
 *                     if i==0:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index]
 */
        switch (__pyx_v_i) {
          case 0:

          /* "discretize/tree_ext.pyx":81
 *                 if self._dim==2:
 *                     if i==0:
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index]
 *                     elif i==1:
 */
          __pyx_t_4 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[1])->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "discretize/tree_ext.pyx":82
 *                     if i==0:
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index]             # <<<<<<<<<<<<<<
 *                     elif i==1:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[3])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":81
 *                 if self._dim==2:
 *                     if i==0:
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index]
 *                     elif i==1:
 */
          __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
          __pyx_t_4 = 0;
          __pyx_t_1 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_3, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "discretize/tree_ext.pyx":80
 *             else:
 *                 if self._dim==2:
 *                     if i==0:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index]
 */
          break;

          /* "discretize/tree_ext.pyx":83
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index]
 *                     elif i==1:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index]
 */
          case 1:

          /* "discretize/tree_ext.pyx":84
 *                                         self._cell.neighbors[i].children[3].index]
 *                     elif i==1:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[2].index]
 *                     elif i==2:
 */
          __pyx_t_3 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[0])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "discretize/tree_ext.pyx":85
 *                     elif i==1:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index]             # <<<<<<<<<<<<<<
 *                     elif i==2:
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[2])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":84
 *                                         self._cell.neighbors[i].children[3].index]
 *                     elif i==1:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[2].index]
 *                     elif i==2:
 */
          __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
          __pyx_t_3 = 0;
          __pyx_t_1 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "discretize/tree_ext.pyx":83
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index]
 *                     elif i==1:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index]
 */
          break;

          /* "discretize/tree_ext.pyx":86
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index]
 *                     elif i==2:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index]
 */
          case 2:

          /* "discretize/tree_ext.pyx":87
 *                                         self._cell.neighbors[i].children[2].index]
 *                     elif i==2:
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index]
 *                     else:
 */
          __pyx_t_4 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[2])->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "discretize/tree_ext.pyx":88
 *                     elif i==2:
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index]             # <<<<<<<<<<<<<<
 *                     else:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[3])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":87
 *                                         self._cell.neighbors[i].children[2].index]
 *                     elif i==2:
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index]
 *                     else:
 */
          __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
          __pyx_t_4 = 0;
          __pyx_t_1 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_3, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "discretize/tree_ext.pyx":86
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index]
 *                     elif i==2:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index]
 */
          break;
          default:

          /* "discretize/tree_ext.pyx":90
 *                                         self._cell.neighbors[i].children[3].index]
 *                     else:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[1].index]
 *                 else:
 */
          __pyx_t_3 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[0])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "discretize/tree_ext.pyx":91
 *                     else:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[1].index]             # <<<<<<<<<<<<<<
 *                 else:
 *                     if i==0:
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[1])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":90
 *                                         self._cell.neighbors[i].children[3].index]
 *                     else:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[1].index]
 *                 else:
 */
          __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
          __pyx_t_3 = 0;
          __pyx_t_1 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 90, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          break;
        }

        /* "discretize/tree_ext.pyx":79
 *                 neighbors[i] = self._cell.neighbors[i].index
 *             else:
 *                 if self._dim==2:             # <<<<<<<<<<<<<<
 *                     if i==0:
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 */
        goto __pyx_L6;
      }

      /* "discretize/tree_ext.pyx":93
 *                                         self._cell.neighbors[i].children[1].index]
 *                 else:
 *                     if i==0:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index,
 */
      /*else*/ {

        /* "discretize/tree_ext.pyx":113
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index]
 *                     elif i==4:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index,
 */
        switch (__pyx_v_i) {

          /* "discretize/tree_ext.pyx":93
 *                                         self._cell.neighbors[i].children[1].index]
 *                 else:
 *                     if i==0:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index,
 */
          case 0:

          /* "discretize/tree_ext.pyx":94
 *                 else:
 *                     if i==0:
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index,
 *                                         self._cell.neighbors[i].children[5].index,
 */
          __pyx_t_4 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[1])->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "discretize/tree_ext.pyx":95
 *                     if i==0:
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[5].index,
 *                                         self._cell.neighbors[i].children[7].index]
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[3])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":96
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index,
 *                                         self._cell.neighbors[i].children[5].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==1:
 */
          __pyx_t_3 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[5])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "discretize/tree_ext.pyx":97
 *                                         self._cell.neighbors[i].children[3].index,
 *                                         self._cell.neighbors[i].children[5].index,
 *                                         self._cell.neighbors[i].children[7].index]             # <<<<<<<<<<<<<<
 *                     elif i==1:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 */
          __pyx_t_2 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[7])->index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "discretize/tree_ext.pyx":94
 *                 else:
 *                     if i==0:
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index,
 *                                         self._cell.neighbors[i].children[5].index,
 */
          __pyx_t_8 = PyList_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 94, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_4);
          PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_2);
          PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_2);
          __pyx_t_4 = 0;
          __pyx_t_1 = 0;
          __pyx_t_3 = 0;
          __pyx_t_2 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_8, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "discretize/tree_ext.pyx":93
 *                                         self._cell.neighbors[i].children[1].index]
 *                 else:
 *                     if i==0:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[3].index,
 */
          break;

          /* "discretize/tree_ext.pyx":98
 *                                         self._cell.neighbors[i].children[5].index,
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==1:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index,
 */
          case 1:

          /* "discretize/tree_ext.pyx":99
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==1:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[4].index,
 */
          __pyx_t_8 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[0])->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);

          /* "discretize/tree_ext.pyx":100
 *                     elif i==1:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[6].index]
 */
          __pyx_t_2 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[2])->index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "discretize/tree_ext.pyx":101
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[4].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[6].index]
 *                     elif i==2:
 */
          __pyx_t_3 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[4])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "discretize/tree_ext.pyx":102
 *                                         self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[6].index]             # <<<<<<<<<<<<<<
 *                     elif i==2:
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[6])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":99
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==1:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[4].index,
 */
          __pyx_t_4 = PyList_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_8);
          PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_2);
          PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_1);
          __pyx_t_8 = 0;
          __pyx_t_2 = 0;
          __pyx_t_3 = 0;
          __pyx_t_1 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "discretize/tree_ext.pyx":98
 *                                         self._cell.neighbors[i].children[5].index,
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==1:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[2].index,
 */
          break;

          /* "discretize/tree_ext.pyx":103
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[6].index]
 *                     elif i==2:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index,
 */
          case 2:

          /* "discretize/tree_ext.pyx":104
 *                                         self._cell.neighbors[i].children[6].index]
 *                     elif i==2:
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index,
 *                                         self._cell.neighbors[i].children[6].index,
 */
          __pyx_t_4 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[2])->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "discretize/tree_ext.pyx":105
 *                     elif i==2:
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[6].index,
 *                                         self._cell.neighbors[i].children[7].index]
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[3])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":106
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index,
 *                                         self._cell.neighbors[i].children[6].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==3:
 */
          __pyx_t_3 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[6])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "discretize/tree_ext.pyx":107
 *                                         self._cell.neighbors[i].children[3].index,
 *                                         self._cell.neighbors[i].children[6].index,
 *                                         self._cell.neighbors[i].children[7].index]             # <<<<<<<<<<<<<<
 *                     elif i==3:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 */
          __pyx_t_2 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[7])->index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "discretize/tree_ext.pyx":104
 *                                         self._cell.neighbors[i].children[6].index]
 *                     elif i==2:
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index,
 *                                         self._cell.neighbors[i].children[6].index,
 */
          __pyx_t_8 = PyList_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_4);
          PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_2);
          PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_2);
          __pyx_t_4 = 0;
          __pyx_t_1 = 0;
          __pyx_t_3 = 0;
          __pyx_t_2 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_8, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "discretize/tree_ext.pyx":103
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[6].index]
 *                     elif i==2:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index,
 */
          break;

          /* "discretize/tree_ext.pyx":108
 *                                         self._cell.neighbors[i].children[6].index,
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==3:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[1].index,
 */
          case 3:

          /* "discretize/tree_ext.pyx":109
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==3:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[4].index,
 */
          __pyx_t_8 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[0])->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);

          /* "discretize/tree_ext.pyx":110
 *                     elif i==3:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[1].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index]
 */
          __pyx_t_2 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[1])->index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "discretize/tree_ext.pyx":111
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[4].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[5].index]
 *                     elif i==4:
 */
          __pyx_t_3 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[4])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "discretize/tree_ext.pyx":112
 *                                         self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index]             # <<<<<<<<<<<<<<
 *                     elif i==4:
 *                         neighbors[i] = [self._cell.neighbors[i].children[4].index,
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[5])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":109
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==3:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[4].index,
 */
          __pyx_t_4 = PyList_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_8);
          PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_2);
          PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_1);
          __pyx_t_8 = 0;
          __pyx_t_2 = 0;
          __pyx_t_3 = 0;
          __pyx_t_1 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "discretize/tree_ext.pyx":108
 *                                         self._cell.neighbors[i].children[6].index,
 *                                         self._cell.neighbors[i].children[7].index]
 *                     elif i==3:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[1].index,
 */
          break;

          /* "discretize/tree_ext.pyx":113
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index]
 *                     elif i==4:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index,
 */
          case 4:

          /* "discretize/tree_ext.pyx":114
 *                                         self._cell.neighbors[i].children[5].index]
 *                     elif i==4:
 *                         neighbors[i] = [self._cell.neighbors[i].children[4].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[5].index,
 *                                         self._cell.neighbors[i].children[6].index,
 */
          __pyx_t_4 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[4])->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "discretize/tree_ext.pyx":115
 *                     elif i==4:
 *                         neighbors[i] = [self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[6].index,
 *                                         self._cell.neighbors[i].children[7].index]
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[5])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":116
 *                         neighbors[i] = [self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index,
 *                                         self._cell.neighbors[i].children[6].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[7].index]
 *                     else:
 */
          __pyx_t_3 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[6])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "discretize/tree_ext.pyx":117
 *                                         self._cell.neighbors[i].children[5].index,
 *                                         self._cell.neighbors[i].children[6].index,
 *                                         self._cell.neighbors[i].children[7].index]             # <<<<<<<<<<<<<<
 *                     else:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 */
          __pyx_t_2 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[7])->index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "discretize/tree_ext.pyx":114
 *                                         self._cell.neighbors[i].children[5].index]
 *                     elif i==4:
 *                         neighbors[i] = [self._cell.neighbors[i].children[4].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[5].index,
 *                                         self._cell.neighbors[i].children[6].index,
 */
          __pyx_t_8 = PyList_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 114, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_4);
          PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_2);
          PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_2);
          __pyx_t_4 = 0;
          __pyx_t_1 = 0;
          __pyx_t_3 = 0;
          __pyx_t_2 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_8, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 114, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "discretize/tree_ext.pyx":113
 *                                         self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index]
 *                     elif i==4:             # <<<<<<<<<<<<<<
 *                         neighbors[i] = [self._cell.neighbors[i].children[4].index,
 *                                         self._cell.neighbors[i].children[5].index,
 */
          break;
          default:

          /* "discretize/tree_ext.pyx":119
 *                                         self._cell.neighbors[i].children[7].index]
 *                     else:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[2].index,
 */
          __pyx_t_8 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[0])->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 119, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);

          /* "discretize/tree_ext.pyx":120
 *                     else:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[1].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index]
 */
          __pyx_t_2 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[1])->index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "discretize/tree_ext.pyx":121
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,
 *                                         self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[2].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[3].index]
 *         return neighbors
 */
          __pyx_t_3 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[2])->index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "discretize/tree_ext.pyx":122
 *                                         self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index]             # <<<<<<<<<<<<<<
 *         return neighbors
 * 
 */
          __pyx_t_1 = __Pyx_PyInt_From_int_t(((__pyx_v_self->_cell->neighbors[__pyx_v_i])->children[3])->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);

          /* "discretize/tree_ext.pyx":119
 *                                         self._cell.neighbors[i].children[7].index]
 *                     else:
 *                         neighbors[i] = [self._cell.neighbors[i].children[0].index,             # <<<<<<<<<<<<<<
 *                                         self._cell.neighbors[i].children[1].index,
 *                                         self._cell.neighbors[i].children[2].index,
 */
          __pyx_t_4 = PyList_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_8);
          PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_2);
          PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_1);
          PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_1);
          __pyx_t_8 = 0;
          __pyx_t_2 = 0;
          __pyx_t_3 = 0;
          __pyx_t_1 = 0;
          if (unlikely(__Pyx_SetItemInt(__pyx_v_neighbors, __pyx_v_i, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(0, 119, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          break;
        }
      }
      __pyx_L6:;
    }
    __pyx_L5:;
  }

  /* "discretize/tree_ext.pyx":123
 *                                         self._cell.neighbors[i].children[2].index,
 *                                         self._cell.neighbors[i].children[3].index]
 *         return neighbors             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_neighbors);
  __pyx_r = __pyx_v_neighbors;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":70
 * 
 *     @property
 *     def neighbors(self):             # <<<<<<<<<<<<<<
 *         neighbors = np.empty(self._dim*2, dtype=object)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("discretize.tree_ext.Cell.neighbors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_neighbors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":126
 * 
 *     @property
 *     def _index_loc(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2:
 *             return tuple((self._cell.location_ind[0], self._cell.location_ind[1]))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_10_index_loc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_10_index_loc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_10_index_loc___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_10_index_loc___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":127
 *     @property
 *     def _index_loc(self):
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             return tuple((self._cell.location_ind[0], self._cell.location_ind[1]))
 *         return tuple((self._cell.location_ind[0], self._cell.location_ind[1],
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":128
 *     def _index_loc(self):
 *         if self._dim == 2:
 *             return tuple((self._cell.location_ind[0], self._cell.location_ind[1]))             # <<<<<<<<<<<<<<
 *         return tuple((self._cell.location_ind[0], self._cell.location_ind[1],
 *                       self._cell.location_ind[2]))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int_t((__pyx_v_self->_cell->location_ind[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int_t((__pyx_v_self->_cell->location_ind[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":127
 *     @property
 *     def _index_loc(self):
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             return tuple((self._cell.location_ind[0], self._cell.location_ind[1]))
 *         return tuple((self._cell.location_ind[0], self._cell.location_ind[1],
 */
  }

  /* "discretize/tree_ext.pyx":129
 *         if self._dim == 2:
 *             return tuple((self._cell.location_ind[0], self._cell.location_ind[1]))
 *         return tuple((self._cell.location_ind[0], self._cell.location_ind[1],             # <<<<<<<<<<<<<<
 *                       self._cell.location_ind[2]))
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int_t((__pyx_v_self->_cell->location_ind[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_int_t((__pyx_v_self->_cell->location_ind[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "discretize/tree_ext.pyx":130
 *             return tuple((self._cell.location_ind[0], self._cell.location_ind[1]))
 *         return tuple((self._cell.location_ind[0], self._cell.location_ind[1],
 *                       self._cell.location_ind[2]))             # <<<<<<<<<<<<<<
 *     @property
 *     def _level(self):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int_t((__pyx_v_self->_cell->location_ind[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "discretize/tree_ext.pyx":129
 *         if self._dim == 2:
 *             return tuple((self._cell.location_ind[0], self._cell.location_ind[1]))
 *         return tuple((self._cell.location_ind[0], self._cell.location_ind[1],             # <<<<<<<<<<<<<<
 *                       self._cell.location_ind[2]))
 *     @property
 */
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":126
 * 
 *     @property
 *     def _index_loc(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2:
 *             return tuple((self._cell.location_ind[0], self._cell.location_ind[1]))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext.Cell._index_loc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":132
 *                       self._cell.location_ind[2]))
 *     @property
 *     def _level(self):             # <<<<<<<<<<<<<<
 *         return self._cell.level
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_6_level_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_4Cell_6_level_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_4Cell_6_level___get__(((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_4Cell_6_level___get__(struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":133
 *     @property
 *     def _level(self):
 *         return self._cell.level             # <<<<<<<<<<<<<<
 * 
 * cdef int_t _evaluate_func(void* function, c_Cell* cell) with gil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int_t(__pyx_v_self->_cell->level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":132
 *                       self._cell.location_ind[2]))
 *     @property
 *     def _level(self):             # <<<<<<<<<<<<<<
 *         return self._cell.level
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext.Cell._level.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":135
 *         return self._cell.level
 * 
 * cdef int_t _evaluate_func(void* function, c_Cell* cell) with gil:             # <<<<<<<<<<<<<<
 *     # Wraps a function to be called in C++
 *     func = <object> function
 */

static int_t __pyx_f_10discretize_8tree_ext__evaluate_func(void *__pyx_v_function, Cell *__pyx_v_cell) {
  PyObject *__pyx_v_func = NULL;
  struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_pycell = NULL;
  int_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int_t __pyx_t_5;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_evaluate_func", 0);

  /* "discretize/tree_ext.pyx":137
 * cdef int_t _evaluate_func(void* function, c_Cell* cell) with gil:
 *     # Wraps a function to be called in C++
 *     func = <object> function             # <<<<<<<<<<<<<<
 *     pycell = Cell()
 *     pycell._set(cell)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_function);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_func = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":138
 *     # Wraps a function to be called in C++
 *     func = <object> function
 *     pycell = Cell()             # <<<<<<<<<<<<<<
 *     pycell._set(cell)
 *     return <int_t> func(pycell)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10discretize_8tree_ext_Cell), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pycell = ((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":139
 *     func = <object> function
 *     pycell = Cell()
 *     pycell._set(cell)             # <<<<<<<<<<<<<<
 *     return <int_t> func(pycell)
 * 
 */
  ((struct __pyx_vtabstruct_10discretize_8tree_ext_Cell *)__pyx_v_pycell->__pyx_vtab)->_set(__pyx_v_pycell, __pyx_v_cell);

  /* "discretize/tree_ext.pyx":140
 *     pycell = Cell()
 *     pycell._set(cell)
 *     return <int_t> func(pycell)             # <<<<<<<<<<<<<<
 * 
 * cdef class _TreeMesh:
 */
  __Pyx_INCREF(__pyx_v_func);
  __pyx_t_2 = __pyx_v_func; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_pycell)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_pycell)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_pycell)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_pycell));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_pycell));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_pycell));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((int_t)__pyx_t_5);
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":135
 *         return self._cell.level
 * 
 * cdef int_t _evaluate_func(void* function, c_Cell* cell) with gil:             # <<<<<<<<<<<<<<
 *     # Wraps a function to be called in C++
 *     func = <object> function
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("discretize.tree_ext._evaluate_func", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_func);
  __Pyx_XDECREF((PyObject *)__pyx_v_pycell);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":166
 *     cdef object __ubc_order, __ubc_indArr
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.wrapper = new PyWrapper()
 *         self.tree = new c_Tree()
 */

/* Python wrapper */
static int __pyx_pw_10discretize_8tree_ext_9_TreeMesh_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10discretize_8tree_ext_9_TreeMesh_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh___cinit__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10discretize_8tree_ext_9_TreeMesh___cinit__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "discretize/tree_ext.pyx":167
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self.wrapper = new PyWrapper()             # <<<<<<<<<<<<<<
 *         self.tree = new c_Tree()
 * 
 */
  __pyx_v_self->wrapper = new PyWrapper();

  /* "discretize/tree_ext.pyx":168
 *     def __cinit__(self, *args, **kwargs):
 *         self.wrapper = new PyWrapper()
 *         self.tree = new c_Tree()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, h, x0):
 */
  __pyx_v_self->tree = new Tree();

  /* "discretize/tree_ext.pyx":166
 *     cdef object __ubc_order, __ubc_indArr
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.wrapper = new PyWrapper()
 *         self.tree = new c_Tree()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":170
 *         self.tree = new c_Tree()
 * 
 *     def __init__(self, h, x0):             # <<<<<<<<<<<<<<
 *         nx2 = 2*len(h[0])
 *         ny2 = 2*len(h[1])
 */

/* Python wrapper */
static int __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h = 0;
  PyObject *__pyx_v_x0 = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h,&__pyx_n_s_x0,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 170, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 170, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_h = values[0];
    __pyx_v_x0 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 170, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2__init__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_h, __pyx_v_x0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2__init__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_h, PyObject *__pyx_v_x0) {
  PyObject *__pyx_v_nx2 = NULL;
  PyObject *__pyx_v_ny2 = NULL;
  PyObject *__pyx_v_xs = NULL;
  PyObject *__pyx_v_ys = NULL;
  PyObject *__pyx_v_nz2 = NULL;
  PyObject *__pyx_v_zs = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "discretize/tree_ext.pyx":171
 * 
 *     def __init__(self, h, x0):
 *         nx2 = 2*len(h[0])             # <<<<<<<<<<<<<<
 *         ny2 = 2*len(h[1])
 *         self._dim = len(x0)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_h, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t((2 * __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nx2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":172
 *     def __init__(self, h, x0):
 *         nx2 = 2*len(h[0])
 *         ny2 = 2*len(h[1])             # <<<<<<<<<<<<<<
 *         self._dim = len(x0)
 *         self._x0 = x0
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_h, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t((2 * __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ny2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":173
 *         nx2 = 2*len(h[0])
 *         ny2 = 2*len(h[1])
 *         self._dim = len(x0)             # <<<<<<<<<<<<<<
 *         self._x0 = x0
 * 
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_x0); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_v_self->_dim = __pyx_t_2;

  /* "discretize/tree_ext.pyx":174
 *         ny2 = 2*len(h[1])
 *         self._dim = len(x0)
 *         self._x0 = x0             # <<<<<<<<<<<<<<
 * 
 *         xs = np.empty(nx2 + 1, dtype=float)
 */
  __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_x0);
  if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 174, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_x0, 0);
  __pyx_v_self->_x0 = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "discretize/tree_ext.pyx":176
 *         self._x0 = x0
 * 
 *         xs = np.empty(nx2 + 1, dtype=float)             # <<<<<<<<<<<<<<
 *         xs[::2] = np.cumsum(np.r_[x0[0], h[0]])
 *         xs[1::2] = (xs[:-1:2] + xs[2::2])/2
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_nx2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_xs = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":177
 * 
 *         xs = np.empty(nx2 + 1, dtype=float)
 *         xs[::2] = np.cumsum(np.r_[x0[0], h[0]])             # <<<<<<<<<<<<<<
 *         xs[1::2] = (xs[:-1:2] + xs[2::2])/2
 *         self._xs = xs
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cumsum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x0, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_h, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetItem(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_xs, __pyx_slice_, __pyx_t_6) < 0)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":178
 *         xs = np.empty(nx2 + 1, dtype=float)
 *         xs[::2] = np.cumsum(np.r_[x0[0], h[0]])
 *         xs[1::2] = (xs[:-1:2] + xs[2::2])/2             # <<<<<<<<<<<<<<
 *         self._xs = xs
 *         self.ls[0] = int(np.log2(len(h[0])))
 */
  __pyx_t_6 = PyObject_GetItem(__pyx_v_xs, __pyx_slice__2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_GetItem(__pyx_v_xs, __pyx_slice__3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_int_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_xs, __pyx_slice__4, __pyx_t_5) < 0)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":179
 *         xs[::2] = np.cumsum(np.r_[x0[0], h[0]])
 *         xs[1::2] = (xs[:-1:2] + xs[2::2])/2
 *         self._xs = xs             # <<<<<<<<<<<<<<
 *         self.ls[0] = int(np.log2(len(h[0])))
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_xs);
  if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 179, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_xs, 0);
  __pyx_v_self->_xs = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "discretize/tree_ext.pyx":180
 *         xs[1::2] = (xs[:-1:2] + xs[2::2])/2
 *         self._xs = xs
 *         self.ls[0] = int(np.log2(len(h[0])))             # <<<<<<<<<<<<<<
 * 
 *         ys = np.empty(ny2 + 1, dtype=float)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_log2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_h, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_4};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_4};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int_t(__pyx_t_6); if (unlikely((__pyx_t_9 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  (__pyx_v_self->ls[0]) = __pyx_t_9;

  /* "discretize/tree_ext.pyx":182
 *         self.ls[0] = int(np.log2(len(h[0])))
 * 
 *         ys = np.empty(ny2 + 1, dtype=float)             # <<<<<<<<<<<<<<
 *         ys[::2] = np.cumsum(np.r_[x0[1],h[1]])
 *         ys[1::2] = (ys[:-1:2] + ys[2::2])/2
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_ny2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_ys = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":183
 * 
 *         ys = np.empty(ny2 + 1, dtype=float)
 *         ys[::2] = np.cumsum(np.r_[x0[1],h[1]])             # <<<<<<<<<<<<<<
 *         ys[1::2] = (ys[:-1:2] + ys[2::2])/2
 *         self._ys = ys
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_cumsum); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_x0, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_h, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetItem(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_ys, __pyx_slice__5, __pyx_t_4) < 0)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":184
 *         ys = np.empty(ny2 + 1, dtype=float)
 *         ys[::2] = np.cumsum(np.r_[x0[1],h[1]])
 *         ys[1::2] = (ys[:-1:2] + ys[2::2])/2             # <<<<<<<<<<<<<<
 *         self._ys = ys
 *         self.ls[1] = int(np.log2(len(h[1])))
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_ys, __pyx_slice__6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyObject_GetItem(__pyx_v_ys, __pyx_slice__7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_int_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_ys, __pyx_slice__8, __pyx_t_8) < 0)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "discretize/tree_ext.pyx":185
 *         ys[::2] = np.cumsum(np.r_[x0[1],h[1]])
 *         ys[1::2] = (ys[:-1:2] + ys[2::2])/2
 *         self._ys = ys             # <<<<<<<<<<<<<<
 *         self.ls[1] = int(np.log2(len(h[1])))
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_ys);
  if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 185, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_ys, 0);
  __pyx_v_self->_ys = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "discretize/tree_ext.pyx":186
 *         ys[1::2] = (ys[:-1:2] + ys[2::2])/2
 *         self._ys = ys
 *         self.ls[1] = int(np.log2(len(h[1])))             # <<<<<<<<<<<<<<
 * 
 *         if self._dim > 2:
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_log2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_h, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_8);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int_t(__pyx_t_4); if (unlikely((__pyx_t_9 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  (__pyx_v_self->ls[1]) = __pyx_t_9;

  /* "discretize/tree_ext.pyx":188
 *         self.ls[1] = int(np.log2(len(h[1])))
 * 
 *         if self._dim > 2:             # <<<<<<<<<<<<<<
 *             nz2 = 2*len(h[2])
 * 
 */
  __pyx_t_10 = ((__pyx_v_self->_dim > 2) != 0);
  if (__pyx_t_10) {

    /* "discretize/tree_ext.pyx":189
 * 
 *         if self._dim > 2:
 *             nz2 = 2*len(h[2])             # <<<<<<<<<<<<<<
 * 
 *             zs = np.empty(nz2 + 1, dtype=float)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_h, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyInt_FromSsize_t((2 * __pyx_t_2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_nz2 = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "discretize/tree_ext.pyx":191
 *             nz2 = 2*len(h[2])
 * 
 *             zs = np.empty(nz2 + 1, dtype=float)             # <<<<<<<<<<<<<<
 *             zs[::2] = np.cumsum(np.r_[x0[2],h[2]])
 *             zs[1::2] = (zs[:-1:2] + zs[2::2])/2
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_nz2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_zs = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":192
 * 
 *             zs = np.empty(nz2 + 1, dtype=float)
 *             zs[::2] = np.cumsum(np.r_[x0[2],h[2]])             # <<<<<<<<<<<<<<
 *             zs[1::2] = (zs[:-1:2] + zs[2::2])/2
 *             self._zs = zs
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_cumsum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_r); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_x0, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_h, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __pyx_t_4 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_GetItem(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_7};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_zs, __pyx_slice__9, __pyx_t_5) < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":193
 *             zs = np.empty(nz2 + 1, dtype=float)
 *             zs[::2] = np.cumsum(np.r_[x0[2],h[2]])
 *             zs[1::2] = (zs[:-1:2] + zs[2::2])/2             # <<<<<<<<<<<<<<
 *             self._zs = zs
 *             self.ls[2] = int(np.log2(len(h[2])))
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_zs, __pyx_slice__10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_GetItem(__pyx_v_zs, __pyx_slice__11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_int_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_zs, __pyx_slice__12, __pyx_t_1) < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "discretize/tree_ext.pyx":194
 *             zs[::2] = np.cumsum(np.r_[x0[2],h[2]])
 *             zs[1::2] = (zs[:-1:2] + zs[2::2])/2
 *             self._zs = zs             # <<<<<<<<<<<<<<
 *             self.ls[2] = int(np.log2(len(h[2])))
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_v_zs);
    if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 194, __pyx_L1_error)
    __PYX_XDEC_MEMVIEW(&__pyx_v_self->_zs, 0);
    __pyx_v_self->_zs = __pyx_t_3;
    __pyx_t_3.memview = NULL;
    __pyx_t_3.data = NULL;

    /* "discretize/tree_ext.pyx":195
 *             zs[1::2] = (zs[:-1:2] + zs[2::2])/2
 *             self._zs = zs
 *             self.ls[2] = int(np.log2(len(h[2])))             # <<<<<<<<<<<<<<
 *         else:
 *             self._zs = np.zeros(1, dtype=float)
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_log2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_h, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int_t(__pyx_t_5); if (unlikely((__pyx_t_9 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_self->ls[2]) = __pyx_t_9;

    /* "discretize/tree_ext.pyx":188
 *         self.ls[1] = int(np.log2(len(h[1])))
 * 
 *         if self._dim > 2:             # <<<<<<<<<<<<<<
 *             nz2 = 2*len(h[2])
 * 
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":197
 *             self.ls[2] = int(np.log2(len(h[2])))
 *         else:
 *             self._zs = np.zeros(1, dtype=float)             # <<<<<<<<<<<<<<
 *             self.ls[2] = 1
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_6);
    if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_XDEC_MEMVIEW(&__pyx_v_self->_zs, 0);
    __pyx_v_self->_zs = __pyx_t_3;
    __pyx_t_3.memview = NULL;
    __pyx_t_3.data = NULL;

    /* "discretize/tree_ext.pyx":198
 *         else:
 *             self._zs = np.zeros(1, dtype=float)
 *             self.ls[2] = 1             # <<<<<<<<<<<<<<
 * 
 *         self.tree.set_dimension(self._dim)
 */
    (__pyx_v_self->ls[2]) = 1;
  }
  __pyx_L3:;

  /* "discretize/tree_ext.pyx":200
 *             self.ls[2] = 1
 * 
 *         self.tree.set_dimension(self._dim)             # <<<<<<<<<<<<<<
 *         self.tree.set_levels(self.ls[0], self.ls[1], self.ls[2])
 *         self.tree.set_xs(&self._xs[0], &self._ys[0], &self._zs[0])
 */
  __pyx_v_self->tree->set_dimension(__pyx_v_self->_dim);

  /* "discretize/tree_ext.pyx":201
 * 
 *         self.tree.set_dimension(self._dim)
 *         self.tree.set_levels(self.ls[0], self.ls[1], self.ls[2])             # <<<<<<<<<<<<<<
 *         self.tree.set_xs(&self._xs[0], &self._ys[0], &self._zs[0])
 *         self.tree.initialize_roots()
 */
  __pyx_v_self->tree->set_levels((__pyx_v_self->ls[0]), (__pyx_v_self->ls[1]), (__pyx_v_self->ls[2]));

  /* "discretize/tree_ext.pyx":202
 *         self.tree.set_dimension(self._dim)
 *         self.tree.set_levels(self.ls[0], self.ls[1], self.ls[2])
 *         self.tree.set_xs(&self._xs[0], &self._ys[0], &self._zs[0])             # <<<<<<<<<<<<<<
 *         self.tree.initialize_roots()
 * 
 */
  if (unlikely(!__pyx_v_self->_xs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 202, __pyx_L1_error)}
  __pyx_t_11 = 0;
  __pyx_t_12 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_v_self->_xs.shape[0];
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_v_self->_xs.shape[0])) __pyx_t_12 = 0;
  if (unlikely(__pyx_t_12 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_12);
    __PYX_ERR(0, 202, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->_ys.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 202, __pyx_L1_error)}
  __pyx_t_13 = 0;
  __pyx_t_12 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_v_self->_ys.shape[0];
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_12 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_v_self->_ys.shape[0])) __pyx_t_12 = 0;
  if (unlikely(__pyx_t_12 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_12);
    __PYX_ERR(0, 202, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->_zs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 202, __pyx_L1_error)}
  __pyx_t_14 = 0;
  __pyx_t_12 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_v_self->_zs.shape[0];
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_12 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_v_self->_zs.shape[0])) __pyx_t_12 = 0;
  if (unlikely(__pyx_t_12 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_12);
    __PYX_ERR(0, 202, __pyx_L1_error)
  }
  __pyx_v_self->tree->set_xs((&(*((double *) ( /* dim=0 */ (__pyx_v_self->_xs.data + __pyx_t_11 * __pyx_v_self->_xs.strides[0]) )))), (&(*((double *) ( /* dim=0 */ (__pyx_v_self->_ys.data + __pyx_t_13 * __pyx_v_self->_ys.strides[0]) )))), (&(*((double *) ( /* dim=0 */ (__pyx_v_self->_zs.data + __pyx_t_14 * __pyx_v_self->_zs.strides[0]) )))));

  /* "discretize/tree_ext.pyx":203
 *         self.tree.set_levels(self.ls[0], self.ls[1], self.ls[2])
 *         self.tree.set_xs(&self._xs[0], &self._ys[0], &self._zs[0])
 *         self.tree.initialize_roots()             # <<<<<<<<<<<<<<
 * 
 *         self._gridCC = None
 */
  __pyx_v_self->tree->initialize_roots();

  /* "discretize/tree_ext.pyx":205
 *         self.tree.initialize_roots()
 * 
 *         self._gridCC = None             # <<<<<<<<<<<<<<
 *         self._gridN = None
 *         self._gridhN = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridCC);
  __Pyx_DECREF(__pyx_v_self->_gridCC);
  __pyx_v_self->_gridCC = Py_None;

  /* "discretize/tree_ext.pyx":206
 * 
 *         self._gridCC = None
 *         self._gridN = None             # <<<<<<<<<<<<<<
 *         self._gridhN = None
 *         self._h_gridded = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridN);
  __Pyx_DECREF(__pyx_v_self->_gridN);
  __pyx_v_self->_gridN = Py_None;

  /* "discretize/tree_ext.pyx":207
 *         self._gridCC = None
 *         self._gridN = None
 *         self._gridhN = None             # <<<<<<<<<<<<<<
 *         self._h_gridded = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridhN);
  __Pyx_DECREF(__pyx_v_self->_gridhN);
  __pyx_v_self->_gridhN = Py_None;

  /* "discretize/tree_ext.pyx":208
 *         self._gridN = None
 *         self._gridhN = None
 *         self._h_gridded = None             # <<<<<<<<<<<<<<
 * 
 *         self._gridEx = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_h_gridded);
  __Pyx_DECREF(__pyx_v_self->_h_gridded);
  __pyx_v_self->_h_gridded = Py_None;

  /* "discretize/tree_ext.pyx":210
 *         self._h_gridded = None
 * 
 *         self._gridEx = None             # <<<<<<<<<<<<<<
 *         self._gridEy = None
 *         self._gridEz = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridEx);
  __Pyx_DECREF(__pyx_v_self->_gridEx);
  __pyx_v_self->_gridEx = Py_None;

  /* "discretize/tree_ext.pyx":211
 * 
 *         self._gridEx = None
 *         self._gridEy = None             # <<<<<<<<<<<<<<
 *         self._gridEz = None
 *         self._gridhEx = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridEy);
  __Pyx_DECREF(__pyx_v_self->_gridEy);
  __pyx_v_self->_gridEy = Py_None;

  /* "discretize/tree_ext.pyx":212
 *         self._gridEx = None
 *         self._gridEy = None
 *         self._gridEz = None             # <<<<<<<<<<<<<<
 *         self._gridhEx = None
 *         self._gridhEy = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridEz);
  __Pyx_DECREF(__pyx_v_self->_gridEz);
  __pyx_v_self->_gridEz = Py_None;

  /* "discretize/tree_ext.pyx":213
 *         self._gridEy = None
 *         self._gridEz = None
 *         self._gridhEx = None             # <<<<<<<<<<<<<<
 *         self._gridhEy = None
 *         self._gridhEz = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridhEx);
  __Pyx_DECREF(__pyx_v_self->_gridhEx);
  __pyx_v_self->_gridhEx = Py_None;

  /* "discretize/tree_ext.pyx":214
 *         self._gridEz = None
 *         self._gridhEx = None
 *         self._gridhEy = None             # <<<<<<<<<<<<<<
 *         self._gridhEz = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridhEy);
  __Pyx_DECREF(__pyx_v_self->_gridhEy);
  __pyx_v_self->_gridhEy = Py_None;

  /* "discretize/tree_ext.pyx":215
 *         self._gridhEx = None
 *         self._gridhEy = None
 *         self._gridhEz = None             # <<<<<<<<<<<<<<
 * 
 *         self._gridFx = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridhEz);
  __Pyx_DECREF(__pyx_v_self->_gridhEz);
  __pyx_v_self->_gridhEz = Py_None;

  /* "discretize/tree_ext.pyx":217
 *         self._gridhEz = None
 * 
 *         self._gridFx = None             # <<<<<<<<<<<<<<
 *         self._gridFy = None
 *         self._gridFz = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridFx);
  __Pyx_DECREF(__pyx_v_self->_gridFx);
  __pyx_v_self->_gridFx = Py_None;

  /* "discretize/tree_ext.pyx":218
 * 
 *         self._gridFx = None
 *         self._gridFy = None             # <<<<<<<<<<<<<<
 *         self._gridFz = None
 *         self._gridhFx = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridFy);
  __Pyx_DECREF(__pyx_v_self->_gridFy);
  __pyx_v_self->_gridFy = Py_None;

  /* "discretize/tree_ext.pyx":219
 *         self._gridFx = None
 *         self._gridFy = None
 *         self._gridFz = None             # <<<<<<<<<<<<<<
 *         self._gridhFx = None
 *         self._gridhFy = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridFz);
  __Pyx_DECREF(__pyx_v_self->_gridFz);
  __pyx_v_self->_gridFz = Py_None;

  /* "discretize/tree_ext.pyx":220
 *         self._gridFy = None
 *         self._gridFz = None
 *         self._gridhFx = None             # <<<<<<<<<<<<<<
 *         self._gridhFy = None
 *         self._gridhFz = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridhFx);
  __Pyx_DECREF(__pyx_v_self->_gridhFx);
  __pyx_v_self->_gridhFx = Py_None;

  /* "discretize/tree_ext.pyx":221
 *         self._gridFz = None
 *         self._gridhFx = None
 *         self._gridhFy = None             # <<<<<<<<<<<<<<
 *         self._gridhFz = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridhFy);
  __Pyx_DECREF(__pyx_v_self->_gridhFy);
  __pyx_v_self->_gridhFy = Py_None;

  /* "discretize/tree_ext.pyx":222
 *         self._gridhFx = None
 *         self._gridhFy = None
 *         self._gridhFz = None             # <<<<<<<<<<<<<<
 * 
 *         self._vol = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_gridhFz);
  __Pyx_DECREF(__pyx_v_self->_gridhFz);
  __pyx_v_self->_gridhFz = Py_None;

  /* "discretize/tree_ext.pyx":224
 *         self._gridhFz = None
 * 
 *         self._vol = None             # <<<<<<<<<<<<<<
 *         self._area = None
 *         self._edge = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_vol);
  __Pyx_DECREF(__pyx_v_self->_vol);
  __pyx_v_self->_vol = Py_None;

  /* "discretize/tree_ext.pyx":225
 * 
 *         self._vol = None
 *         self._area = None             # <<<<<<<<<<<<<<
 *         self._edge = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_area);
  __Pyx_DECREF(__pyx_v_self->_area);
  __pyx_v_self->_area = Py_None;

  /* "discretize/tree_ext.pyx":226
 *         self._vol = None
 *         self._area = None
 *         self._edge = None             # <<<<<<<<<<<<<<
 * 
 *         self._aveFx2CC = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_edge);
  __Pyx_DECREF(__pyx_v_self->_edge);
  __pyx_v_self->_edge = Py_None;

  /* "discretize/tree_ext.pyx":228
 *         self._edge = None
 * 
 *         self._aveFx2CC = None             # <<<<<<<<<<<<<<
 *         self._aveFy2CC = None
 *         self._aveFz2CC = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveFx2CC);
  __Pyx_DECREF(__pyx_v_self->_aveFx2CC);
  __pyx_v_self->_aveFx2CC = Py_None;

  /* "discretize/tree_ext.pyx":229
 * 
 *         self._aveFx2CC = None
 *         self._aveFy2CC = None             # <<<<<<<<<<<<<<
 *         self._aveFz2CC = None
 *         self._aveF2CC = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveFy2CC);
  __Pyx_DECREF(__pyx_v_self->_aveFy2CC);
  __pyx_v_self->_aveFy2CC = Py_None;

  /* "discretize/tree_ext.pyx":230
 *         self._aveFx2CC = None
 *         self._aveFy2CC = None
 *         self._aveFz2CC = None             # <<<<<<<<<<<<<<
 *         self._aveF2CC = None
 *         self._aveF2CCV = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveFz2CC);
  __Pyx_DECREF(__pyx_v_self->_aveFz2CC);
  __pyx_v_self->_aveFz2CC = Py_None;

  /* "discretize/tree_ext.pyx":231
 *         self._aveFy2CC = None
 *         self._aveFz2CC = None
 *         self._aveF2CC = None             # <<<<<<<<<<<<<<
 *         self._aveF2CCV = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveF2CC);
  __Pyx_DECREF(__pyx_v_self->_aveF2CC);
  __pyx_v_self->_aveF2CC = Py_None;

  /* "discretize/tree_ext.pyx":232
 *         self._aveFz2CC = None
 *         self._aveF2CC = None
 *         self._aveF2CCV = None             # <<<<<<<<<<<<<<
 * 
 *         self._aveEx2CC = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveF2CCV);
  __Pyx_DECREF(__pyx_v_self->_aveF2CCV);
  __pyx_v_self->_aveF2CCV = Py_None;

  /* "discretize/tree_ext.pyx":234
 *         self._aveF2CCV = None
 * 
 *         self._aveEx2CC = None             # <<<<<<<<<<<<<<
 *         self._aveEy2CC = None
 *         self._aveEz2CC = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveEx2CC);
  __Pyx_DECREF(__pyx_v_self->_aveEx2CC);
  __pyx_v_self->_aveEx2CC = Py_None;

  /* "discretize/tree_ext.pyx":235
 * 
 *         self._aveEx2CC = None
 *         self._aveEy2CC = None             # <<<<<<<<<<<<<<
 *         self._aveEz2CC = None
 *         self._aveE2CC = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveEy2CC);
  __Pyx_DECREF(__pyx_v_self->_aveEy2CC);
  __pyx_v_self->_aveEy2CC = Py_None;

  /* "discretize/tree_ext.pyx":236
 *         self._aveEx2CC = None
 *         self._aveEy2CC = None
 *         self._aveEz2CC = None             # <<<<<<<<<<<<<<
 *         self._aveE2CC = None
 *         self._aveE2CCV = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveEz2CC);
  __Pyx_DECREF(__pyx_v_self->_aveEz2CC);
  __pyx_v_self->_aveEz2CC = Py_None;

  /* "discretize/tree_ext.pyx":237
 *         self._aveEy2CC = None
 *         self._aveEz2CC = None
 *         self._aveE2CC = None             # <<<<<<<<<<<<<<
 *         self._aveE2CCV = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveE2CC);
  __Pyx_DECREF(__pyx_v_self->_aveE2CC);
  __pyx_v_self->_aveE2CC = Py_None;

  /* "discretize/tree_ext.pyx":238
 *         self._aveEz2CC = None
 *         self._aveE2CC = None
 *         self._aveE2CCV = None             # <<<<<<<<<<<<<<
 * 
 *         self._aveN2CC = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveE2CCV);
  __Pyx_DECREF(__pyx_v_self->_aveE2CCV);
  __pyx_v_self->_aveE2CCV = Py_None;

  /* "discretize/tree_ext.pyx":240
 *         self._aveE2CCV = None
 * 
 *         self._aveN2CC = None             # <<<<<<<<<<<<<<
 * 
 *         self._faceDiv = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_aveN2CC);
  __Pyx_DECREF(__pyx_v_self->_aveN2CC);
  __pyx_v_self->_aveN2CC = Py_None;

  /* "discretize/tree_ext.pyx":242
 *         self._aveN2CC = None
 * 
 *         self._faceDiv = None             # <<<<<<<<<<<<<<
 *         self._nodalGrad = None
 *         self._edgeCurl = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_faceDiv);
  __Pyx_DECREF(__pyx_v_self->_faceDiv);
  __pyx_v_self->_faceDiv = Py_None;

  /* "discretize/tree_ext.pyx":243
 * 
 *         self._faceDiv = None
 *         self._nodalGrad = None             # <<<<<<<<<<<<<<
 *         self._edgeCurl = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_nodalGrad);
  __Pyx_DECREF(__pyx_v_self->_nodalGrad);
  __pyx_v_self->_nodalGrad = Py_None;

  /* "discretize/tree_ext.pyx":244
 *         self._faceDiv = None
 *         self._nodalGrad = None
 *         self._edgeCurl = None             # <<<<<<<<<<<<<<
 * 
 *         self.__ubc_order = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_edgeCurl);
  __Pyx_DECREF(__pyx_v_self->_edgeCurl);
  __pyx_v_self->_edgeCurl = Py_None;

  /* "discretize/tree_ext.pyx":246
 *         self._edgeCurl = None
 * 
 *         self.__ubc_order = None             # <<<<<<<<<<<<<<
 *         self.__ubc_indArr = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->__pyx___ubc_order);
  __Pyx_DECREF(__pyx_v_self->__pyx___ubc_order);
  __pyx_v_self->__pyx___ubc_order = Py_None;

  /* "discretize/tree_ext.pyx":247
 * 
 *         self.__ubc_order = None
 *         self.__ubc_indArr = None             # <<<<<<<<<<<<<<
 * 
 *     def refine(self, function, finalize=True):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->__pyx___ubc_indArr);
  __Pyx_DECREF(__pyx_v_self->__pyx___ubc_indArr);
  __pyx_v_self->__pyx___ubc_indArr = Py_None;

  /* "discretize/tree_ext.pyx":170
 *         self.tree = new c_Tree()
 * 
 *     def __init__(self, h, x0):             # <<<<<<<<<<<<<<
 *         nx2 = 2*len(h[0])
 *         ny2 = 2*len(h[1])
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_3, 1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nx2);
  __Pyx_XDECREF(__pyx_v_ny2);
  __Pyx_XDECREF(__pyx_v_xs);
  __Pyx_XDECREF(__pyx_v_ys);
  __Pyx_XDECREF(__pyx_v_nz2);
  __Pyx_XDECREF(__pyx_v_zs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":249
 *         self.__ubc_indArr = None
 * 
 *     def refine(self, function, finalize=True):             # <<<<<<<<<<<<<<
 *         if type(function) in integer_types:
 *             level = function
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_5refine(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_5refine(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_function = 0;
  PyObject *__pyx_v_finalize = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refine (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_function,&__pyx_n_s_finalize,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_function)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_finalize);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "refine") < 0)) __PYX_ERR(0, 249, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_function = values[0];
    __pyx_v_finalize = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("refine", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 249, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.refine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4refine(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_function, __pyx_v_finalize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":252
 *         if type(function) in integer_types:
 *             level = function
 *             function = lambda cell: level             # <<<<<<<<<<<<<<
 * 
 *         #Wrapping function so it can be called in c++
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6refine_lambda(PyObject *__pyx_self, PyObject *__pyx_v_cell); /*proto*/
static PyMethodDef __pyx_mdef_10discretize_8tree_ext_9_TreeMesh_6refine_lambda = {"lambda", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6refine_lambda, METH_O, 0};
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6refine_lambda(PyObject *__pyx_self, PyObject *__pyx_v_cell) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_cell));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_cell) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *__pyx_cur_scope;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda", 0);
  __pyx_outer_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_level)) { __Pyx_RaiseClosureNameError("level"); __PYX_ERR(0, 252, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_level);
  __pyx_r = __pyx_cur_scope->__pyx_v_level;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.refine.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":249
 *         self.__ubc_indArr = None
 * 
 *     def refine(self, function, finalize=True):             # <<<<<<<<<<<<<<
 *         if type(function) in integer_types:
 *             level = function
 */

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4refine(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_function, PyObject *__pyx_v_finalize) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *__pyx_cur_scope;
  void *__pyx_v_func_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("refine", 0);
  __pyx_cur_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *)__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct__refine(__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct__refine, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 249, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_INCREF(__pyx_v_function);

  /* "discretize/tree_ext.pyx":250
 * 
 *     def refine(self, function, finalize=True):
 *         if type(function) in integer_types:             # <<<<<<<<<<<<<<
 *             level = function
 *             function = lambda cell: level
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_integer_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(((PyObject *)Py_TYPE(__pyx_v_function)), __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":251
 *     def refine(self, function, finalize=True):
 *         if type(function) in integer_types:
 *             level = function             # <<<<<<<<<<<<<<
 *             function = lambda cell: level
 * 
 */
    __Pyx_INCREF(__pyx_v_function);
    __Pyx_GIVEREF(__pyx_v_function);
    __pyx_cur_scope->__pyx_v_level = __pyx_v_function;

    /* "discretize/tree_ext.pyx":252
 *         if type(function) in integer_types:
 *             level = function
 *             function = lambda cell: level             # <<<<<<<<<<<<<<
 * 
 *         #Wrapping function so it can be called in c++
 */
    __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10discretize_8tree_ext_9_TreeMesh_6refine_lambda, 0, __pyx_n_s_refine_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_discretize_tree_ext, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_function, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "discretize/tree_ext.pyx":250
 * 
 *     def refine(self, function, finalize=True):
 *         if type(function) in integer_types:             # <<<<<<<<<<<<<<
 *             level = function
 *             function = lambda cell: level
 */
  }

  /* "discretize/tree_ext.pyx":255
 * 
 *         #Wrapping function so it can be called in c++
 *         cdef void * func_ptr = <void *> function             # <<<<<<<<<<<<<<
 *         self.wrapper.set(func_ptr, _evaluate_func)
 *         #Then tell c++ to build the tree
 */
  __pyx_v_func_ptr = ((void *)__pyx_v_function);

  /* "discretize/tree_ext.pyx":256
 *         #Wrapping function so it can be called in c++
 *         cdef void * func_ptr = <void *> function
 *         self.wrapper.set(func_ptr, _evaluate_func)             # <<<<<<<<<<<<<<
 *         #Then tell c++ to build the tree
 *         self.tree.build_tree_from_function(self.wrapper)
 */
  __pyx_v_self->wrapper->set(__pyx_v_func_ptr, __pyx_f_10discretize_8tree_ext__evaluate_func);

  /* "discretize/tree_ext.pyx":258
 *         self.wrapper.set(func_ptr, _evaluate_func)
 *         #Then tell c++ to build the tree
 *         self.tree.build_tree_from_function(self.wrapper)             # <<<<<<<<<<<<<<
 *         if finalize:
 *             self.finalize()
 */
  __pyx_v_self->tree->build_tree_from_function(__pyx_v_self->wrapper);

  /* "discretize/tree_ext.pyx":259
 *         #Then tell c++ to build the tree
 *         self.tree.build_tree_from_function(self.wrapper)
 *         if finalize:             # <<<<<<<<<<<<<<
 *             self.finalize()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_finalize); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":260
 *         self.tree.build_tree_from_function(self.wrapper)
 *         if finalize:
 *             self.finalize()             # <<<<<<<<<<<<<<
 * 
 *     def insert_cells(self, points, levels, finalize=True):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_finalize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "discretize/tree_ext.pyx":259
 *         #Then tell c++ to build the tree
 *         self.tree.build_tree_from_function(self.wrapper)
 *         if finalize:             # <<<<<<<<<<<<<<
 *             self.finalize()
 * 
 */
  }

  /* "discretize/tree_ext.pyx":249
 *         self.__ubc_indArr = None
 * 
 *     def refine(self, function, finalize=True):             # <<<<<<<<<<<<<<
 *         if type(function) in integer_types:
 *             level = function
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.refine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_function);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":262
 *             self.finalize()
 * 
 *     def insert_cells(self, points, levels, finalize=True):             # <<<<<<<<<<<<<<
 *         cdef double[:, :] cs = np.atleast_2d(points)
 *         cdef int[:] ls = np.asarray(levels, dtype=np.int32)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7insert_cells(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7insert_cells(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_levels = 0;
  PyObject *__pyx_v_finalize = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert_cells (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_levels,&__pyx_n_s_finalize,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_levels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert_cells", 0, 2, 3, 1); __PYX_ERR(0, 262, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_finalize);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert_cells") < 0)) __PYX_ERR(0, 262, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_points = values[0];
    __pyx_v_levels = values[1];
    __pyx_v_finalize = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert_cells", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.insert_cells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6insert_cells(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_points, __pyx_v_levels, __pyx_v_finalize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6insert_cells(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_points, PyObject *__pyx_v_levels, PyObject *__pyx_v_finalize) {
  __Pyx_memviewslice __pyx_v_cs = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_ls = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_8;
  int_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("insert_cells", 0);

  /* "discretize/tree_ext.pyx":263
 * 
 *     def insert_cells(self, points, levels, finalize=True):
 *         cdef double[:, :] cs = np.atleast_2d(points)             # <<<<<<<<<<<<<<
 *         cdef int[:] ls = np.asarray(levels, dtype=np.int32)
 *         cdef int_t i
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_atleast_2d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_points); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_points};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_points};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_points);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_1);
  if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cs = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "discretize/tree_ext.pyx":264
 *     def insert_cells(self, points, levels, finalize=True):
 *         cdef double[:, :] cs = np.atleast_2d(points)
 *         cdef int[:] ls = np.asarray(levels, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         cdef int_t i
 *         for i in range(ls.shape[0]):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_levels);
  __Pyx_GIVEREF(__pyx_v_levels);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_levels);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_t_6);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_ls = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":266
 *         cdef int[:] ls = np.asarray(levels, dtype=np.int32)
 *         cdef int_t i
 *         for i in range(ls.shape[0]):             # <<<<<<<<<<<<<<
 *             self.tree.insert_cell(&cs[i, 0], ls[i])
 *         if finalize:
 */
  __pyx_t_8 = (__pyx_v_ls.shape[0]);
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "discretize/tree_ext.pyx":267
 *         cdef int_t i
 *         for i in range(ls.shape[0]):
 *             self.tree.insert_cell(&cs[i, 0], ls[i])             # <<<<<<<<<<<<<<
 *         if finalize:
 *             self.finalize()
 */
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = 0;
    __pyx_t_12 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_cs.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_cs.shape[0])) __pyx_t_12 = 0;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_cs.shape[1];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_cs.shape[1])) __pyx_t_12 = 1;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 267, __pyx_L1_error)
    }
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_12 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_ls.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_ls.shape[0])) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 267, __pyx_L1_error)
    }
    __pyx_v_self->tree->insert_cell((&(*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_cs.data + __pyx_t_10 * __pyx_v_cs.strides[0]) ) + __pyx_t_11 * __pyx_v_cs.strides[1]) )))), (*((int *) ( /* dim=0 */ (__pyx_v_ls.data + __pyx_t_13 * __pyx_v_ls.strides[0]) ))));
  }

  /* "discretize/tree_ext.pyx":268
 *         for i in range(ls.shape[0]):
 *             self.tree.insert_cell(&cs[i, 0], ls[i])
 *         if finalize:             # <<<<<<<<<<<<<<
 *             self.finalize()
 * 
 */
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_finalize); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(0, 268, __pyx_L1_error)
  if (__pyx_t_14) {

    /* "discretize/tree_ext.pyx":269
 *             self.tree.insert_cell(&cs[i, 0], ls[i])
 *         if finalize:
 *             self.finalize()             # <<<<<<<<<<<<<<
 * 
 *     def finalize(self):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_finalize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 269, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "discretize/tree_ext.pyx":268
 *         for i in range(ls.shape[0]):
 *             self.tree.insert_cell(&cs[i, 0], ls[i])
 *         if finalize:             # <<<<<<<<<<<<<<
 *             self.finalize()
 * 
 */
  }

  /* "discretize/tree_ext.pyx":262
 *             self.finalize()
 * 
 *     def insert_cells(self, points, levels, finalize=True):             # <<<<<<<<<<<<<<
 *         cdef double[:, :] cs = np.atleast_2d(points)
 *         cdef int[:] ls = np.asarray(levels, dtype=np.int32)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.insert_cells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_cs, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ls, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":271
 *             self.finalize()
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         self.tree.finalize_lists()
 *         self.tree.number()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_9finalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_9finalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8finalize(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8finalize(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize", 0);

  /* "discretize/tree_ext.pyx":272
 * 
 *     def finalize(self):
 *         self.tree.finalize_lists()             # <<<<<<<<<<<<<<
 *         self.tree.number()
 * 
 */
  __pyx_v_self->tree->finalize_lists();

  /* "discretize/tree_ext.pyx":273
 *     def finalize(self):
 *         self.tree.finalize_lists()
 *         self.tree.number()             # <<<<<<<<<<<<<<
 * 
 *     def number(self):
 */
  __pyx_v_self->tree->number();

  /* "discretize/tree_ext.pyx":271
 *             self.finalize()
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         self.tree.finalize_lists()
 *         self.tree.number()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":275
 *         self.tree.number()
 * 
 *     def number(self):             # <<<<<<<<<<<<<<
 *         self.tree.number()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11number(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11number(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("number (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_10number(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_10number(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("number", 0);

  /* "discretize/tree_ext.pyx":276
 * 
 *     def number(self):
 *         self.tree.number()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->tree->number();

  /* "discretize/tree_ext.pyx":275
 *         self.tree.number()
 * 
 *     def number(self):             # <<<<<<<<<<<<<<
 *         self.tree.number()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":279
 * 
 *     @property
 *     def xC(self):             # <<<<<<<<<<<<<<
 *         return np.array(self._xc)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2xC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2xC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2xC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2xC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":280
 *     @property
 *     def xC(self):
 *         return np.array(self._xc)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_carray_to_py_double(__pyx_v_self->_xc, 3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":279
 * 
 *     @property
 *     def xC(self):             # <<<<<<<<<<<<<<
 *         return np.array(self._xc)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.xC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":283
 * 
 *     @property
 *     def x0(self):             # <<<<<<<<<<<<<<
 *         return np.array(self._x0)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2x0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2x0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2x0___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2x0___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":284
 *     @property
 *     def x0(self):
 *         return np.array(self._x0)             # <<<<<<<<<<<<<<
 * 
 *     @x0.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_v_self->_x0.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 284, __pyx_L1_error)}
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_self->_x0, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":283
 * 
 *     @property
 *     def x0(self):             # <<<<<<<<<<<<<<
 *         return np.array(self._x0)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.x0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":287
 * 
 *     @x0.setter
 *     def x0(self, x0):             # <<<<<<<<<<<<<<
 *         # On object creation, x0 attempts to be set to properties.utils.Sentinel, so guard against this
 *         # I believe this happens in the BaseMesh class
 */

/* Python wrapper */
static int __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2x0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x0); /*proto*/
static int __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2x0_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x0) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2x0_2__set__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), ((PyObject *)__pyx_v_x0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2x0_2__set__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_x0) {
  int_t __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_shift = { 0, 0, { 0 }, { 0 }, { 0 } };
  Node *__pyx_v_node;
  Edge *__pyx_v_edge;
  Face *__pyx_v_face;
  Py_ssize_t __pyx_v_i;
  std::pair<int_t,Node *>  __pyx_v_itN;
  std::pair<int_t,Edge *>  __pyx_v_itE;
  std::pair<int_t,Face *>  __pyx_v_itF;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  std::map<int_t,Node *> ::iterator __pyx_t_29;
  node_map_t *__pyx_t_30;
  std::pair<int_t,Node *>  __pyx_t_31;
  Node *__pyx_t_32;
  int_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  std::map<int_t,Edge *> ::iterator __pyx_t_35;
  edge_map_t *__pyx_t_36;
  std::pair<int_t,Edge *>  __pyx_t_37;
  Edge *__pyx_t_38;
  Py_ssize_t __pyx_t_39;
  Py_ssize_t __pyx_t_40;
  Py_ssize_t __pyx_t_41;
  std::map<int_t,Face *> ::iterator __pyx_t_42;
  face_map_t *__pyx_t_43;
  std::pair<int_t,Face *>  __pyx_t_44;
  Face *__pyx_t_45;
  Py_ssize_t __pyx_t_46;
  Py_ssize_t __pyx_t_47;
  Py_ssize_t __pyx_t_48;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "discretize/tree_ext.pyx":290
 *         # On object creation, x0 attempts to be set to properties.utils.Sentinel, so guard against this
 *         # I believe this happens in the BaseMesh class
 *         if isinstance(x0, Sentinel):             # <<<<<<<<<<<<<<
 *             return # do nothing!!
 *         if not isinstance(x0, (list, tuple, np.ndarray)):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Sentinel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_x0, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":291
 *         # I believe this happens in the BaseMesh class
 *         if isinstance(x0, Sentinel):
 *             return # do nothing!!             # <<<<<<<<<<<<<<
 *         if not isinstance(x0, (list, tuple, np.ndarray)):
 *             raise ValueError('x0 must be a list, tuple or numpy array')
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":290
 *         # On object creation, x0 attempts to be set to properties.utils.Sentinel, so guard against this
 *         # I believe this happens in the BaseMesh class
 *         if isinstance(x0, Sentinel):             # <<<<<<<<<<<<<<
 *             return # do nothing!!
 *         if not isinstance(x0, (list, tuple, np.ndarray)):
 */
  }

  /* "discretize/tree_ext.pyx":292
 *         if isinstance(x0, Sentinel):
 *             return # do nothing!!
 *         if not isinstance(x0, (list, tuple, np.ndarray)):             # <<<<<<<<<<<<<<
 *             raise ValueError('x0 must be a list, tuple or numpy array')
 *         self._x0 = np.asarray(x0, dtype=np.float64)
 */
  __pyx_t_2 = PyList_Check(__pyx_v_x0); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = PyTuple_Check(__pyx_v_x0); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_x0, __pyx_ptype_5numpy_ndarray); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "discretize/tree_ext.pyx":293
 *             return # do nothing!!
 *         if not isinstance(x0, (list, tuple, np.ndarray)):
 *             raise ValueError('x0 must be a list, tuple or numpy array')             # <<<<<<<<<<<<<<
 *         self._x0 = np.asarray(x0, dtype=np.float64)
 *         cdef int_t dim = self._x0.shape[0]
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 293, __pyx_L1_error)

    /* "discretize/tree_ext.pyx":292
 *         if isinstance(x0, Sentinel):
 *             return # do nothing!!
 *         if not isinstance(x0, (list, tuple, np.ndarray)):             # <<<<<<<<<<<<<<
 *             raise ValueError('x0 must be a list, tuple or numpy array')
 *         self._x0 = np.asarray(x0, dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":294
 *         if not isinstance(x0, (list, tuple, np.ndarray)):
 *             raise ValueError('x0 must be a list, tuple or numpy array')
 *         self._x0 = np.asarray(x0, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int_t dim = self._x0.shape[0]
 *         cdef double[:] shift
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_x0);
  __Pyx_GIVEREF(__pyx_v_x0);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_x0);
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_8);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_x0, 0);
  __pyx_v_self->_x0 = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":295
 *             raise ValueError('x0 must be a list, tuple or numpy array')
 *         self._x0 = np.asarray(x0, dtype=np.float64)
 *         cdef int_t dim = self._x0.shape[0]             # <<<<<<<<<<<<<<
 *         cdef double[:] shift
 *         #cdef c_Cell *cell
 */
  if (unlikely(!__pyx_v_self->_x0.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 295, __pyx_L1_error)}
  __pyx_v_dim = (__pyx_v_self->_x0.shape[0]);

  /* "discretize/tree_ext.pyx":301
 *         cdef Edge *edge
 *         cdef Face *face
 *         if self.tree.n_dim > 0: # Will only happen if __init__ has been called             # <<<<<<<<<<<<<<
 *             shift = np.empty(dim, dtype=np.float64)
 * 
 */
  __pyx_t_4 = ((__pyx_v_self->tree->n_dim > 0) != 0);
  if (__pyx_t_4) {

    /* "discretize/tree_ext.pyx":302
 *         cdef Face *face
 *         if self.tree.n_dim > 0: # Will only happen if __init__ has been called
 *             shift = np.empty(dim, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *             shift[0] = self._x0[0] - self._xs[0]
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_int_t(__pyx_v_dim); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_7);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_shift = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":304
 *             shift = np.empty(dim, dtype=np.float64)
 * 
 *             shift[0] = self._x0[0] - self._xs[0]             # <<<<<<<<<<<<<<
 *             shift[1] = self._x0[1] - self._ys[0]
 *             if dim == 3:
 */
    if (unlikely(!__pyx_v_self->_x0.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 304, __pyx_L1_error)}
    __pyx_t_10 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->_x0.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->_x0.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 304, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->_xs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 304, __pyx_L1_error)}
    __pyx_t_12 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->_xs.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->_xs.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 304, __pyx_L1_error)
    }
    __pyx_t_13 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_shift.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 304, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_13 * __pyx_v_shift.strides[0]) )) = ((*((double *) ( /* dim=0 */ (__pyx_v_self->_x0.data + __pyx_t_10 * __pyx_v_self->_x0.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_self->_xs.data + __pyx_t_12 * __pyx_v_self->_xs.strides[0]) ))));

    /* "discretize/tree_ext.pyx":305
 * 
 *             shift[0] = self._x0[0] - self._xs[0]
 *             shift[1] = self._x0[1] - self._ys[0]             # <<<<<<<<<<<<<<
 *             if dim == 3:
 *                 shift[2] = self._x0[2] - self._zs[0]
 */
    if (unlikely(!__pyx_v_self->_x0.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 305, __pyx_L1_error)}
    __pyx_t_14 = 1;
    __pyx_t_11 = -1;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_v_self->_x0.shape[0];
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_14 >= __pyx_v_self->_x0.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 305, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->_ys.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 305, __pyx_L1_error)}
    __pyx_t_15 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_v_self->_ys.shape[0];
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_15 >= __pyx_v_self->_ys.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 305, __pyx_L1_error)
    }
    __pyx_t_16 = 1;
    __pyx_t_11 = -1;
    if (__pyx_t_16 < 0) {
      __pyx_t_16 += __pyx_v_shift.shape[0];
      if (unlikely(__pyx_t_16 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_16 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 305, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_16 * __pyx_v_shift.strides[0]) )) = ((*((double *) ( /* dim=0 */ (__pyx_v_self->_x0.data + __pyx_t_14 * __pyx_v_self->_x0.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_self->_ys.data + __pyx_t_15 * __pyx_v_self->_ys.strides[0]) ))));

    /* "discretize/tree_ext.pyx":306
 *             shift[0] = self._x0[0] - self._xs[0]
 *             shift[1] = self._x0[1] - self._ys[0]
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 shift[2] = self._x0[2] - self._zs[0]
 * 
 */
    __pyx_t_4 = ((__pyx_v_dim == 3) != 0);
    if (__pyx_t_4) {

      /* "discretize/tree_ext.pyx":307
 *             shift[1] = self._x0[1] - self._ys[0]
 *             if dim == 3:
 *                 shift[2] = self._x0[2] - self._zs[0]             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self._xs.shape[0]):
 */
      if (unlikely(!__pyx_v_self->_x0.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 307, __pyx_L1_error)}
      __pyx_t_17 = 2;
      __pyx_t_11 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_v_self->_x0.shape[0];
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_v_self->_x0.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 307, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->_zs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 307, __pyx_L1_error)}
      __pyx_t_18 = 0;
      __pyx_t_11 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_self->_zs.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_self->_zs.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 307, __pyx_L1_error)
      }
      __pyx_t_19 = 2;
      __pyx_t_11 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_v_shift.shape[0];
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 307, __pyx_L1_error)
      }
      *((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_19 * __pyx_v_shift.strides[0]) )) = ((*((double *) ( /* dim=0 */ (__pyx_v_self->_x0.data + __pyx_t_17 * __pyx_v_self->_x0.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_self->_zs.data + __pyx_t_18 * __pyx_v_self->_zs.strides[0]) ))));

      /* "discretize/tree_ext.pyx":306
 *             shift[0] = self._x0[0] - self._xs[0]
 *             shift[1] = self._x0[1] - self._ys[0]
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 shift[2] = self._x0[2] - self._zs[0]
 * 
 */
    }

    /* "discretize/tree_ext.pyx":309
 *                 shift[2] = self._x0[2] - self._zs[0]
 * 
 *             for i in range(self._xs.shape[0]):             # <<<<<<<<<<<<<<
 *                 self._xs[i] += shift[0]
 *             for i in range(self._ys.shape[0]):
 */
    if (unlikely(!__pyx_v_self->_xs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 309, __pyx_L1_error)}
    __pyx_t_20 = (__pyx_v_self->_xs.shape[0]);
    for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
      __pyx_v_i = __pyx_t_21;

      /* "discretize/tree_ext.pyx":310
 * 
 *             for i in range(self._xs.shape[0]):
 *                 self._xs[i] += shift[0]             # <<<<<<<<<<<<<<
 *             for i in range(self._ys.shape[0]):
 *                 self._ys[i] += shift[1]
 */
      __pyx_t_22 = 0;
      __pyx_t_11 = -1;
      if (__pyx_t_22 < 0) {
        __pyx_t_22 += __pyx_v_shift.shape[0];
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_22 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 310, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->_xs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 310, __pyx_L1_error)}
      __pyx_t_23 = __pyx_v_i;
      __pyx_t_11 = -1;
      if (__pyx_t_23 < 0) {
        __pyx_t_23 += __pyx_v_self->_xs.shape[0];
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_23 >= __pyx_v_self->_xs.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 310, __pyx_L1_error)
      }
      *((double *) ( /* dim=0 */ (__pyx_v_self->_xs.data + __pyx_t_23 * __pyx_v_self->_xs.strides[0]) )) += (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_22 * __pyx_v_shift.strides[0]) )));
    }

    /* "discretize/tree_ext.pyx":311
 *             for i in range(self._xs.shape[0]):
 *                 self._xs[i] += shift[0]
 *             for i in range(self._ys.shape[0]):             # <<<<<<<<<<<<<<
 *                 self._ys[i] += shift[1]
 *             if dim == 3:
 */
    if (unlikely(!__pyx_v_self->_ys.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 311, __pyx_L1_error)}
    __pyx_t_20 = (__pyx_v_self->_ys.shape[0]);
    for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
      __pyx_v_i = __pyx_t_21;

      /* "discretize/tree_ext.pyx":312
 *                 self._xs[i] += shift[0]
 *             for i in range(self._ys.shape[0]):
 *                 self._ys[i] += shift[1]             # <<<<<<<<<<<<<<
 *             if dim == 3:
 *                 for i in range(self._zs.shape[0]):
 */
      __pyx_t_24 = 1;
      __pyx_t_11 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_v_shift.shape[0];
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 312, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_self->_ys.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 312, __pyx_L1_error)}
      __pyx_t_25 = __pyx_v_i;
      __pyx_t_11 = -1;
      if (__pyx_t_25 < 0) {
        __pyx_t_25 += __pyx_v_self->_ys.shape[0];
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_25 >= __pyx_v_self->_ys.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 312, __pyx_L1_error)
      }
      *((double *) ( /* dim=0 */ (__pyx_v_self->_ys.data + __pyx_t_25 * __pyx_v_self->_ys.strides[0]) )) += (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_24 * __pyx_v_shift.strides[0]) )));
    }

    /* "discretize/tree_ext.pyx":313
 *             for i in range(self._ys.shape[0]):
 *                 self._ys[i] += shift[1]
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 for i in range(self._zs.shape[0]):
 *                     self._zs[i] += shift[2]
 */
    __pyx_t_4 = ((__pyx_v_dim == 3) != 0);
    if (__pyx_t_4) {

      /* "discretize/tree_ext.pyx":314
 *                 self._ys[i] += shift[1]
 *             if dim == 3:
 *                 for i in range(self._zs.shape[0]):             # <<<<<<<<<<<<<<
 *                     self._zs[i] += shift[2]
 * 
 */
      if (unlikely(!__pyx_v_self->_zs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 314, __pyx_L1_error)}
      __pyx_t_20 = (__pyx_v_self->_zs.shape[0]);
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
        __pyx_v_i = __pyx_t_21;

        /* "discretize/tree_ext.pyx":315
 *             if dim == 3:
 *                 for i in range(self._zs.shape[0]):
 *                     self._zs[i] += shift[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_26 = 2;
        __pyx_t_11 = -1;
        if (__pyx_t_26 < 0) {
          __pyx_t_26 += __pyx_v_shift.shape[0];
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_11 = 0;
        } else if (unlikely(__pyx_t_26 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(0, 315, __pyx_L1_error)
        }
        if (unlikely(!__pyx_v_self->_zs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 315, __pyx_L1_error)}
        __pyx_t_27 = __pyx_v_i;
        __pyx_t_11 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_v_self->_zs.shape[0];
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_11 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_v_self->_zs.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(0, 315, __pyx_L1_error)
        }
        *((double *) ( /* dim=0 */ (__pyx_v_self->_zs.data + __pyx_t_27 * __pyx_v_self->_zs.strides[0]) )) += (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_26 * __pyx_v_shift.strides[0]) )));
      }

      /* "discretize/tree_ext.pyx":313
 *             for i in range(self._ys.shape[0]):
 *                 self._ys[i] += shift[1]
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 for i in range(self._zs.shape[0]):
 *                     self._zs[i] += shift[2]
 */
    }

    /* "discretize/tree_ext.pyx":319
 * 
 *             #update the locations of all of the items
 *             self.tree.shift_cell_centers(&shift[0])             # <<<<<<<<<<<<<<
 * 
 *             for itN in self.tree.nodes:
 */
    __pyx_t_28 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_28 < 0) {
      __pyx_t_28 += __pyx_v_shift.shape[0];
      if (unlikely(__pyx_t_28 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_28 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 319, __pyx_L1_error)
    }
    __pyx_v_self->tree->shift_cell_centers((&(*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_28 * __pyx_v_shift.strides[0]) )))));

    /* "discretize/tree_ext.pyx":321
 *             self.tree.shift_cell_centers(&shift[0])
 * 
 *             for itN in self.tree.nodes:             # <<<<<<<<<<<<<<
 *                 node = itN.second
 *                 for i in range(dim):
 */
    __pyx_t_30 = &__pyx_v_self->tree->nodes;
    __pyx_t_29 = __pyx_t_30->begin();
    for (;;) {
      if (!(__pyx_t_29 != __pyx_t_30->end())) break;
      __pyx_t_31 = *__pyx_t_29;
      ++__pyx_t_29;
      __pyx_v_itN = __pyx_t_31;

      /* "discretize/tree_ext.pyx":322
 * 
 *             for itN in self.tree.nodes:
 *                 node = itN.second             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     node.location[i] += shift[i]
 */
      __pyx_t_32 = __pyx_v_itN.second;
      __pyx_v_node = __pyx_t_32;

      /* "discretize/tree_ext.pyx":323
 *             for itN in self.tree.nodes:
 *                 node = itN.second
 *                 for i in range(dim):             # <<<<<<<<<<<<<<
 *                     node.location[i] += shift[i]
 * 
 */
      __pyx_t_33 = __pyx_v_dim;
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_33; __pyx_t_20+=1) {
        __pyx_v_i = __pyx_t_20;

        /* "discretize/tree_ext.pyx":324
 *                 node = itN.second
 *                 for i in range(dim):
 *                     node.location[i] += shift[i]             # <<<<<<<<<<<<<<
 * 
 *             for itE in self.tree.edges_x:
 */
        __pyx_t_21 = __pyx_v_i;
        __pyx_t_34 = __pyx_v_i;
        __pyx_t_11 = -1;
        if (__pyx_t_34 < 0) {
          __pyx_t_34 += __pyx_v_shift.shape[0];
          if (unlikely(__pyx_t_34 < 0)) __pyx_t_11 = 0;
        } else if (unlikely(__pyx_t_34 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(0, 324, __pyx_L1_error)
        }
        (__pyx_v_node->location[__pyx_t_21]) = ((__pyx_v_node->location[__pyx_t_21]) + (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_34 * __pyx_v_shift.strides[0]) ))));
      }

      /* "discretize/tree_ext.pyx":321
 *             self.tree.shift_cell_centers(&shift[0])
 * 
 *             for itN in self.tree.nodes:             # <<<<<<<<<<<<<<
 *                 node = itN.second
 *                 for i in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":326
 *                     node.location[i] += shift[i]
 * 
 *             for itE in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                 edge = itE.second
 *                 for i in range(dim):
 */
    __pyx_t_36 = &__pyx_v_self->tree->edges_x;
    __pyx_t_35 = __pyx_t_36->begin();
    for (;;) {
      if (!(__pyx_t_35 != __pyx_t_36->end())) break;
      __pyx_t_37 = *__pyx_t_35;
      ++__pyx_t_35;
      __pyx_v_itE = __pyx_t_37;

      /* "discretize/tree_ext.pyx":327
 * 
 *             for itE in self.tree.edges_x:
 *                 edge = itE.second             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     edge.location[i] += shift[i]
 */
      __pyx_t_38 = __pyx_v_itE.second;
      __pyx_v_edge = __pyx_t_38;

      /* "discretize/tree_ext.pyx":328
 *             for itE in self.tree.edges_x:
 *                 edge = itE.second
 *                 for i in range(dim):             # <<<<<<<<<<<<<<
 *                     edge.location[i] += shift[i]
 * 
 */
      __pyx_t_33 = __pyx_v_dim;
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_33; __pyx_t_20+=1) {
        __pyx_v_i = __pyx_t_20;

        /* "discretize/tree_ext.pyx":329
 *                 edge = itE.second
 *                 for i in range(dim):
 *                     edge.location[i] += shift[i]             # <<<<<<<<<<<<<<
 * 
 *             for itE in self.tree.edges_y:
 */
        __pyx_t_21 = __pyx_v_i;
        __pyx_t_39 = __pyx_v_i;
        __pyx_t_11 = -1;
        if (__pyx_t_39 < 0) {
          __pyx_t_39 += __pyx_v_shift.shape[0];
          if (unlikely(__pyx_t_39 < 0)) __pyx_t_11 = 0;
        } else if (unlikely(__pyx_t_39 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(0, 329, __pyx_L1_error)
        }
        (__pyx_v_edge->location[__pyx_t_21]) = ((__pyx_v_edge->location[__pyx_t_21]) + (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_39 * __pyx_v_shift.strides[0]) ))));
      }

      /* "discretize/tree_ext.pyx":326
 *                     node.location[i] += shift[i]
 * 
 *             for itE in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                 edge = itE.second
 *                 for i in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":331
 *                     edge.location[i] += shift[i]
 * 
 *             for itE in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                 edge = itE.second
 *                 for i in range(dim):
 */
    __pyx_t_36 = &__pyx_v_self->tree->edges_y;
    __pyx_t_35 = __pyx_t_36->begin();
    for (;;) {
      if (!(__pyx_t_35 != __pyx_t_36->end())) break;
      __pyx_t_37 = *__pyx_t_35;
      ++__pyx_t_35;
      __pyx_v_itE = __pyx_t_37;

      /* "discretize/tree_ext.pyx":332
 * 
 *             for itE in self.tree.edges_y:
 *                 edge = itE.second             # <<<<<<<<<<<<<<
 *                 for i in range(dim):
 *                     edge.location[i] += shift[i]
 */
      __pyx_t_38 = __pyx_v_itE.second;
      __pyx_v_edge = __pyx_t_38;

      /* "discretize/tree_ext.pyx":333
 *             for itE in self.tree.edges_y:
 *                 edge = itE.second
 *                 for i in range(dim):             # <<<<<<<<<<<<<<
 *                     edge.location[i] += shift[i]
 * 
 */
      __pyx_t_33 = __pyx_v_dim;
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_33; __pyx_t_20+=1) {
        __pyx_v_i = __pyx_t_20;

        /* "discretize/tree_ext.pyx":334
 *                 edge = itE.second
 *                 for i in range(dim):
 *                     edge.location[i] += shift[i]             # <<<<<<<<<<<<<<
 * 
 *             if dim == 3:
 */
        __pyx_t_21 = __pyx_v_i;
        __pyx_t_40 = __pyx_v_i;
        __pyx_t_11 = -1;
        if (__pyx_t_40 < 0) {
          __pyx_t_40 += __pyx_v_shift.shape[0];
          if (unlikely(__pyx_t_40 < 0)) __pyx_t_11 = 0;
        } else if (unlikely(__pyx_t_40 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(0, 334, __pyx_L1_error)
        }
        (__pyx_v_edge->location[__pyx_t_21]) = ((__pyx_v_edge->location[__pyx_t_21]) + (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_40 * __pyx_v_shift.strides[0]) ))));
      }

      /* "discretize/tree_ext.pyx":331
 *                     edge.location[i] += shift[i]
 * 
 *             for itE in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                 edge = itE.second
 *                 for i in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":336
 *                     edge.location[i] += shift[i]
 * 
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 for itE in self.tree.edges_z:
 *                     edge = itE.second
 */
    __pyx_t_4 = ((__pyx_v_dim == 3) != 0);
    if (__pyx_t_4) {

      /* "discretize/tree_ext.pyx":337
 * 
 *             if dim == 3:
 *                 for itE in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                     edge = itE.second
 *                     for i in range(dim):
 */
      __pyx_t_36 = &__pyx_v_self->tree->edges_z;
      __pyx_t_35 = __pyx_t_36->begin();
      for (;;) {
        if (!(__pyx_t_35 != __pyx_t_36->end())) break;
        __pyx_t_37 = *__pyx_t_35;
        ++__pyx_t_35;
        __pyx_v_itE = __pyx_t_37;

        /* "discretize/tree_ext.pyx":338
 *             if dim == 3:
 *                 for itE in self.tree.edges_z:
 *                     edge = itE.second             # <<<<<<<<<<<<<<
 *                     for i in range(dim):
 *                         edge.location[i] += shift[i]
 */
        __pyx_t_38 = __pyx_v_itE.second;
        __pyx_v_edge = __pyx_t_38;

        /* "discretize/tree_ext.pyx":339
 *                 for itE in self.tree.edges_z:
 *                     edge = itE.second
 *                     for i in range(dim):             # <<<<<<<<<<<<<<
 *                         edge.location[i] += shift[i]
 * 
 */
        __pyx_t_33 = __pyx_v_dim;
        for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_33; __pyx_t_20+=1) {
          __pyx_v_i = __pyx_t_20;

          /* "discretize/tree_ext.pyx":340
 *                     edge = itE.second
 *                     for i in range(dim):
 *                         edge.location[i] += shift[i]             # <<<<<<<<<<<<<<
 * 
 *                 for itF in self.tree.faces_x:
 */
          __pyx_t_21 = __pyx_v_i;
          __pyx_t_41 = __pyx_v_i;
          __pyx_t_11 = -1;
          if (__pyx_t_41 < 0) {
            __pyx_t_41 += __pyx_v_shift.shape[0];
            if (unlikely(__pyx_t_41 < 0)) __pyx_t_11 = 0;
          } else if (unlikely(__pyx_t_41 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
          if (unlikely(__pyx_t_11 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_11);
            __PYX_ERR(0, 340, __pyx_L1_error)
          }
          (__pyx_v_edge->location[__pyx_t_21]) = ((__pyx_v_edge->location[__pyx_t_21]) + (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_41 * __pyx_v_shift.strides[0]) ))));
        }

        /* "discretize/tree_ext.pyx":337
 * 
 *             if dim == 3:
 *                 for itE in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                     edge = itE.second
 *                     for i in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":342
 *                         edge.location[i] += shift[i]
 * 
 *                 for itF in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *                     face = itF.second
 *                     for i in range(dim):
 */
      __pyx_t_43 = &__pyx_v_self->tree->faces_x;
      __pyx_t_42 = __pyx_t_43->begin();
      for (;;) {
        if (!(__pyx_t_42 != __pyx_t_43->end())) break;
        __pyx_t_44 = *__pyx_t_42;
        ++__pyx_t_42;
        __pyx_v_itF = __pyx_t_44;

        /* "discretize/tree_ext.pyx":343
 * 
 *                 for itF in self.tree.faces_x:
 *                     face = itF.second             # <<<<<<<<<<<<<<
 *                     for i in range(dim):
 *                         face.location[i] += shift[i]
 */
        __pyx_t_45 = __pyx_v_itF.second;
        __pyx_v_face = __pyx_t_45;

        /* "discretize/tree_ext.pyx":344
 *                 for itF in self.tree.faces_x:
 *                     face = itF.second
 *                     for i in range(dim):             # <<<<<<<<<<<<<<
 *                         face.location[i] += shift[i]
 * 
 */
        __pyx_t_33 = __pyx_v_dim;
        for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_33; __pyx_t_20+=1) {
          __pyx_v_i = __pyx_t_20;

          /* "discretize/tree_ext.pyx":345
 *                     face = itF.second
 *                     for i in range(dim):
 *                         face.location[i] += shift[i]             # <<<<<<<<<<<<<<
 * 
 *                 for itF in self.tree.faces_y:
 */
          __pyx_t_21 = __pyx_v_i;
          __pyx_t_46 = __pyx_v_i;
          __pyx_t_11 = -1;
          if (__pyx_t_46 < 0) {
            __pyx_t_46 += __pyx_v_shift.shape[0];
            if (unlikely(__pyx_t_46 < 0)) __pyx_t_11 = 0;
          } else if (unlikely(__pyx_t_46 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
          if (unlikely(__pyx_t_11 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_11);
            __PYX_ERR(0, 345, __pyx_L1_error)
          }
          (__pyx_v_face->location[__pyx_t_21]) = ((__pyx_v_face->location[__pyx_t_21]) + (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_46 * __pyx_v_shift.strides[0]) ))));
        }

        /* "discretize/tree_ext.pyx":342
 *                         edge.location[i] += shift[i]
 * 
 *                 for itF in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *                     face = itF.second
 *                     for i in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":347
 *                         face.location[i] += shift[i]
 * 
 *                 for itF in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *                     face = itF.second
 *                     for i in range(dim):
 */
      __pyx_t_43 = &__pyx_v_self->tree->faces_y;
      __pyx_t_42 = __pyx_t_43->begin();
      for (;;) {
        if (!(__pyx_t_42 != __pyx_t_43->end())) break;
        __pyx_t_44 = *__pyx_t_42;
        ++__pyx_t_42;
        __pyx_v_itF = __pyx_t_44;

        /* "discretize/tree_ext.pyx":348
 * 
 *                 for itF in self.tree.faces_y:
 *                     face = itF.second             # <<<<<<<<<<<<<<
 *                     for i in range(dim):
 *                         face.location[i] += shift[i]
 */
        __pyx_t_45 = __pyx_v_itF.second;
        __pyx_v_face = __pyx_t_45;

        /* "discretize/tree_ext.pyx":349
 *                 for itF in self.tree.faces_y:
 *                     face = itF.second
 *                     for i in range(dim):             # <<<<<<<<<<<<<<
 *                         face.location[i] += shift[i]
 * 
 */
        __pyx_t_33 = __pyx_v_dim;
        for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_33; __pyx_t_20+=1) {
          __pyx_v_i = __pyx_t_20;

          /* "discretize/tree_ext.pyx":350
 *                     face = itF.second
 *                     for i in range(dim):
 *                         face.location[i] += shift[i]             # <<<<<<<<<<<<<<
 * 
 *                 for itF in self.tree.faces_z:
 */
          __pyx_t_21 = __pyx_v_i;
          __pyx_t_47 = __pyx_v_i;
          __pyx_t_11 = -1;
          if (__pyx_t_47 < 0) {
            __pyx_t_47 += __pyx_v_shift.shape[0];
            if (unlikely(__pyx_t_47 < 0)) __pyx_t_11 = 0;
          } else if (unlikely(__pyx_t_47 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
          if (unlikely(__pyx_t_11 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_11);
            __PYX_ERR(0, 350, __pyx_L1_error)
          }
          (__pyx_v_face->location[__pyx_t_21]) = ((__pyx_v_face->location[__pyx_t_21]) + (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_47 * __pyx_v_shift.strides[0]) ))));
        }

        /* "discretize/tree_ext.pyx":347
 *                         face.location[i] += shift[i]
 * 
 *                 for itF in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *                     face = itF.second
 *                     for i in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":352
 *                         face.location[i] += shift[i]
 * 
 *                 for itF in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *                     face = itF.second
 *                     for i in range(dim):
 */
      __pyx_t_43 = &__pyx_v_self->tree->faces_z;
      __pyx_t_42 = __pyx_t_43->begin();
      for (;;) {
        if (!(__pyx_t_42 != __pyx_t_43->end())) break;
        __pyx_t_44 = *__pyx_t_42;
        ++__pyx_t_42;
        __pyx_v_itF = __pyx_t_44;

        /* "discretize/tree_ext.pyx":353
 * 
 *                 for itF in self.tree.faces_z:
 *                     face = itF.second             # <<<<<<<<<<<<<<
 *                     for i in range(dim):
 *                         face.location[i] += shift[i]
 */
        __pyx_t_45 = __pyx_v_itF.second;
        __pyx_v_face = __pyx_t_45;

        /* "discretize/tree_ext.pyx":354
 *                 for itF in self.tree.faces_z:
 *                     face = itF.second
 *                     for i in range(dim):             # <<<<<<<<<<<<<<
 *                         face.location[i] += shift[i]
 *             #clear out all cached grids
 */
        __pyx_t_33 = __pyx_v_dim;
        for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_33; __pyx_t_20+=1) {
          __pyx_v_i = __pyx_t_20;

          /* "discretize/tree_ext.pyx":355
 *                     face = itF.second
 *                     for i in range(dim):
 *                         face.location[i] += shift[i]             # <<<<<<<<<<<<<<
 *             #clear out all cached grids
 *             self._gridCC = None
 */
          __pyx_t_21 = __pyx_v_i;
          __pyx_t_48 = __pyx_v_i;
          __pyx_t_11 = -1;
          if (__pyx_t_48 < 0) {
            __pyx_t_48 += __pyx_v_shift.shape[0];
            if (unlikely(__pyx_t_48 < 0)) __pyx_t_11 = 0;
          } else if (unlikely(__pyx_t_48 >= __pyx_v_shift.shape[0])) __pyx_t_11 = 0;
          if (unlikely(__pyx_t_11 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_11);
            __PYX_ERR(0, 355, __pyx_L1_error)
          }
          (__pyx_v_face->location[__pyx_t_21]) = ((__pyx_v_face->location[__pyx_t_21]) + (*((double *) ( /* dim=0 */ (__pyx_v_shift.data + __pyx_t_48 * __pyx_v_shift.strides[0]) ))));
        }

        /* "discretize/tree_ext.pyx":352
 *                         face.location[i] += shift[i]
 * 
 *                 for itF in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *                     face = itF.second
 *                     for i in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":336
 *                     edge.location[i] += shift[i]
 * 
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 for itE in self.tree.edges_z:
 *                     edge = itE.second
 */
    }

    /* "discretize/tree_ext.pyx":357
 *                         face.location[i] += shift[i]
 *             #clear out all cached grids
 *             self._gridCC = None             # <<<<<<<<<<<<<<
 *             self._gridN = None
 *             self._gridhN = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridCC);
    __Pyx_DECREF(__pyx_v_self->_gridCC);
    __pyx_v_self->_gridCC = Py_None;

    /* "discretize/tree_ext.pyx":358
 *             #clear out all cached grids
 *             self._gridCC = None
 *             self._gridN = None             # <<<<<<<<<<<<<<
 *             self._gridhN = None
 *             self._gridEx = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridN);
    __Pyx_DECREF(__pyx_v_self->_gridN);
    __pyx_v_self->_gridN = Py_None;

    /* "discretize/tree_ext.pyx":359
 *             self._gridCC = None
 *             self._gridN = None
 *             self._gridhN = None             # <<<<<<<<<<<<<<
 *             self._gridEx = None
 *             self._gridhEx = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridhN);
    __Pyx_DECREF(__pyx_v_self->_gridhN);
    __pyx_v_self->_gridhN = Py_None;

    /* "discretize/tree_ext.pyx":360
 *             self._gridN = None
 *             self._gridhN = None
 *             self._gridEx = None             # <<<<<<<<<<<<<<
 *             self._gridhEx = None
 *             self._gridEy = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridEx);
    __Pyx_DECREF(__pyx_v_self->_gridEx);
    __pyx_v_self->_gridEx = Py_None;

    /* "discretize/tree_ext.pyx":361
 *             self._gridhN = None
 *             self._gridEx = None
 *             self._gridhEx = None             # <<<<<<<<<<<<<<
 *             self._gridEy = None
 *             self._gridhEy = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridhEx);
    __Pyx_DECREF(__pyx_v_self->_gridhEx);
    __pyx_v_self->_gridhEx = Py_None;

    /* "discretize/tree_ext.pyx":362
 *             self._gridEx = None
 *             self._gridhEx = None
 *             self._gridEy = None             # <<<<<<<<<<<<<<
 *             self._gridhEy = None
 *             self._gridEz = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridEy);
    __Pyx_DECREF(__pyx_v_self->_gridEy);
    __pyx_v_self->_gridEy = Py_None;

    /* "discretize/tree_ext.pyx":363
 *             self._gridhEx = None
 *             self._gridEy = None
 *             self._gridhEy = None             # <<<<<<<<<<<<<<
 *             self._gridEz = None
 *             self._gridhEz = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridhEy);
    __Pyx_DECREF(__pyx_v_self->_gridhEy);
    __pyx_v_self->_gridhEy = Py_None;

    /* "discretize/tree_ext.pyx":364
 *             self._gridEy = None
 *             self._gridhEy = None
 *             self._gridEz = None             # <<<<<<<<<<<<<<
 *             self._gridhEz = None
 *             self._gridFx = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridEz);
    __Pyx_DECREF(__pyx_v_self->_gridEz);
    __pyx_v_self->_gridEz = Py_None;

    /* "discretize/tree_ext.pyx":365
 *             self._gridhEy = None
 *             self._gridEz = None
 *             self._gridhEz = None             # <<<<<<<<<<<<<<
 *             self._gridFx = None
 *             self._gridhFx = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridhEz);
    __Pyx_DECREF(__pyx_v_self->_gridhEz);
    __pyx_v_self->_gridhEz = Py_None;

    /* "discretize/tree_ext.pyx":366
 *             self._gridEz = None
 *             self._gridhEz = None
 *             self._gridFx = None             # <<<<<<<<<<<<<<
 *             self._gridhFx = None
 *             self._gridFy = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridFx);
    __Pyx_DECREF(__pyx_v_self->_gridFx);
    __pyx_v_self->_gridFx = Py_None;

    /* "discretize/tree_ext.pyx":367
 *             self._gridhEz = None
 *             self._gridFx = None
 *             self._gridhFx = None             # <<<<<<<<<<<<<<
 *             self._gridFy = None
 *             self._gridhFy = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridhFx);
    __Pyx_DECREF(__pyx_v_self->_gridhFx);
    __pyx_v_self->_gridhFx = Py_None;

    /* "discretize/tree_ext.pyx":368
 *             self._gridFx = None
 *             self._gridhFx = None
 *             self._gridFy = None             # <<<<<<<<<<<<<<
 *             self._gridhFy = None
 *             self._gridFz = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridFy);
    __Pyx_DECREF(__pyx_v_self->_gridFy);
    __pyx_v_self->_gridFy = Py_None;

    /* "discretize/tree_ext.pyx":369
 *             self._gridhFx = None
 *             self._gridFy = None
 *             self._gridhFy = None             # <<<<<<<<<<<<<<
 *             self._gridFz = None
 *             self._gridhFz = None
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridhFy);
    __Pyx_DECREF(__pyx_v_self->_gridhFy);
    __pyx_v_self->_gridhFy = Py_None;

    /* "discretize/tree_ext.pyx":370
 *             self._gridFy = None
 *             self._gridhFy = None
 *             self._gridFz = None             # <<<<<<<<<<<<<<
 *             self._gridhFz = None
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridFz);
    __Pyx_DECREF(__pyx_v_self->_gridFz);
    __pyx_v_self->_gridFz = Py_None;

    /* "discretize/tree_ext.pyx":371
 *             self._gridhFy = None
 *             self._gridFz = None
 *             self._gridhFz = None             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_gridhFz);
    __Pyx_DECREF(__pyx_v_self->_gridhFz);
    __pyx_v_self->_gridhFz = Py_None;

    /* "discretize/tree_ext.pyx":301
 *         cdef Edge *edge
 *         cdef Face *face
 *         if self.tree.n_dim > 0: # Will only happen if __init__ has been called             # <<<<<<<<<<<<<<
 *             shift = np.empty(dim, dtype=np.float64)
 * 
 */
  }

  /* "discretize/tree_ext.pyx":287
 * 
 *     @x0.setter
 *     def x0(self, x0):             # <<<<<<<<<<<<<<
 *         # On object creation, x0 attempts to be set to properties.utils.Sentinel, so guard against this
 *         # I believe this happens in the BaseMesh class
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.x0.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_shift, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":374
 * 
 *     @property
 *     def fill(self):             # <<<<<<<<<<<<<<
 *         """
 *         How filled is the mesh compared to a TensorMesh?
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4fill_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4fill_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4fill___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4fill___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  int_t __pyx_v_nxc;
  int_t __pyx_v_nyc;
  int_t __pyx_v_nzc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":381
 *         #Tensor mesh cells:
 *         cdef int_t nxc, nyc, nzc;
 *         nxc = (self._xs.shape[0]-1)//2             # <<<<<<<<<<<<<<
 *         nyc = (self._ys.shape[0]-1)//2
 *         nzc = (self._zs.shape[0]-1)//2 if self._dim==3 else 1
 */
  if (unlikely(!__pyx_v_self->_xs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 381, __pyx_L1_error)}
  __pyx_v_nxc = __Pyx_div_Py_ssize_t(((__pyx_v_self->_xs.shape[0]) - 1), 2);

  /* "discretize/tree_ext.pyx":382
 *         cdef int_t nxc, nyc, nzc;
 *         nxc = (self._xs.shape[0]-1)//2
 *         nyc = (self._ys.shape[0]-1)//2             # <<<<<<<<<<<<<<
 *         nzc = (self._zs.shape[0]-1)//2 if self._dim==3 else 1
 *         return float(self.nC)/(nxc * nyc * nzc)
 */
  if (unlikely(!__pyx_v_self->_ys.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 382, __pyx_L1_error)}
  __pyx_v_nyc = __Pyx_div_Py_ssize_t(((__pyx_v_self->_ys.shape[0]) - 1), 2);

  /* "discretize/tree_ext.pyx":383
 *         nxc = (self._xs.shape[0]-1)//2
 *         nyc = (self._ys.shape[0]-1)//2
 *         nzc = (self._zs.shape[0]-1)//2 if self._dim==3 else 1             # <<<<<<<<<<<<<<
 *         return float(self.nC)/(nxc * nyc * nzc)
 * 
 */
  if (((__pyx_v_self->_dim == 3) != 0)) {
    if (unlikely(!__pyx_v_self->_zs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 383, __pyx_L1_error)}
    __pyx_t_1 = __Pyx_div_Py_ssize_t(((__pyx_v_self->_zs.shape[0]) - 1), 2);
  } else {
    __pyx_t_1 = 1;
  }
  __pyx_v_nzc = __pyx_t_1;

  /* "discretize/tree_ext.pyx":384
 *         nyc = (self._ys.shape[0]-1)//2
 *         nzc = (self._zs.shape[0]-1)//2 if self._dim==3 else 1
 *         return float(self.nC)/(nxc * nyc * nzc)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_AsDouble(__pyx_t_2); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((__pyx_v_nxc * __pyx_v_nyc) * __pyx_v_nzc);
  if (unlikely(__pyx_t_4 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 384, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble((__pyx_t_3 / __pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":374
 * 
 *     @property
 *     def fill(self):             # <<<<<<<<<<<<<<
 *         """
 *         How filled is the mesh compared to a TensorMesh?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.fill.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":387
 * 
 *     @property
 *     def maxLevel(self):             # <<<<<<<<<<<<<<
 *         """
 *         The maximum level used, which may be
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8maxLevel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8maxLevel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8maxLevel___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8maxLevel___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  int __pyx_v_level;
  Cell *__pyx_v_cell;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<Cell *> ::iterator __pyx_t_1;
  std::vector<Cell *>  *__pyx_t_2;
  Cell *__pyx_t_3;
  int_t __pyx_t_4;
  int __pyx_t_5;
  int_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":392
 *         less than `levels`.
 *         """
 *         cdef int level = 0             # <<<<<<<<<<<<<<
 *         for cell in self.tree.cells:
 *             level = max(level, cell.level)
 */
  __pyx_v_level = 0;

  /* "discretize/tree_ext.pyx":393
 *         """
 *         cdef int level = 0
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             level = max(level, cell.level)
 *         return level
 */
  __pyx_t_2 = &__pyx_v_self->tree->cells;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_cell = __pyx_t_3;

    /* "discretize/tree_ext.pyx":394
 *         cdef int level = 0
 *         for cell in self.tree.cells:
 *             level = max(level, cell.level)             # <<<<<<<<<<<<<<
 *         return level
 * 
 */
    __pyx_t_4 = __pyx_v_cell->level;
    __pyx_t_5 = __pyx_v_level;
    if (((__pyx_t_4 > __pyx_t_5) != 0)) {
      __pyx_t_6 = __pyx_t_4;
    } else {
      __pyx_t_6 = __pyx_t_5;
    }
    __pyx_v_level = __pyx_t_6;

    /* "discretize/tree_ext.pyx":393
 *         """
 *         cdef int level = 0
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             level = max(level, cell.level)
 *         return level
 */
  }

  /* "discretize/tree_ext.pyx":395
 *         for cell in self.tree.cells:
 *             level = max(level, cell.level)
 *         return level             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_level); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":387
 * 
 *     @property
 *     def maxLevel(self):             # <<<<<<<<<<<<<<
 *         """
 *         The maximum level used, which may be
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.maxLevel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":398
 * 
 *     @property
 *     def nC(self):             # <<<<<<<<<<<<<<
 *         return self.tree.cells.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":399
 *     @property
 *     def nC(self):
 *         return self.tree.cells.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->cells.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":398
 * 
 *     @property
 *     def nC(self):             # <<<<<<<<<<<<<<
 *         return self.tree.cells.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":402
 * 
 *     @property
 *     def nN(self):             # <<<<<<<<<<<<<<
 *         return self.ntN - self.nhN
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nN_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nN_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nN___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":403
 *     @property
 *     def nN(self):
 *         return self.ntN - self.nhN             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":402
 * 
 *     @property
 *     def nN(self):             # <<<<<<<<<<<<<<
 *         return self.ntN - self.nhN
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nN.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":406
 * 
 *     @property
 *     def ntN(self):             # <<<<<<<<<<<<<<
 *         return self.tree.nodes.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntN_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntN_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntN___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":407
 *     @property
 *     def ntN(self):
 *         return self.tree.nodes.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->nodes.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":406
 * 
 *     @property
 *     def ntN(self):             # <<<<<<<<<<<<<<
 *         return self.tree.nodes.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntN.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":410
 * 
 *     @property
 *     def nhN(self):             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_nodes.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhN_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhN_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhN___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":411
 *     @property
 *     def nhN(self):
 *         return self.tree.hanging_nodes.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->hanging_nodes.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":410
 * 
 *     @property
 *     def nhN(self):             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_nodes.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhN.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":414
 * 
 *     @property
 *     def nE(self):             # <<<<<<<<<<<<<<
 *         return self.nEx + self.nEy + self.nEz
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nE___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nE___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":415
 *     @property
 *     def nE(self):
 *         return self.nEx + self.nEy + self.nEz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":414
 * 
 *     @property
 *     def nE(self):             # <<<<<<<<<<<<<<
 *         return self.nEx + self.nEy + self.nEz
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":418
 * 
 *     @property
 *     def nhE(self):             # <<<<<<<<<<<<<<
 *         return self.nhEx + self.nhEy + self.nhEz
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhE___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhE___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":419
 *     @property
 *     def nhE(self):
 *         return self.nhEx + self.nhEy + self.nhEz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":418
 * 
 *     @property
 *     def nhE(self):             # <<<<<<<<<<<<<<
 *         return self.nhEx + self.nhEy + self.nhEz
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":422
 * 
 *     @property
 *     def ntE(self):             # <<<<<<<<<<<<<<
 *         return self.nE + self.nhE
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntE_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntE_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntE___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntE___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":423
 *     @property
 *     def ntE(self):
 *         return self.nE + self.nhE             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":422
 * 
 *     @property
 *     def ntE(self):             # <<<<<<<<<<<<<<
 *         return self.nE + self.nhE
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntE.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":426
 * 
 *     @property
 *     def nEx(self):             # <<<<<<<<<<<<<<
 *         return self.ntEx - self.nhEx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":427
 *     @property
 *     def nEx(self):
 *         return self.ntEx - self.nhEx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":426
 * 
 *     @property
 *     def nEx(self):             # <<<<<<<<<<<<<<
 *         return self.ntEx - self.nhEx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nEx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":430
 * 
 *     @property
 *     def nEy(self):             # <<<<<<<<<<<<<<
 *         return self.ntEy - self.nhEy
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":431
 *     @property
 *     def nEy(self):
 *         return self.ntEy - self.nhEy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":430
 * 
 *     @property
 *     def nEy(self):             # <<<<<<<<<<<<<<
 *         return self.ntEy - self.nhEy
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nEy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":434
 * 
 *     @property
 *     def nEz(self):             # <<<<<<<<<<<<<<
 *         return self.ntEz - self.nhEz
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":435
 *     @property
 *     def nEz(self):
 *         return self.ntEz - self.nhEz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":434
 * 
 *     @property
 *     def nEz(self):             # <<<<<<<<<<<<<<
 *         return self.ntEz - self.nhEz
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nEz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":438
 * 
 *     @property
 *     def ntEx(self):             # <<<<<<<<<<<<<<
 *         return self.tree.edges_x.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":439
 *     @property
 *     def ntEx(self):
 *         return self.tree.edges_x.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->edges_x.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":438
 * 
 *     @property
 *     def ntEx(self):             # <<<<<<<<<<<<<<
 *         return self.tree.edges_x.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntEx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":442
 * 
 *     @property
 *     def ntEy(self):             # <<<<<<<<<<<<<<
 *         return self.tree.edges_y.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":443
 *     @property
 *     def ntEy(self):
 *         return self.tree.edges_y.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->edges_y.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":442
 * 
 *     @property
 *     def ntEy(self):             # <<<<<<<<<<<<<<
 *         return self.tree.edges_y.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntEy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":446
 * 
 *     @property
 *     def ntEz(self):             # <<<<<<<<<<<<<<
 *         return self.tree.edges_z.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":447
 *     @property
 *     def ntEz(self):
 *         return self.tree.edges_z.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->edges_z.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":446
 * 
 *     @property
 *     def ntEz(self):             # <<<<<<<<<<<<<<
 *         return self.tree.edges_z.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntEz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":450
 * 
 *     @property
 *     def nhEx(self):             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_edges_x.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":451
 *     @property
 *     def nhEx(self):
 *         return self.tree.hanging_edges_x.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->hanging_edges_x.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":450
 * 
 *     @property
 *     def nhEx(self):             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_edges_x.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhEx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":454
 * 
 *     @property
 *     def nhEy(self):             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_edges_y.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":455
 *     @property
 *     def nhEy(self):
 *         return self.tree.hanging_edges_y.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->hanging_edges_y.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":454
 * 
 *     @property
 *     def nhEy(self):             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_edges_y.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhEy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":458
 * 
 *     @property
 *     def nhEz(self):             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_edges_z.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":459
 *     @property
 *     def nhEz(self):
 *         return self.tree.hanging_edges_z.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->hanging_edges_z.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":458
 * 
 *     @property
 *     def nhEz(self):             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_edges_z.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhEz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":462
 * 
 *     @property
 *     def nF(self):             # <<<<<<<<<<<<<<
 *         return self.nFx + self.nFy + self.nFz
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nF_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nF_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nF___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_2nF___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":463
 *     @property
 *     def nF(self):
 *         return self.nFx + self.nFy + self.nFz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":462
 * 
 *     @property
 *     def nF(self):             # <<<<<<<<<<<<<<
 *         return self.nFx + self.nFy + self.nFz
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nF.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":466
 * 
 *     @property
 *     def nhF(self):             # <<<<<<<<<<<<<<
 *         return self.nhFx + self.nhFy + self.nhFz
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhF_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhF_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhF___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nhF___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":467
 *     @property
 *     def nhF(self):
 *         return self.nhFx + self.nhFy + self.nhFz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":466
 * 
 *     @property
 *     def nhF(self):             # <<<<<<<<<<<<<<
 *         return self.nhFx + self.nhFy + self.nhFz
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhF.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":470
 * 
 *     @property
 *     def ntF(self):             # <<<<<<<<<<<<<<
 *         return self.nF + self.nhF
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntF_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntF_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntF___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3ntF___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":471
 *     @property
 *     def ntF(self):
 *         return self.nF + self.nhF             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nF); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":470
 * 
 *     @property
 *     def ntF(self):             # <<<<<<<<<<<<<<
 *         return self.nF + self.nhF
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntF.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":474
 * 
 *     @property
 *     def nFx(self):             # <<<<<<<<<<<<<<
 *         return self.ntFx - self.nhFx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":475
 *     @property
 *     def nFx(self):
 *         return self.ntFx - self.nhFx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":474
 * 
 *     @property
 *     def nFx(self):             # <<<<<<<<<<<<<<
 *         return self.ntFx - self.nhFx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nFx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":478
 * 
 *     @property
 *     def nFy(self):             # <<<<<<<<<<<<<<
 *         return self.ntFy - self.nhFy
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":479
 *     @property
 *     def nFy(self):
 *         return self.ntFy - self.nhFy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":478
 * 
 *     @property
 *     def nFy(self):             # <<<<<<<<<<<<<<
 *         return self.ntFy - self.nhFy
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nFy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":482
 * 
 *     @property
 *     def nFz(self):             # <<<<<<<<<<<<<<
 *         return self.ntFz - self.nhFz
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3nFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":483
 *     @property
 *     def nFz(self):
 *         return self.ntFz - self.nhFz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":482
 * 
 *     @property
 *     def nFz(self):             # <<<<<<<<<<<<<<
 *         return self.ntFz - self.nhFz
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nFz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":486
 * 
 *     @property
 *     def ntFx(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.ntEy
 *         return self.tree.faces_x.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":487
 *     @property
 *     def ntFx(self):
 *         if(self._dim == 2): return self.ntEy             # <<<<<<<<<<<<<<
 *         return self.tree.faces_x.size()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":488
 *     def ntFx(self):
 *         if(self._dim == 2): return self.ntEy
 *         return self.tree.faces_x.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->faces_x.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":486
 * 
 *     @property
 *     def ntFx(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.ntEy
 *         return self.tree.faces_x.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntFx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":491
 * 
 *     @property
 *     def ntFy(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.ntEx
 *         return self.tree.faces_y.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":492
 *     @property
 *     def ntFy(self):
 *         if(self._dim == 2): return self.ntEx             # <<<<<<<<<<<<<<
 *         return self.tree.faces_y.size()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":493
 *     def ntFy(self):
 *         if(self._dim == 2): return self.ntEx
 *         return self.tree.faces_y.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->faces_y.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":491
 * 
 *     @property
 *     def ntFy(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.ntEx
 *         return self.tree.faces_y.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntFy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":496
 * 
 *     @property
 *     def ntFz(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return 0
 *         return self.tree.faces_z.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4ntFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":497
 *     @property
 *     def ntFz(self):
 *         if(self._dim == 2): return 0             # <<<<<<<<<<<<<<
 *         return self.tree.faces_z.size()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":498
 *     def ntFz(self):
 *         if(self._dim == 2): return 0
 *         return self.tree.faces_z.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->faces_z.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":496
 * 
 *     @property
 *     def ntFz(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return 0
 *         return self.tree.faces_z.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.ntFz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":501
 * 
 *     @property
 *     def nhFx(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.nhEy
 *         return self.tree.hanging_faces_x.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":502
 *     @property
 *     def nhFx(self):
 *         if(self._dim == 2): return self.nhEy             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_faces_x.size()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":503
 *     def nhFx(self):
 *         if(self._dim == 2): return self.nhEy
 *         return self.tree.hanging_faces_x.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->hanging_faces_x.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":501
 * 
 *     @property
 *     def nhFx(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.nhEy
 *         return self.tree.hanging_faces_x.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhFx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":506
 * 
 *     @property
 *     def nhFy(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.nhEx
 *         return self.tree.hanging_faces_y.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":507
 *     @property
 *     def nhFy(self):
 *         if(self._dim == 2): return self.nhEx             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_faces_y.size()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":508
 *     def nhFy(self):
 *         if(self._dim == 2): return self.nhEx
 *         return self.tree.hanging_faces_y.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->hanging_faces_y.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":506
 * 
 *     @property
 *     def nhFy(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.nhEx
 *         return self.tree.hanging_faces_y.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhFy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":511
 * 
 *     @property
 *     def nhFz(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return 0
 *         return self.tree.hanging_faces_z.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4nhFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":512
 *     @property
 *     def nhFz(self):
 *         if(self._dim == 2): return 0             # <<<<<<<<<<<<<<
 *         return self.tree.hanging_faces_z.size()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":513
 *     def nhFz(self):
 *         if(self._dim == 2): return 0
 *         return self.tree.hanging_faces_z.size()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->tree->hanging_faces_z.size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":511
 * 
 *     @property
 *     def nhFz(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return 0
 *         return self.tree.hanging_faces_z.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nhFz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":516
 * 
 *     @property
 *     def gridCC(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an M by N numpy array with the center locations of all cells
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridCC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridCC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridCC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridCC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridCC = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  Cell *__pyx_v_cell;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":524
 *         cdef np.float64_t[:, :] gridCC
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridCC is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridCC = np.empty((self.nC, self._dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridCC == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":525
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridCC is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridCC = np.empty((self.nC, self._dim), dtype=np.float64)
 *             gridCC = self._gridCC
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":526
 *         if self._gridCC is None:
 *             dim = self._dim
 *             self._gridCC = np.empty((self.nC, self._dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridCC = self._gridCC
 *             for cell in self.tree.cells:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_int_t(__pyx_v_self->_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridCC);
    __Pyx_DECREF(__pyx_v_self->_gridCC);
    __pyx_v_self->_gridCC = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":527
 *             dim = self._dim
 *             self._gridCC = np.empty((self.nC, self._dim), dtype=np.float64)
 *             gridCC = self._gridCC             # <<<<<<<<<<<<<<
 *             for cell in self.tree.cells:
 *                 ind = cell.index
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridCC);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 527, __pyx_L1_error)
    __pyx_v_gridCC = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":528
 *             self._gridCC = np.empty((self.nC, self._dim), dtype=np.float64)
 *             gridCC = self._gridCC
 *             for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *                 ind = cell.index
 *                 for ii in range(dim):
 */
    __pyx_t_11 = &__pyx_v_self->tree->cells;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_cell = __pyx_t_12;

      /* "discretize/tree_ext.pyx":529
 *             gridCC = self._gridCC
 *             for cell in self.tree.cells:
 *                 ind = cell.index             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     gridCC[ind, ii] = cell.location[ii]
 */
      __pyx_t_3 = __pyx_v_cell->index;
      __pyx_v_ind = __pyx_t_3;

      /* "discretize/tree_ext.pyx":530
 *             for cell in self.tree.cells:
 *                 ind = cell.index
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     gridCC[ind, ii] = cell.location[ii]
 *         return self._gridCC
 */
      __pyx_t_13 = __pyx_v_dim;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_ii = __pyx_t_14;

        /* "discretize/tree_ext.pyx":531
 *                 ind = cell.index
 *                 for ii in range(dim):
 *                     gridCC[ind, ii] = cell.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridCC
 * 
 */
        __pyx_t_15 = __pyx_v_ind;
        __pyx_t_16 = __pyx_v_ii;
        __pyx_t_17 = -1;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_gridCC.shape[0];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_17 = 0;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_gridCC.shape[0])) __pyx_t_17 = 0;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_gridCC.shape[1];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 1;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_gridCC.shape[1])) __pyx_t_17 = 1;
        if (unlikely(__pyx_t_17 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_17);
          __PYX_ERR(0, 531, __pyx_L1_error)
        }
        *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridCC.data + __pyx_t_15 * __pyx_v_gridCC.strides[0]) ) + __pyx_t_16 * __pyx_v_gridCC.strides[1]) )) = (__pyx_v_cell->location[__pyx_v_ii]);
      }

      /* "discretize/tree_ext.pyx":528
 *             self._gridCC = np.empty((self.nC, self._dim), dtype=np.float64)
 *             gridCC = self._gridCC
 *             for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *                 ind = cell.index
 *                 for ii in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":524
 *         cdef np.float64_t[:, :] gridCC
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridCC is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridCC = np.empty((self.nC, self._dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":532
 *                 for ii in range(dim):
 *                     gridCC[ind, ii] = cell.location[ii]
 *         return self._gridCC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridCC);
  __pyx_r = __pyx_v_self->_gridCC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":516
 * 
 *     @property
 *     def gridCC(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an M by N numpy array with the center locations of all cells
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridCC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridCC, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":535
 * 
 *     @property
 *     def gridN(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an M by N numpy array with the widths of all cells in order.
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_5gridN_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_5gridN_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_5gridN___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_5gridN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridN = { 0, 0, { 0 }, { 0 }, { 0 } };
  Node *__pyx_v_node;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  std::pair<int_t,Node *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Node *> ::iterator __pyx_t_10;
  node_map_t *__pyx_t_11;
  std::pair<int_t,Node *>  __pyx_t_12;
  Node *__pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":543
 *         cdef Node *node
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridN is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridN = np.empty((self.nN, dim) ,dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridN == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":544
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridN is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridN = np.empty((self.nN, dim) ,dtype=np.float64)
 *             gridN = self._gridN
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":545
 *         if self._gridN is None:
 *             dim = self._dim
 *             self._gridN = np.empty((self.nN, dim) ,dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridN = self._gridN
 *             for it in self.tree.nodes:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridN);
    __Pyx_DECREF(__pyx_v_self->_gridN);
    __pyx_v_self->_gridN = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":546
 *             dim = self._dim
 *             self._gridN = np.empty((self.nN, dim) ,dtype=np.float64)
 *             gridN = self._gridN             # <<<<<<<<<<<<<<
 *             for it in self.tree.nodes:
 *                 node = it.second
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridN);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 546, __pyx_L1_error)
    __pyx_v_gridN = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":547
 *             self._gridN = np.empty((self.nN, dim) ,dtype=np.float64)
 *             gridN = self._gridN
 *             for it in self.tree.nodes:             # <<<<<<<<<<<<<<
 *                 node = it.second
 *                 if not node.hanging:
 */
    __pyx_t_11 = &__pyx_v_self->tree->nodes;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":548
 *             gridN = self._gridN
 *             for it in self.tree.nodes:
 *                 node = it.second             # <<<<<<<<<<<<<<
 *                 if not node.hanging:
 *                     ind = node.index
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_node = __pyx_t_13;

      /* "discretize/tree_ext.pyx":549
 *             for it in self.tree.nodes:
 *                 node = it.second
 *                 if not node.hanging:             # <<<<<<<<<<<<<<
 *                     ind = node.index
 *                     for ii in range(dim):
 */
      __pyx_t_2 = ((!(__pyx_v_node->hanging != 0)) != 0);
      if (__pyx_t_2) {

        /* "discretize/tree_ext.pyx":550
 *                 node = it.second
 *                 if not node.hanging:
 *                     ind = node.index             # <<<<<<<<<<<<<<
 *                     for ii in range(dim):
 *                         gridN[ind, ii] = node.location[ii]
 */
        __pyx_t_3 = __pyx_v_node->index;
        __pyx_v_ind = __pyx_t_3;

        /* "discretize/tree_ext.pyx":551
 *                 if not node.hanging:
 *                     ind = node.index
 *                     for ii in range(dim):             # <<<<<<<<<<<<<<
 *                         gridN[ind, ii] = node.location[ii]
 *         return self._gridN
 */
        __pyx_t_14 = __pyx_v_dim;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_ii = __pyx_t_15;

          /* "discretize/tree_ext.pyx":552
 *                     ind = node.index
 *                     for ii in range(dim):
 *                         gridN[ind, ii] = node.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridN
 * 
 */
          __pyx_t_16 = __pyx_v_ind;
          __pyx_t_17 = __pyx_v_ii;
          __pyx_t_18 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_v_gridN.shape[0];
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_18 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_v_gridN.shape[0])) __pyx_t_18 = 0;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_gridN.shape[1];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_18 = 1;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_gridN.shape[1])) __pyx_t_18 = 1;
          if (unlikely(__pyx_t_18 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_18);
            __PYX_ERR(0, 552, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridN.data + __pyx_t_16 * __pyx_v_gridN.strides[0]) ) + __pyx_t_17 * __pyx_v_gridN.strides[1]) )) = (__pyx_v_node->location[__pyx_v_ii]);
        }

        /* "discretize/tree_ext.pyx":549
 *             for it in self.tree.nodes:
 *                 node = it.second
 *                 if not node.hanging:             # <<<<<<<<<<<<<<
 *                     ind = node.index
 *                     for ii in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":547
 *             self._gridN = np.empty((self.nN, dim) ,dtype=np.float64)
 *             gridN = self._gridN
 *             for it in self.tree.nodes:             # <<<<<<<<<<<<<<
 *                 node = it.second
 *                 if not node.hanging:
 */
    }

    /* "discretize/tree_ext.pyx":543
 *         cdef Node *node
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridN is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridN = np.empty((self.nN, dim) ,dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":553
 *                     for ii in range(dim):
 *                         gridN[ind, ii] = node.location[ii]
 *         return self._gridN             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridN);
  __pyx_r = __pyx_v_self->_gridN;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":535
 * 
 *     @property
 *     def gridN(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an M by N numpy array with the widths of all cells in order.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridN.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridN, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":556
 * 
 *     @property
 *     def gridhN(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridN
 *         cdef Node *node
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridhN_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridhN_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridhN___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridhN___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  Node *__pyx_v_node;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  PyObject *__pyx_v_gridhN = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  std::vector<Node *> ::iterator __pyx_t_9;
  std::vector<Node *>  *__pyx_t_10;
  Node *__pyx_t_11;
  __pyx_t_5numpy_int64_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":560
 *         cdef Node *node
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhN is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhN = np.empty((self.nhN, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridhN == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":561
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhN is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridhN = np.empty((self.nhN, dim), dtype=np.float64)
 *             gridhN = self._gridhN
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":562
 *         if self._gridhN is None:
 *             dim = self._dim
 *             self._gridhN = np.empty((self.nhN, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridhN = self._gridhN
 *             for node in self.tree.hanging_nodes:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridhN);
    __Pyx_DECREF(__pyx_v_self->_gridhN);
    __pyx_v_self->_gridhN = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":563
 *             dim = self._dim
 *             self._gridhN = np.empty((self.nhN, dim), dtype=np.float64)
 *             gridhN = self._gridhN             # <<<<<<<<<<<<<<
 *             for node in self.tree.hanging_nodes:
 *                 ind = node.index-self.nN
 */
    __pyx_t_8 = __pyx_v_self->_gridhN;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_v_gridhN = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":564
 *             self._gridhN = np.empty((self.nhN, dim), dtype=np.float64)
 *             gridhN = self._gridhN
 *             for node in self.tree.hanging_nodes:             # <<<<<<<<<<<<<<
 *                 ind = node.index-self.nN
 *                 for ii in range(dim):
 */
    __pyx_t_10 = &__pyx_v_self->tree->hanging_nodes;
    __pyx_t_9 = __pyx_t_10->begin();
    for (;;) {
      if (!(__pyx_t_9 != __pyx_t_10->end())) break;
      __pyx_t_11 = *__pyx_t_9;
      ++__pyx_t_9;
      __pyx_v_node = __pyx_t_11;

      /* "discretize/tree_ext.pyx":565
 *             gridhN = self._gridhN
 *             for node in self.tree.hanging_nodes:
 *                 ind = node.index-self.nN             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     gridhN[ind, ii] = node.location[ii]
 */
      __pyx_t_8 = __Pyx_PyInt_From_int_t(__pyx_v_node->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_npy_int64(__pyx_t_6); if (unlikely((__pyx_t_12 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ind = __pyx_t_12;

      /* "discretize/tree_ext.pyx":566
 *             for node in self.tree.hanging_nodes:
 *                 ind = node.index-self.nN
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     gridhN[ind, ii] = node.location[ii]
 *         return self._gridhN
 */
      __pyx_t_12 = __pyx_v_dim;
      for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_ii = __pyx_t_13;

        /* "discretize/tree_ext.pyx":567
 *                 ind = node.index-self.nN
 *                 for ii in range(dim):
 *                     gridhN[ind, ii] = node.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridhN
 * 
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_node->location[__pyx_v_ii])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_From_npy_int64(__pyx_v_ind); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyInt_From_npy_int64(__pyx_v_ii); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_gridhN, __pyx_t_5, __pyx_t_6) < 0)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "discretize/tree_ext.pyx":564
 *             self._gridhN = np.empty((self.nhN, dim), dtype=np.float64)
 *             gridhN = self._gridhN
 *             for node in self.tree.hanging_nodes:             # <<<<<<<<<<<<<<
 *                 ind = node.index-self.nN
 *                 for ii in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":560
 *         cdef Node *node
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhN is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhN = np.empty((self.nhN, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":568
 *                 for ii in range(dim):
 *                     gridhN[ind, ii] = node.location[ii]
 *         return self._gridhN             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridhN);
  __pyx_r = __pyx_v_self->_gridhN;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":556
 * 
 *     @property
 *     def gridhN(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridN
 *         cdef Node *node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridhN.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_gridhN);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":571
 * 
 *     @property
 *     def h_gridded(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an (nC, dim) numpy array with the widths of all cells in order
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_9h_gridded_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_9h_gridded_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_9h_gridded___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_9h_gridded___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  PyObject *__pyx_v_h_gridded = NULL;
  PyObject *__pyx_v_cell = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  __pyx_t_5numpy_int64_t __pyx_t_11;
  __pyx_t_5numpy_int64_t __pyx_t_12;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":579
 *         cdef np.int64_t ii, ind, dim
 *         cdef np.float64_t len
 *         if self._h_gridded is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._h_gridded = np.empty((self.nC, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_h_gridded == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":580
 *         cdef np.float64_t len
 *         if self._h_gridded is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._h_gridded = np.empty((self.nC, dim), dtype=np.float64)
 *             h_gridded = self._h_gridded
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":581
 *         if self._h_gridded is None:
 *             dim = self._dim
 *             self._h_gridded = np.empty((self.nC, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             h_gridded = self._h_gridded
 *             for cell in self:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_h_gridded);
    __Pyx_DECREF(__pyx_v_self->_h_gridded);
    __pyx_v_self->_h_gridded = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":582
 *             dim = self._dim
 *             self._h_gridded = np.empty((self.nC, dim), dtype=np.float64)
 *             h_gridded = self._h_gridded             # <<<<<<<<<<<<<<
 *             for cell in self:
 *                 ind = cell.index
 */
    __pyx_t_8 = __pyx_v_self->_h_gridded;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_v_h_gridded = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":583
 *             self._h_gridded = np.empty((self.nC, dim), dtype=np.float64)
 *             h_gridded = self._h_gridded
 *             for cell in self:             # <<<<<<<<<<<<<<
 *                 ind = cell.index
 *                 for ii in range(dim):
 */
    if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
      __pyx_t_8 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 583, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 583, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 583, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 583, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 583, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_10(__pyx_t_8);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 583, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_cell, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "discretize/tree_ext.pyx":584
 *             h_gridded = self._h_gridded
 *             for cell in self:
 *                 ind = cell.index             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     h_gridded[ind, ii] = cell.h[ii]
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_cell, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyInt_As_npy_int64(__pyx_t_7); if (unlikely((__pyx_t_11 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_ind = __pyx_t_11;

      /* "discretize/tree_ext.pyx":585
 *             for cell in self:
 *                 ind = cell.index
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     h_gridded[ind, ii] = cell.h[ii]
 * 
 */
      __pyx_t_11 = __pyx_v_dim;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_ii = __pyx_t_12;

        /* "discretize/tree_ext.pyx":586
 *                 ind = cell.index
 *                 for ii in range(dim):
 *                     h_gridded[ind, ii] = cell.h[ii]             # <<<<<<<<<<<<<<
 * 
 *         return self._h_gridded
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_cell, __pyx_n_s_h); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_7, __pyx_v_ii, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyInt_From_npy_int64(__pyx_v_ind); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_ii); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
        __pyx_t_7 = 0;
        __pyx_t_5 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_h_gridded, __pyx_t_4, __pyx_t_6) < 0)) __PYX_ERR(0, 586, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "discretize/tree_ext.pyx":583
 *             self._h_gridded = np.empty((self.nC, dim), dtype=np.float64)
 *             h_gridded = self._h_gridded
 *             for cell in self:             # <<<<<<<<<<<<<<
 *                 ind = cell.index
 *                 for ii in range(dim):
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":579
 *         cdef np.int64_t ii, ind, dim
 *         cdef np.float64_t len
 *         if self._h_gridded is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._h_gridded = np.empty((self.nC, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":588
 *                     h_gridded[ind, ii] = cell.h[ii]
 * 
 *         return self._h_gridded             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_h_gridded);
  __pyx_r = __pyx_v_self->_h_gridded;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":571
 * 
 *     @property
 *     def h_gridded(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns an (nC, dim) numpy array with the widths of all cells in order
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.h_gridded.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h_gridded);
  __Pyx_XDECREF(__pyx_v_cell);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":591
 * 
 *     @property
 *     def gridEx(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridEx
 *         cdef Edge *edge
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridEx = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Edge *> ::iterator __pyx_t_10;
  edge_map_t *__pyx_t_11;
  std::pair<int_t,Edge *>  __pyx_t_12;
  Edge *__pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":595
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEx is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridEx = np.empty((self.nEx, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridEx == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":596
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEx is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridEx = np.empty((self.nEx, dim), dtype=np.float64)
 *             gridEx = self._gridEx
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":597
 *         if self._gridEx is None:
 *             dim = self._dim
 *             self._gridEx = np.empty((self.nEx, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridEx = self._gridEx
 *             for it in self.tree.edges_x:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridEx);
    __Pyx_DECREF(__pyx_v_self->_gridEx);
    __pyx_v_self->_gridEx = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":598
 *             dim = self._dim
 *             self._gridEx = np.empty((self.nEx, dim), dtype=np.float64)
 *             gridEx = self._gridEx             # <<<<<<<<<<<<<<
 *             for it in self.tree.edges_x:
 *                 edge = it.second
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridEx);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 598, __pyx_L1_error)
    __pyx_v_gridEx = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":599
 *             self._gridEx = np.empty((self.nEx, dim), dtype=np.float64)
 *             gridEx = self._gridEx
 *             for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if not edge.hanging:
 */
    __pyx_t_11 = &__pyx_v_self->tree->edges_x;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":600
 *             gridEx = self._gridEx
 *             for it in self.tree.edges_x:
 *                 edge = it.second             # <<<<<<<<<<<<<<
 *                 if not edge.hanging:
 *                     ind = edge.index
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_edge = __pyx_t_13;

      /* "discretize/tree_ext.pyx":601
 *             for it in self.tree.edges_x:
 *                 edge = it.second
 *                 if not edge.hanging:             # <<<<<<<<<<<<<<
 *                     ind = edge.index
 *                     for ii in range(dim):
 */
      __pyx_t_2 = ((!(__pyx_v_edge->hanging != 0)) != 0);
      if (__pyx_t_2) {

        /* "discretize/tree_ext.pyx":602
 *                 edge = it.second
 *                 if not edge.hanging:
 *                     ind = edge.index             # <<<<<<<<<<<<<<
 *                     for ii in range(dim):
 *                         gridEx[ind, ii] = edge.location[ii]
 */
        __pyx_t_3 = __pyx_v_edge->index;
        __pyx_v_ind = __pyx_t_3;

        /* "discretize/tree_ext.pyx":603
 *                 if not edge.hanging:
 *                     ind = edge.index
 *                     for ii in range(dim):             # <<<<<<<<<<<<<<
 *                         gridEx[ind, ii] = edge.location[ii]
 *         return self._gridEx
 */
        __pyx_t_14 = __pyx_v_dim;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_ii = __pyx_t_15;

          /* "discretize/tree_ext.pyx":604
 *                     ind = edge.index
 *                     for ii in range(dim):
 *                         gridEx[ind, ii] = edge.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridEx
 * 
 */
          __pyx_t_16 = __pyx_v_ind;
          __pyx_t_17 = __pyx_v_ii;
          __pyx_t_18 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_v_gridEx.shape[0];
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_18 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_v_gridEx.shape[0])) __pyx_t_18 = 0;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_gridEx.shape[1];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_18 = 1;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_gridEx.shape[1])) __pyx_t_18 = 1;
          if (unlikely(__pyx_t_18 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_18);
            __PYX_ERR(0, 604, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridEx.data + __pyx_t_16 * __pyx_v_gridEx.strides[0]) ) + __pyx_t_17 * __pyx_v_gridEx.strides[1]) )) = (__pyx_v_edge->location[__pyx_v_ii]);
        }

        /* "discretize/tree_ext.pyx":601
 *             for it in self.tree.edges_x:
 *                 edge = it.second
 *                 if not edge.hanging:             # <<<<<<<<<<<<<<
 *                     ind = edge.index
 *                     for ii in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":599
 *             self._gridEx = np.empty((self.nEx, dim), dtype=np.float64)
 *             gridEx = self._gridEx
 *             for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if not edge.hanging:
 */
    }

    /* "discretize/tree_ext.pyx":595
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEx is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridEx = np.empty((self.nEx, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":605
 *                     for ii in range(dim):
 *                         gridEx[ind, ii] = edge.location[ii]
 *         return self._gridEx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridEx);
  __pyx_r = __pyx_v_self->_gridEx;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":591
 * 
 *     @property
 *     def gridEx(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridEx
 *         cdef Edge *edge
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridEx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridEx, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":608
 * 
 *     @property
 *     def gridhEx(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridhEx
 *         cdef Edge *edge
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridhEx = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Edge *> ::iterator __pyx_t_10;
  std::vector<Edge *>  *__pyx_t_11;
  Edge *__pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":612
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEx is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhEx = np.empty((self.nhEx, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridhEx == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":613
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEx is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridhEx = np.empty((self.nhEx, dim), dtype=np.float64)
 *             gridhEx = self._gridhEx
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":614
 *         if self._gridhEx is None:
 *             dim = self._dim
 *             self._gridhEx = np.empty((self.nhEx, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridhEx = self._gridhEx
 *             for edge in self.tree.hanging_edges_x:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridhEx);
    __Pyx_DECREF(__pyx_v_self->_gridhEx);
    __pyx_v_self->_gridhEx = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":615
 *             dim = self._dim
 *             self._gridhEx = np.empty((self.nhEx, dim), dtype=np.float64)
 *             gridhEx = self._gridhEx             # <<<<<<<<<<<<<<
 *             for edge in self.tree.hanging_edges_x:
 *                 ind = edge.index-self.nEx
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridhEx);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 615, __pyx_L1_error)
    __pyx_v_gridhEx = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":616
 *             self._gridhEx = np.empty((self.nhEx, dim), dtype=np.float64)
 *             gridhEx = self._gridhEx
 *             for edge in self.tree.hanging_edges_x:             # <<<<<<<<<<<<<<
 *                 ind = edge.index-self.nEx
 *                 for ii in range(dim):
 */
    __pyx_t_11 = &__pyx_v_self->tree->hanging_edges_x;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_edge = __pyx_t_12;

      /* "discretize/tree_ext.pyx":617
 *             gridhEx = self._gridhEx
 *             for edge in self.tree.hanging_edges_x:
 *                 ind = edge.index-self.nEx             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     gridhEx[ind, ii] = edge.location[ii]
 */
      __pyx_t_8 = __Pyx_PyInt_From_int_t(__pyx_v_edge->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_npy_int64(__pyx_t_6); if (unlikely((__pyx_t_13 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ind = __pyx_t_13;

      /* "discretize/tree_ext.pyx":618
 *             for edge in self.tree.hanging_edges_x:
 *                 ind = edge.index-self.nEx
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     gridhEx[ind, ii] = edge.location[ii]
 *         return self._gridhEx
 */
      __pyx_t_13 = __pyx_v_dim;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_ii = __pyx_t_14;

        /* "discretize/tree_ext.pyx":619
 *                 ind = edge.index-self.nEx
 *                 for ii in range(dim):
 *                     gridhEx[ind, ii] = edge.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridhEx
 * 
 */
        __pyx_t_15 = __pyx_v_ind;
        __pyx_t_16 = __pyx_v_ii;
        __pyx_t_17 = -1;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_gridhEx.shape[0];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_17 = 0;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_gridhEx.shape[0])) __pyx_t_17 = 0;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_gridhEx.shape[1];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 1;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_gridhEx.shape[1])) __pyx_t_17 = 1;
        if (unlikely(__pyx_t_17 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_17);
          __PYX_ERR(0, 619, __pyx_L1_error)
        }
        *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridhEx.data + __pyx_t_15 * __pyx_v_gridhEx.strides[0]) ) + __pyx_t_16 * __pyx_v_gridhEx.strides[1]) )) = (__pyx_v_edge->location[__pyx_v_ii]);
      }

      /* "discretize/tree_ext.pyx":616
 *             self._gridhEx = np.empty((self.nhEx, dim), dtype=np.float64)
 *             gridhEx = self._gridhEx
 *             for edge in self.tree.hanging_edges_x:             # <<<<<<<<<<<<<<
 *                 ind = edge.index-self.nEx
 *                 for ii in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":612
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEx is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhEx = np.empty((self.nhEx, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":620
 *                 for ii in range(dim):
 *                     gridhEx[ind, ii] = edge.location[ii]
 *         return self._gridhEx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridhEx);
  __pyx_r = __pyx_v_self->_gridhEx;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":608
 * 
 *     @property
 *     def gridhEx(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridhEx
 *         cdef Edge *edge
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridhEx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridhEx, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":623
 * 
 *     @property
 *     def gridEy(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridEy
 *         cdef Edge *edge
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridEy = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Edge *> ::iterator __pyx_t_10;
  edge_map_t *__pyx_t_11;
  std::pair<int_t,Edge *>  __pyx_t_12;
  Edge *__pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":627
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEy is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridEy = np.empty((self.nEy, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridEy == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":628
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEy is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridEy = np.empty((self.nEy, dim), dtype=np.float64)
 *             gridEy = self._gridEy
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":629
 *         if self._gridEy is None:
 *             dim = self._dim
 *             self._gridEy = np.empty((self.nEy, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridEy = self._gridEy
 *             for it in self.tree.edges_y:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridEy);
    __Pyx_DECREF(__pyx_v_self->_gridEy);
    __pyx_v_self->_gridEy = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":630
 *             dim = self._dim
 *             self._gridEy = np.empty((self.nEy, dim), dtype=np.float64)
 *             gridEy = self._gridEy             # <<<<<<<<<<<<<<
 *             for it in self.tree.edges_y:
 *                 edge = it.second
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridEy);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 630, __pyx_L1_error)
    __pyx_v_gridEy = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":631
 *             self._gridEy = np.empty((self.nEy, dim), dtype=np.float64)
 *             gridEy = self._gridEy
 *             for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if not edge.hanging:
 */
    __pyx_t_11 = &__pyx_v_self->tree->edges_y;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":632
 *             gridEy = self._gridEy
 *             for it in self.tree.edges_y:
 *                 edge = it.second             # <<<<<<<<<<<<<<
 *                 if not edge.hanging:
 *                     ind = edge.index
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_edge = __pyx_t_13;

      /* "discretize/tree_ext.pyx":633
 *             for it in self.tree.edges_y:
 *                 edge = it.second
 *                 if not edge.hanging:             # <<<<<<<<<<<<<<
 *                     ind = edge.index
 *                     for ii in range(dim):
 */
      __pyx_t_2 = ((!(__pyx_v_edge->hanging != 0)) != 0);
      if (__pyx_t_2) {

        /* "discretize/tree_ext.pyx":634
 *                 edge = it.second
 *                 if not edge.hanging:
 *                     ind = edge.index             # <<<<<<<<<<<<<<
 *                     for ii in range(dim):
 *                         gridEy[ind, ii] = edge.location[ii]
 */
        __pyx_t_3 = __pyx_v_edge->index;
        __pyx_v_ind = __pyx_t_3;

        /* "discretize/tree_ext.pyx":635
 *                 if not edge.hanging:
 *                     ind = edge.index
 *                     for ii in range(dim):             # <<<<<<<<<<<<<<
 *                         gridEy[ind, ii] = edge.location[ii]
 *         return self._gridEy
 */
        __pyx_t_14 = __pyx_v_dim;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_ii = __pyx_t_15;

          /* "discretize/tree_ext.pyx":636
 *                     ind = edge.index
 *                     for ii in range(dim):
 *                         gridEy[ind, ii] = edge.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridEy
 * 
 */
          __pyx_t_16 = __pyx_v_ind;
          __pyx_t_17 = __pyx_v_ii;
          __pyx_t_18 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_v_gridEy.shape[0];
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_18 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_v_gridEy.shape[0])) __pyx_t_18 = 0;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_gridEy.shape[1];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_18 = 1;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_gridEy.shape[1])) __pyx_t_18 = 1;
          if (unlikely(__pyx_t_18 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_18);
            __PYX_ERR(0, 636, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridEy.data + __pyx_t_16 * __pyx_v_gridEy.strides[0]) ) + __pyx_t_17 * __pyx_v_gridEy.strides[1]) )) = (__pyx_v_edge->location[__pyx_v_ii]);
        }

        /* "discretize/tree_ext.pyx":633
 *             for it in self.tree.edges_y:
 *                 edge = it.second
 *                 if not edge.hanging:             # <<<<<<<<<<<<<<
 *                     ind = edge.index
 *                     for ii in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":631
 *             self._gridEy = np.empty((self.nEy, dim), dtype=np.float64)
 *             gridEy = self._gridEy
 *             for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if not edge.hanging:
 */
    }

    /* "discretize/tree_ext.pyx":627
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEy is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridEy = np.empty((self.nEy, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":637
 *                     for ii in range(dim):
 *                         gridEy[ind, ii] = edge.location[ii]
 *         return self._gridEy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridEy);
  __pyx_r = __pyx_v_self->_gridEy;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":623
 * 
 *     @property
 *     def gridEy(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridEy
 *         cdef Edge *edge
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridEy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridEy, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":640
 * 
 *     @property
 *     def gridhEy(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridhEy
 *         cdef Edge *edge
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridhEy = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Edge *> ::iterator __pyx_t_10;
  std::vector<Edge *>  *__pyx_t_11;
  Edge *__pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":644
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEy is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhEy = np.empty((self.nhEy, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridhEy == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":645
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEy is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridhEy = np.empty((self.nhEy, dim), dtype=np.float64)
 *             gridhEy = self._gridhEy
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":646
 *         if self._gridhEy is None:
 *             dim = self._dim
 *             self._gridhEy = np.empty((self.nhEy, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridhEy = self._gridhEy
 *             for edge in self.tree.hanging_edges_y:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridhEy);
    __Pyx_DECREF(__pyx_v_self->_gridhEy);
    __pyx_v_self->_gridhEy = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":647
 *             dim = self._dim
 *             self._gridhEy = np.empty((self.nhEy, dim), dtype=np.float64)
 *             gridhEy = self._gridhEy             # <<<<<<<<<<<<<<
 *             for edge in self.tree.hanging_edges_y:
 *                 ind = edge.index-self.nEy
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridhEy);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 647, __pyx_L1_error)
    __pyx_v_gridhEy = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":648
 *             self._gridhEy = np.empty((self.nhEy, dim), dtype=np.float64)
 *             gridhEy = self._gridhEy
 *             for edge in self.tree.hanging_edges_y:             # <<<<<<<<<<<<<<
 *                 ind = edge.index-self.nEy
 *                 for ii in range(dim):
 */
    __pyx_t_11 = &__pyx_v_self->tree->hanging_edges_y;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_edge = __pyx_t_12;

      /* "discretize/tree_ext.pyx":649
 *             gridhEy = self._gridhEy
 *             for edge in self.tree.hanging_edges_y:
 *                 ind = edge.index-self.nEy             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     gridhEy[ind, ii] = edge.location[ii]
 */
      __pyx_t_8 = __Pyx_PyInt_From_int_t(__pyx_v_edge->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_npy_int64(__pyx_t_6); if (unlikely((__pyx_t_13 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ind = __pyx_t_13;

      /* "discretize/tree_ext.pyx":650
 *             for edge in self.tree.hanging_edges_y:
 *                 ind = edge.index-self.nEy
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     gridhEy[ind, ii] = edge.location[ii]
 *         return self._gridhEy
 */
      __pyx_t_13 = __pyx_v_dim;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_ii = __pyx_t_14;

        /* "discretize/tree_ext.pyx":651
 *                 ind = edge.index-self.nEy
 *                 for ii in range(dim):
 *                     gridhEy[ind, ii] = edge.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridhEy
 * 
 */
        __pyx_t_15 = __pyx_v_ind;
        __pyx_t_16 = __pyx_v_ii;
        __pyx_t_17 = -1;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_gridhEy.shape[0];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_17 = 0;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_gridhEy.shape[0])) __pyx_t_17 = 0;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_gridhEy.shape[1];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 1;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_gridhEy.shape[1])) __pyx_t_17 = 1;
        if (unlikely(__pyx_t_17 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_17);
          __PYX_ERR(0, 651, __pyx_L1_error)
        }
        *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridhEy.data + __pyx_t_15 * __pyx_v_gridhEy.strides[0]) ) + __pyx_t_16 * __pyx_v_gridhEy.strides[1]) )) = (__pyx_v_edge->location[__pyx_v_ii]);
      }

      /* "discretize/tree_ext.pyx":648
 *             self._gridhEy = np.empty((self.nhEy, dim), dtype=np.float64)
 *             gridhEy = self._gridhEy
 *             for edge in self.tree.hanging_edges_y:             # <<<<<<<<<<<<<<
 *                 ind = edge.index-self.nEy
 *                 for ii in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":644
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEy is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhEy = np.empty((self.nhEy, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":652
 *                 for ii in range(dim):
 *                     gridhEy[ind, ii] = edge.location[ii]
 *         return self._gridhEy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridhEy);
  __pyx_r = __pyx_v_self->_gridhEy;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":640
 * 
 *     @property
 *     def gridhEy(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridhEy
 *         cdef Edge *edge
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridhEy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridhEy, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":655
 * 
 *     @property
 *     def gridEz(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridEz
 *         cdef Edge *edge
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridEz = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Edge *> ::iterator __pyx_t_10;
  edge_map_t *__pyx_t_11;
  std::pair<int_t,Edge *>  __pyx_t_12;
  Edge *__pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":659
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEz is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridEz = np.empty((self.nEz, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridEz == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":660
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEz is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridEz = np.empty((self.nEz, dim), dtype=np.float64)
 *             gridEz = self._gridEz
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":661
 *         if self._gridEz is None:
 *             dim = self._dim
 *             self._gridEz = np.empty((self.nEz, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridEz = self._gridEz
 *             for it in self.tree.edges_z:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridEz);
    __Pyx_DECREF(__pyx_v_self->_gridEz);
    __pyx_v_self->_gridEz = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":662
 *             dim = self._dim
 *             self._gridEz = np.empty((self.nEz, dim), dtype=np.float64)
 *             gridEz = self._gridEz             # <<<<<<<<<<<<<<
 *             for it in self.tree.edges_z:
 *                 edge = it.second
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridEz);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 662, __pyx_L1_error)
    __pyx_v_gridEz = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":663
 *             self._gridEz = np.empty((self.nEz, dim), dtype=np.float64)
 *             gridEz = self._gridEz
 *             for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if not edge.hanging:
 */
    __pyx_t_11 = &__pyx_v_self->tree->edges_z;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":664
 *             gridEz = self._gridEz
 *             for it in self.tree.edges_z:
 *                 edge = it.second             # <<<<<<<<<<<<<<
 *                 if not edge.hanging:
 *                     ind = edge.index
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_edge = __pyx_t_13;

      /* "discretize/tree_ext.pyx":665
 *             for it in self.tree.edges_z:
 *                 edge = it.second
 *                 if not edge.hanging:             # <<<<<<<<<<<<<<
 *                     ind = edge.index
 *                     for ii in range(dim):
 */
      __pyx_t_2 = ((!(__pyx_v_edge->hanging != 0)) != 0);
      if (__pyx_t_2) {

        /* "discretize/tree_ext.pyx":666
 *                 edge = it.second
 *                 if not edge.hanging:
 *                     ind = edge.index             # <<<<<<<<<<<<<<
 *                     for ii in range(dim):
 *                         gridEz[ind, ii] = edge.location[ii]
 */
        __pyx_t_3 = __pyx_v_edge->index;
        __pyx_v_ind = __pyx_t_3;

        /* "discretize/tree_ext.pyx":667
 *                 if not edge.hanging:
 *                     ind = edge.index
 *                     for ii in range(dim):             # <<<<<<<<<<<<<<
 *                         gridEz[ind, ii] = edge.location[ii]
 *         return self._gridEz
 */
        __pyx_t_14 = __pyx_v_dim;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_ii = __pyx_t_15;

          /* "discretize/tree_ext.pyx":668
 *                     ind = edge.index
 *                     for ii in range(dim):
 *                         gridEz[ind, ii] = edge.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridEz
 * 
 */
          __pyx_t_16 = __pyx_v_ind;
          __pyx_t_17 = __pyx_v_ii;
          __pyx_t_18 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_v_gridEz.shape[0];
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_18 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_v_gridEz.shape[0])) __pyx_t_18 = 0;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_gridEz.shape[1];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_18 = 1;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_gridEz.shape[1])) __pyx_t_18 = 1;
          if (unlikely(__pyx_t_18 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_18);
            __PYX_ERR(0, 668, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridEz.data + __pyx_t_16 * __pyx_v_gridEz.strides[0]) ) + __pyx_t_17 * __pyx_v_gridEz.strides[1]) )) = (__pyx_v_edge->location[__pyx_v_ii]);
        }

        /* "discretize/tree_ext.pyx":665
 *             for it in self.tree.edges_z:
 *                 edge = it.second
 *                 if not edge.hanging:             # <<<<<<<<<<<<<<
 *                     ind = edge.index
 *                     for ii in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":663
 *             self._gridEz = np.empty((self.nEz, dim), dtype=np.float64)
 *             gridEz = self._gridEz
 *             for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if not edge.hanging:
 */
    }

    /* "discretize/tree_ext.pyx":659
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridEz is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridEz = np.empty((self.nEz, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":669
 *                     for ii in range(dim):
 *                         gridEz[ind, ii] = edge.location[ii]
 *         return self._gridEz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridEz);
  __pyx_r = __pyx_v_self->_gridEz;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":655
 * 
 *     @property
 *     def gridEz(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridEz
 *         cdef Edge *edge
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridEz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridEz, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":672
 * 
 *     @property
 *     def gridhEz(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridhEz
 *         cdef Edge *edge
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhEz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridhEz = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Edge *> ::iterator __pyx_t_10;
  std::vector<Edge *>  *__pyx_t_11;
  Edge *__pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":676
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEz is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhEz = np.empty((self.nhEz, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridhEz == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":677
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEz is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridhEz = np.empty((self.nhEz, dim), dtype=np.float64)
 *             gridhEz = self._gridhEz
 */
    __pyx_t_3 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_3;

    /* "discretize/tree_ext.pyx":678
 *         if self._gridhEz is None:
 *             dim = self._dim
 *             self._gridhEz = np.empty((self.nhEz, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridhEz = self._gridhEz
 *             for edge in self.tree.hanging_edges_z:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhEz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridhEz);
    __Pyx_DECREF(__pyx_v_self->_gridhEz);
    __pyx_v_self->_gridhEz = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":679
 *             dim = self._dim
 *             self._gridhEz = np.empty((self.nhEz, dim), dtype=np.float64)
 *             gridhEz = self._gridhEz             # <<<<<<<<<<<<<<
 *             for edge in self.tree.hanging_edges_z:
 *                 ind = edge.index-self.nEz
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridhEz);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 679, __pyx_L1_error)
    __pyx_v_gridhEz = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":680
 *             self._gridhEz = np.empty((self.nhEz, dim), dtype=np.float64)
 *             gridhEz = self._gridhEz
 *             for edge in self.tree.hanging_edges_z:             # <<<<<<<<<<<<<<
 *                 ind = edge.index-self.nEz
 *                 for ii in range(dim):
 */
    __pyx_t_11 = &__pyx_v_self->tree->hanging_edges_z;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_edge = __pyx_t_12;

      /* "discretize/tree_ext.pyx":681
 *             gridhEz = self._gridhEz
 *             for edge in self.tree.hanging_edges_z:
 *                 ind = edge.index-self.nEz             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     gridhEz[ind, ii] = edge.location[ii]
 */
      __pyx_t_8 = __Pyx_PyInt_From_int_t(__pyx_v_edge->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEz); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_npy_int64(__pyx_t_6); if (unlikely((__pyx_t_13 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ind = __pyx_t_13;

      /* "discretize/tree_ext.pyx":682
 *             for edge in self.tree.hanging_edges_z:
 *                 ind = edge.index-self.nEz
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     gridhEz[ind, ii] = edge.location[ii]
 *         return self._gridhEz
 */
      __pyx_t_13 = __pyx_v_dim;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_ii = __pyx_t_14;

        /* "discretize/tree_ext.pyx":683
 *                 ind = edge.index-self.nEz
 *                 for ii in range(dim):
 *                     gridhEz[ind, ii] = edge.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridhEz
 * 
 */
        __pyx_t_15 = __pyx_v_ind;
        __pyx_t_16 = __pyx_v_ii;
        __pyx_t_17 = -1;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_gridhEz.shape[0];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_17 = 0;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_gridhEz.shape[0])) __pyx_t_17 = 0;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_gridhEz.shape[1];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 1;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_gridhEz.shape[1])) __pyx_t_17 = 1;
        if (unlikely(__pyx_t_17 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_17);
          __PYX_ERR(0, 683, __pyx_L1_error)
        }
        *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridhEz.data + __pyx_t_15 * __pyx_v_gridhEz.strides[0]) ) + __pyx_t_16 * __pyx_v_gridhEz.strides[1]) )) = (__pyx_v_edge->location[__pyx_v_ii]);
      }

      /* "discretize/tree_ext.pyx":680
 *             self._gridhEz = np.empty((self.nhEz, dim), dtype=np.float64)
 *             gridhEz = self._gridhEz
 *             for edge in self.tree.hanging_edges_z:             # <<<<<<<<<<<<<<
 *                 ind = edge.index-self.nEz
 *                 for ii in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":676
 *         cdef Edge *edge
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhEz is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhEz = np.empty((self.nhEz, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":684
 *                 for ii in range(dim):
 *                     gridhEz[ind, ii] = edge.location[ii]
 *         return self._gridhEz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridhEz);
  __pyx_r = __pyx_v_self->_gridhEz;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":672
 * 
 *     @property
 *     def gridhEz(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridhEz
 *         cdef Edge *edge
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridhEz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridhEz, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":687
 * 
 *     @property
 *     def gridFx(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridEy
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridFx = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  std::pair<int_t,Face *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Face *> ::iterator __pyx_t_10;
  face_map_t *__pyx_t_11;
  std::pair<int_t,Face *>  __pyx_t_12;
  Face *__pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":688
 *     @property
 *     def gridFx(self):
 *         if(self._dim == 2): return self.gridEy             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t[:, :] gridFx
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":693
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFx is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridFx = np.empty((self.nFx, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridFx == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":694
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFx is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridFx = np.empty((self.nFx, dim), dtype=np.float64)
 *             gridFx = self._gridFx
 */
    __pyx_t_4 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_4;

    /* "discretize/tree_ext.pyx":695
 *         if self._gridFx is None:
 *             dim = self._dim
 *             self._gridFx = np.empty((self.nFx, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridFx = self._gridFx
 *             for it in self.tree.faces_x:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridFx);
    __Pyx_DECREF(__pyx_v_self->_gridFx);
    __pyx_v_self->_gridFx = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":696
 *             dim = self._dim
 *             self._gridFx = np.empty((self.nFx, dim), dtype=np.float64)
 *             gridFx = self._gridFx             # <<<<<<<<<<<<<<
 *             for it in self.tree.faces_x:
 *                 face = it.second
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridFx);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 696, __pyx_L1_error)
    __pyx_v_gridFx = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":697
 *             self._gridFx = np.empty((self.nFx, dim), dtype=np.float64)
 *             gridFx = self._gridFx
 *             for it in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if not face.hanging:
 */
    __pyx_t_11 = &__pyx_v_self->tree->faces_x;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":698
 *             gridFx = self._gridFx
 *             for it in self.tree.faces_x:
 *                 face = it.second             # <<<<<<<<<<<<<<
 *                 if not face.hanging:
 *                     ind = face.index
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_face = __pyx_t_13;

      /* "discretize/tree_ext.pyx":699
 *             for it in self.tree.faces_x:
 *                 face = it.second
 *                 if not face.hanging:             # <<<<<<<<<<<<<<
 *                     ind = face.index
 *                     for ii in range(dim):
 */
      __pyx_t_3 = ((!(__pyx_v_face->hanging != 0)) != 0);
      if (__pyx_t_3) {

        /* "discretize/tree_ext.pyx":700
 *                 face = it.second
 *                 if not face.hanging:
 *                     ind = face.index             # <<<<<<<<<<<<<<
 *                     for ii in range(dim):
 *                         gridFx[ind, ii] = face.location[ii]
 */
        __pyx_t_4 = __pyx_v_face->index;
        __pyx_v_ind = __pyx_t_4;

        /* "discretize/tree_ext.pyx":701
 *                 if not face.hanging:
 *                     ind = face.index
 *                     for ii in range(dim):             # <<<<<<<<<<<<<<
 *                         gridFx[ind, ii] = face.location[ii]
 *         return self._gridFx
 */
        __pyx_t_14 = __pyx_v_dim;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_ii = __pyx_t_15;

          /* "discretize/tree_ext.pyx":702
 *                     ind = face.index
 *                     for ii in range(dim):
 *                         gridFx[ind, ii] = face.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridFx
 * 
 */
          __pyx_t_16 = __pyx_v_ind;
          __pyx_t_17 = __pyx_v_ii;
          __pyx_t_18 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_v_gridFx.shape[0];
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_18 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_v_gridFx.shape[0])) __pyx_t_18 = 0;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_gridFx.shape[1];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_18 = 1;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_gridFx.shape[1])) __pyx_t_18 = 1;
          if (unlikely(__pyx_t_18 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_18);
            __PYX_ERR(0, 702, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridFx.data + __pyx_t_16 * __pyx_v_gridFx.strides[0]) ) + __pyx_t_17 * __pyx_v_gridFx.strides[1]) )) = (__pyx_v_face->location[__pyx_v_ii]);
        }

        /* "discretize/tree_ext.pyx":699
 *             for it in self.tree.faces_x:
 *                 face = it.second
 *                 if not face.hanging:             # <<<<<<<<<<<<<<
 *                     ind = face.index
 *                     for ii in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":697
 *             self._gridFx = np.empty((self.nFx, dim), dtype=np.float64)
 *             gridFx = self._gridFx
 *             for it in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if not face.hanging:
 */
    }

    /* "discretize/tree_ext.pyx":693
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFx is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridFx = np.empty((self.nFx, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":703
 *                     for ii in range(dim):
 *                         gridFx[ind, ii] = face.location[ii]
 *         return self._gridFx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridFx);
  __pyx_r = __pyx_v_self->_gridFx;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":687
 * 
 *     @property
 *     def gridFx(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridEy
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridFx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridFx, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":706
 * 
 *     @property
 *     def gridFy(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridEx
 *         cdef np.float64_t[:, :] gridFy
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridFy = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  std::pair<int_t,Face *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Face *> ::iterator __pyx_t_10;
  face_map_t *__pyx_t_11;
  std::pair<int_t,Face *>  __pyx_t_12;
  Face *__pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":707
 *     @property
 *     def gridFy(self):
 *         if(self._dim == 2): return self.gridEx             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] gridFy
 *         cdef Face *face
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 707, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":711
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFy is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridFy = np.empty((self.nFy, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridFy == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":712
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFy is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridFy = np.empty((self.nFy, dim), dtype=np.float64)
 *             gridFy = self._gridFy
 */
    __pyx_t_4 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_4;

    /* "discretize/tree_ext.pyx":713
 *         if self._gridFy is None:
 *             dim = self._dim
 *             self._gridFy = np.empty((self.nFy, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridFy = self._gridFy
 *             for it in self.tree.faces_y:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridFy);
    __Pyx_DECREF(__pyx_v_self->_gridFy);
    __pyx_v_self->_gridFy = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":714
 *             dim = self._dim
 *             self._gridFy = np.empty((self.nFy, dim), dtype=np.float64)
 *             gridFy = self._gridFy             # <<<<<<<<<<<<<<
 *             for it in self.tree.faces_y:
 *                 face = it.second
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridFy);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 714, __pyx_L1_error)
    __pyx_v_gridFy = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":715
 *             self._gridFy = np.empty((self.nFy, dim), dtype=np.float64)
 *             gridFy = self._gridFy
 *             for it in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if not face.hanging:
 */
    __pyx_t_11 = &__pyx_v_self->tree->faces_y;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":716
 *             gridFy = self._gridFy
 *             for it in self.tree.faces_y:
 *                 face = it.second             # <<<<<<<<<<<<<<
 *                 if not face.hanging:
 *                     ind = face.index
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_face = __pyx_t_13;

      /* "discretize/tree_ext.pyx":717
 *             for it in self.tree.faces_y:
 *                 face = it.second
 *                 if not face.hanging:             # <<<<<<<<<<<<<<
 *                     ind = face.index
 *                     for ii in range(dim):
 */
      __pyx_t_3 = ((!(__pyx_v_face->hanging != 0)) != 0);
      if (__pyx_t_3) {

        /* "discretize/tree_ext.pyx":718
 *                 face = it.second
 *                 if not face.hanging:
 *                     ind = face.index             # <<<<<<<<<<<<<<
 *                     for ii in range(dim):
 *                         gridFy[ind, ii] = face.location[ii]
 */
        __pyx_t_4 = __pyx_v_face->index;
        __pyx_v_ind = __pyx_t_4;

        /* "discretize/tree_ext.pyx":719
 *                 if not face.hanging:
 *                     ind = face.index
 *                     for ii in range(dim):             # <<<<<<<<<<<<<<
 *                         gridFy[ind, ii] = face.location[ii]
 *         return self._gridFy
 */
        __pyx_t_14 = __pyx_v_dim;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_ii = __pyx_t_15;

          /* "discretize/tree_ext.pyx":720
 *                     ind = face.index
 *                     for ii in range(dim):
 *                         gridFy[ind, ii] = face.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridFy
 * 
 */
          __pyx_t_16 = __pyx_v_ind;
          __pyx_t_17 = __pyx_v_ii;
          __pyx_t_18 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_v_gridFy.shape[0];
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_18 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_v_gridFy.shape[0])) __pyx_t_18 = 0;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_gridFy.shape[1];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_18 = 1;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_gridFy.shape[1])) __pyx_t_18 = 1;
          if (unlikely(__pyx_t_18 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_18);
            __PYX_ERR(0, 720, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridFy.data + __pyx_t_16 * __pyx_v_gridFy.strides[0]) ) + __pyx_t_17 * __pyx_v_gridFy.strides[1]) )) = (__pyx_v_face->location[__pyx_v_ii]);
        }

        /* "discretize/tree_ext.pyx":717
 *             for it in self.tree.faces_y:
 *                 face = it.second
 *                 if not face.hanging:             # <<<<<<<<<<<<<<
 *                     ind = face.index
 *                     for ii in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":715
 *             self._gridFy = np.empty((self.nFy, dim), dtype=np.float64)
 *             gridFy = self._gridFy
 *             for it in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if not face.hanging:
 */
    }

    /* "discretize/tree_ext.pyx":711
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFy is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridFy = np.empty((self.nFy, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":721
 *                     for ii in range(dim):
 *                         gridFy[ind, ii] = face.location[ii]
 *         return self._gridFy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridFy);
  __pyx_r = __pyx_v_self->_gridFy;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":706
 * 
 *     @property
 *     def gridFy(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridEx
 *         cdef np.float64_t[:, :] gridFy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridFy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridFy, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":724
 * 
 *     @property
 *     def gridFz(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridCC
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_6gridFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridFz = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  std::pair<int_t,Face *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Face *> ::iterator __pyx_t_10;
  face_map_t *__pyx_t_11;
  std::pair<int_t,Face *>  __pyx_t_12;
  Face *__pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":725
 *     @property
 *     def gridFz(self):
 *         if(self._dim == 2): return self.gridCC             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t[:, :] gridFz
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridCC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":730
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFz is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridFz = np.empty((self.nFz, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridFz == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":731
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFz is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridFz = np.empty((self.nFz, dim), dtype=np.float64)
 *             gridFz = self._gridFz
 */
    __pyx_t_4 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_4;

    /* "discretize/tree_ext.pyx":732
 *         if self._gridFz is None:
 *             dim = self._dim
 *             self._gridFz = np.empty((self.nFz, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridFz = self._gridFz
 *             for it in self.tree.faces_z:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridFz);
    __Pyx_DECREF(__pyx_v_self->_gridFz);
    __pyx_v_self->_gridFz = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":733
 *             dim = self._dim
 *             self._gridFz = np.empty((self.nFz, dim), dtype=np.float64)
 *             gridFz = self._gridFz             # <<<<<<<<<<<<<<
 *             for it in self.tree.faces_z:
 *                 face = it.second
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridFz);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 733, __pyx_L1_error)
    __pyx_v_gridFz = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":734
 *             self._gridFz = np.empty((self.nFz, dim), dtype=np.float64)
 *             gridFz = self._gridFz
 *             for it in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if not face.hanging:
 */
    __pyx_t_11 = &__pyx_v_self->tree->faces_z;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":735
 *             gridFz = self._gridFz
 *             for it in self.tree.faces_z:
 *                 face = it.second             # <<<<<<<<<<<<<<
 *                 if not face.hanging:
 *                     ind = face.index
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_face = __pyx_t_13;

      /* "discretize/tree_ext.pyx":736
 *             for it in self.tree.faces_z:
 *                 face = it.second
 *                 if not face.hanging:             # <<<<<<<<<<<<<<
 *                     ind = face.index
 *                     for ii in range(dim):
 */
      __pyx_t_3 = ((!(__pyx_v_face->hanging != 0)) != 0);
      if (__pyx_t_3) {

        /* "discretize/tree_ext.pyx":737
 *                 face = it.second
 *                 if not face.hanging:
 *                     ind = face.index             # <<<<<<<<<<<<<<
 *                     for ii in range(dim):
 *                         gridFz[ind, ii] = face.location[ii]
 */
        __pyx_t_4 = __pyx_v_face->index;
        __pyx_v_ind = __pyx_t_4;

        /* "discretize/tree_ext.pyx":738
 *                 if not face.hanging:
 *                     ind = face.index
 *                     for ii in range(dim):             # <<<<<<<<<<<<<<
 *                         gridFz[ind, ii] = face.location[ii]
 *         return self._gridFz
 */
        __pyx_t_14 = __pyx_v_dim;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_ii = __pyx_t_15;

          /* "discretize/tree_ext.pyx":739
 *                     ind = face.index
 *                     for ii in range(dim):
 *                         gridFz[ind, ii] = face.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridFz
 * 
 */
          __pyx_t_16 = __pyx_v_ind;
          __pyx_t_17 = __pyx_v_ii;
          __pyx_t_18 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_v_gridFz.shape[0];
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_18 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_v_gridFz.shape[0])) __pyx_t_18 = 0;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_v_gridFz.shape[1];
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_18 = 1;
          } else if (unlikely(__pyx_t_17 >= __pyx_v_gridFz.shape[1])) __pyx_t_18 = 1;
          if (unlikely(__pyx_t_18 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_18);
            __PYX_ERR(0, 739, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridFz.data + __pyx_t_16 * __pyx_v_gridFz.strides[0]) ) + __pyx_t_17 * __pyx_v_gridFz.strides[1]) )) = (__pyx_v_face->location[__pyx_v_ii]);
        }

        /* "discretize/tree_ext.pyx":736
 *             for it in self.tree.faces_z:
 *                 face = it.second
 *                 if not face.hanging:             # <<<<<<<<<<<<<<
 *                     ind = face.index
 *                     for ii in range(dim):
 */
      }

      /* "discretize/tree_ext.pyx":734
 *             self._gridFz = np.empty((self.nFz, dim), dtype=np.float64)
 *             gridFz = self._gridFz
 *             for it in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if not face.hanging:
 */
    }

    /* "discretize/tree_ext.pyx":730
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridFz is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridFz = np.empty((self.nFz, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":740
 *                     for ii in range(dim):
 *                         gridFz[ind, ii] = face.location[ii]
 *         return self._gridFz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridFz);
  __pyx_r = __pyx_v_self->_gridFz;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":724
 * 
 *     @property
 *     def gridFz(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridCC
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridFz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridFz, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":743
 * 
 *     @property
 *     def gridhFx(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridhEy
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFx___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFx___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  PyObject *__pyx_v_gridhFx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  std::vector<Face *> ::iterator __pyx_t_9;
  std::vector<Face *>  *__pyx_t_10;
  Face *__pyx_t_11;
  __pyx_t_5numpy_int64_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":744
 *     @property
 *     def gridhFx(self):
 *         if(self._dim == 2): return self.gridhEy             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t[:, :] gridFx
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":749
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFx is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhFx = np.empty((self.nhFx, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridhFx == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":750
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFx is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridhFx = np.empty((self.nhFx, dim), dtype=np.float64)
 *             gridhFx = self._gridhFx
 */
    __pyx_t_4 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_4;

    /* "discretize/tree_ext.pyx":751
 *         if self._gridhFx is None:
 *             dim = self._dim
 *             self._gridhFx = np.empty((self.nhFx, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridhFx = self._gridhFx
 *             for face in self.tree.hanging_faces_x:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridhFx);
    __Pyx_DECREF(__pyx_v_self->_gridhFx);
    __pyx_v_self->_gridhFx = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":752
 *             dim = self._dim
 *             self._gridhFx = np.empty((self.nhFx, dim), dtype=np.float64)
 *             gridhFx = self._gridhFx             # <<<<<<<<<<<<<<
 *             for face in self.tree.hanging_faces_x:
 *                 ind = face.index-self.nFx
 */
    __pyx_t_8 = __pyx_v_self->_gridhFx;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_v_gridhFx = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":753
 *             self._gridhFx = np.empty((self.nhFx, dim), dtype=np.float64)
 *             gridhFx = self._gridhFx
 *             for face in self.tree.hanging_faces_x:             # <<<<<<<<<<<<<<
 *                 ind = face.index-self.nFx
 *                 for ii in range(dim):
 */
    __pyx_t_10 = &__pyx_v_self->tree->hanging_faces_x;
    __pyx_t_9 = __pyx_t_10->begin();
    for (;;) {
      if (!(__pyx_t_9 != __pyx_t_10->end())) break;
      __pyx_t_11 = *__pyx_t_9;
      ++__pyx_t_9;
      __pyx_v_face = __pyx_t_11;

      /* "discretize/tree_ext.pyx":754
 *             gridhFx = self._gridhFx
 *             for face in self.tree.hanging_faces_x:
 *                 ind = face.index-self.nFx             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     gridhFx[ind, ii] = face.location[ii]
 */
      __pyx_t_8 = __Pyx_PyInt_From_int_t(__pyx_v_face->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_npy_int64(__pyx_t_6); if (unlikely((__pyx_t_12 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 754, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ind = __pyx_t_12;

      /* "discretize/tree_ext.pyx":755
 *             for face in self.tree.hanging_faces_x:
 *                 ind = face.index-self.nFx
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     gridhFx[ind, ii] = face.location[ii]
 *         return self._gridhFx
 */
      __pyx_t_12 = __pyx_v_dim;
      for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_ii = __pyx_t_13;

        /* "discretize/tree_ext.pyx":756
 *                 ind = face.index-self.nFx
 *                 for ii in range(dim):
 *                     gridhFx[ind, ii] = face.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridhFx
 * 
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_face->location[__pyx_v_ii])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 756, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_From_npy_int64(__pyx_v_ind); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 756, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyInt_From_npy_int64(__pyx_v_ii); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 756, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 756, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_gridhFx, __pyx_t_5, __pyx_t_6) < 0)) __PYX_ERR(0, 756, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "discretize/tree_ext.pyx":753
 *             self._gridhFx = np.empty((self.nhFx, dim), dtype=np.float64)
 *             gridhFx = self._gridhFx
 *             for face in self.tree.hanging_faces_x:             # <<<<<<<<<<<<<<
 *                 ind = face.index-self.nFx
 *                 for ii in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":749
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFx is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhFx = np.empty((self.nhFx, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":757
 *                 for ii in range(dim):
 *                     gridhFx[ind, ii] = face.location[ii]
 *         return self._gridhFx             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridhFx);
  __pyx_r = __pyx_v_self->_gridhFx;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":743
 * 
 *     @property
 *     def gridhFx(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridhEy
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridhFx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_gridhFx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":760
 * 
 *     @property
 *     def gridhFy(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridhEx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFy___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFy___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridhFy = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Face *> ::iterator __pyx_t_10;
  std::vector<Face *>  *__pyx_t_11;
  Face *__pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":761
 *     @property
 *     def gridhFy(self):
 *         if(self._dim == 2): return self.gridhEx             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t[:, :] gridhFy
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":766
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFy is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhFy = np.empty((self.nhFy, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridhFy == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":767
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFy is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridhFy = np.empty((self.nhFy, dim), dtype=np.float64)
 *             gridhFy = self._gridhFy
 */
    __pyx_t_4 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_4;

    /* "discretize/tree_ext.pyx":768
 *         if self._gridhFy is None:
 *             dim = self._dim
 *             self._gridhFy = np.empty((self.nhFy, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridhFy = self._gridhFy
 *             for face in self.tree.hanging_faces_y:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_gridhFy);
    __Pyx_DECREF(__pyx_v_self->_gridhFy);
    __pyx_v_self->_gridhFy = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":769
 *             dim = self._dim
 *             self._gridhFy = np.empty((self.nhFy, dim), dtype=np.float64)
 *             gridhFy = self._gridhFy             # <<<<<<<<<<<<<<
 *             for face in self.tree.hanging_faces_y:
 *                 ind = face.index-self.nFy
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridhFy);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 769, __pyx_L1_error)
    __pyx_v_gridhFy = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":770
 *             self._gridhFy = np.empty((self.nhFy, dim), dtype=np.float64)
 *             gridhFy = self._gridhFy
 *             for face in self.tree.hanging_faces_y:             # <<<<<<<<<<<<<<
 *                 ind = face.index-self.nFy
 *                 for ii in range(dim):
 */
    __pyx_t_11 = &__pyx_v_self->tree->hanging_faces_y;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_face = __pyx_t_12;

      /* "discretize/tree_ext.pyx":771
 *             gridhFy = self._gridhFy
 *             for face in self.tree.hanging_faces_y:
 *                 ind = face.index-self.nFy             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     gridhFy[ind, ii] = face.location[ii]
 */
      __pyx_t_8 = __Pyx_PyInt_From_int_t(__pyx_v_face->index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 771, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 771, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 771, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_npy_int64(__pyx_t_6); if (unlikely((__pyx_t_13 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 771, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ind = __pyx_t_13;

      /* "discretize/tree_ext.pyx":772
 *             for face in self.tree.hanging_faces_y:
 *                 ind = face.index-self.nFy
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     gridhFy[ind, ii] = face.location[ii]
 *         return self._gridhFy
 */
      __pyx_t_13 = __pyx_v_dim;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_ii = __pyx_t_14;

        /* "discretize/tree_ext.pyx":773
 *                 ind = face.index-self.nFy
 *                 for ii in range(dim):
 *                     gridhFy[ind, ii] = face.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridhFy
 * 
 */
        __pyx_t_15 = __pyx_v_ind;
        __pyx_t_16 = __pyx_v_ii;
        __pyx_t_17 = -1;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_gridhFy.shape[0];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_17 = 0;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_gridhFy.shape[0])) __pyx_t_17 = 0;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_gridhFy.shape[1];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 1;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_gridhFy.shape[1])) __pyx_t_17 = 1;
        if (unlikely(__pyx_t_17 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_17);
          __PYX_ERR(0, 773, __pyx_L1_error)
        }
        *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridhFy.data + __pyx_t_15 * __pyx_v_gridhFy.strides[0]) ) + __pyx_t_16 * __pyx_v_gridhFy.strides[1]) )) = (__pyx_v_face->location[__pyx_v_ii]);
      }

      /* "discretize/tree_ext.pyx":770
 *             self._gridhFy = np.empty((self.nhFy, dim), dtype=np.float64)
 *             gridhFy = self._gridhFy
 *             for face in self.tree.hanging_faces_y:             # <<<<<<<<<<<<<<
 *                 ind = face.index-self.nFy
 *                 for ii in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":766
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFy is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhFy = np.empty((self.nhFy, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":774
 *                 for ii in range(dim):
 *                     gridhFy[ind, ii] = face.location[ii]
 *         return self._gridhFy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridhFy);
  __pyx_r = __pyx_v_self->_gridhFy;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":760
 * 
 *     @property
 *     def gridhFy(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return self.gridhEx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridhFy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridhFy, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":777
 * 
 *     @property
 *     def gridhFz(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return np.array([])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFz_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFz_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFz___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7gridhFz___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_gridhFz = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int_t __pyx_t_8;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Face *> ::iterator __pyx_t_10;
  std::vector<Face *>  *__pyx_t_11;
  Face *__pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":778
 *     @property
 *     def gridhFz(self):
 *         if(self._dim == 2): return np.array([])             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t[:, :] gridhFz
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":783
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFz is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhFz = np.empty((self.nhFz, dim), dtype=np.float64)
 */
  __pyx_t_1 = (__pyx_v_self->_gridhFz == Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "discretize/tree_ext.pyx":784
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFz is None:
 *             dim = self._dim             # <<<<<<<<<<<<<<
 *             self._gridhFz = np.empty((self.nhFz, dim), dtype=np.float64)
 *             gridhFz = self._gridhFz
 */
    __pyx_t_8 = __pyx_v_self->_dim;
    __pyx_v_dim = __pyx_t_8;

    /* "discretize/tree_ext.pyx":785
 *         if self._gridhFz is None:
 *             dim = self._dim
 *             self._gridhFz = np.empty((self.nhFz, dim), dtype=np.float64)             # <<<<<<<<<<<<<<
 *             gridhFz = self._gridhFz
 *             for face in self.tree.hanging_faces_z:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nhFz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->_gridhFz);
    __Pyx_DECREF(__pyx_v_self->_gridhFz);
    __pyx_v_self->_gridhFz = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":786
 *             dim = self._dim
 *             self._gridhFz = np.empty((self.nhFz, dim), dtype=np.float64)
 *             gridhFz = self._gridhFz             # <<<<<<<<<<<<<<
 *             for face in self.tree.hanging_faces_z:
 *                 ind = face.index-self.nFz
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_gridhFz);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 786, __pyx_L1_error)
    __pyx_v_gridhFz = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":787
 *             self._gridhFz = np.empty((self.nhFz, dim), dtype=np.float64)
 *             gridhFz = self._gridhFz
 *             for face in self.tree.hanging_faces_z:             # <<<<<<<<<<<<<<
 *                 ind = face.index-self.nFz
 *                 for ii in range(dim):
 */
    __pyx_t_11 = &__pyx_v_self->tree->hanging_faces_z;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_face = __pyx_t_12;

      /* "discretize/tree_ext.pyx":788
 *             gridhFz = self._gridhFz
 *             for face in self.tree.hanging_faces_z:
 *                 ind = face.index-self.nFz             # <<<<<<<<<<<<<<
 *                 for ii in range(dim):
 *                     gridhFz[ind, ii] = face.location[ii]
 */
      __pyx_t_5 = __Pyx_PyInt_From_int_t(__pyx_v_face->index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_npy_int64(__pyx_t_6); if (unlikely((__pyx_t_13 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ind = __pyx_t_13;

      /* "discretize/tree_ext.pyx":789
 *             for face in self.tree.hanging_faces_z:
 *                 ind = face.index-self.nFz
 *                 for ii in range(dim):             # <<<<<<<<<<<<<<
 *                     gridhFz[ind, ii] = face.location[ii]
 *         return self._gridhFz
 */
      __pyx_t_13 = __pyx_v_dim;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_ii = __pyx_t_14;

        /* "discretize/tree_ext.pyx":790
 *                 ind = face.index-self.nFz
 *                 for ii in range(dim):
 *                     gridhFz[ind, ii] = face.location[ii]             # <<<<<<<<<<<<<<
 *         return self._gridhFz
 * 
 */
        __pyx_t_15 = __pyx_v_ind;
        __pyx_t_16 = __pyx_v_ii;
        __pyx_t_17 = -1;
        if (__pyx_t_15 < 0) {
          __pyx_t_15 += __pyx_v_gridhFz.shape[0];
          if (unlikely(__pyx_t_15 < 0)) __pyx_t_17 = 0;
        } else if (unlikely(__pyx_t_15 >= __pyx_v_gridhFz.shape[0])) __pyx_t_17 = 0;
        if (__pyx_t_16 < 0) {
          __pyx_t_16 += __pyx_v_gridhFz.shape[1];
          if (unlikely(__pyx_t_16 < 0)) __pyx_t_17 = 1;
        } else if (unlikely(__pyx_t_16 >= __pyx_v_gridhFz.shape[1])) __pyx_t_17 = 1;
        if (unlikely(__pyx_t_17 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_17);
          __PYX_ERR(0, 790, __pyx_L1_error)
        }
        *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_gridhFz.data + __pyx_t_15 * __pyx_v_gridhFz.strides[0]) ) + __pyx_t_16 * __pyx_v_gridhFz.strides[1]) )) = (__pyx_v_face->location[__pyx_v_ii]);
      }

      /* "discretize/tree_ext.pyx":787
 *             self._gridhFz = np.empty((self.nhFz, dim), dtype=np.float64)
 *             gridhFz = self._gridhFz
 *             for face in self.tree.hanging_faces_z:             # <<<<<<<<<<<<<<
 *                 ind = face.index-self.nFz
 *                 for ii in range(dim):
 */
    }

    /* "discretize/tree_ext.pyx":783
 *         cdef Face *face
 *         cdef np.int64_t ii, ind, dim
 *         if self._gridhFz is None:             # <<<<<<<<<<<<<<
 *             dim = self._dim
 *             self._gridhFz = np.empty((self.nhFz, dim), dtype=np.float64)
 */
  }

  /* "discretize/tree_ext.pyx":791
 *                 for ii in range(dim):
 *                     gridhFz[ind, ii] = face.location[ii]
 *         return self._gridhFz             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gridhFz);
  __pyx_r = __pyx_v_self->_gridhFz;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":777
 * 
 *     @property
 *     def gridhFz(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2): return np.array([])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.gridhFz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gridhFz, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":794
 * 
 *     @property
 *     def vol(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] vol
 *         if self._vol is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3vol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_3vol_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_3vol___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_3vol___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_vol = { 0, 0, { 0 }, { 0 }, { 0 } };
  Cell *__pyx_v_cell;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_9;
  std::vector<Cell *>  *__pyx_t_10;
  Cell *__pyx_t_11;
  double __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":796
 *     def vol(self):
 *         cdef np.float64_t[:] vol
 *         if self._vol is None:             # <<<<<<<<<<<<<<
 *             self._vol = np.empty(self.nC, dtype=np.float64)
 *             vol = self._vol
 */
  __pyx_t_1 = (__pyx_v_self->_vol == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":797
 *         cdef np.float64_t[:] vol
 *         if self._vol is None:
 *             self._vol = np.empty(self.nC, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             vol = self._vol
 *             for cell in self.tree.cells:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->_vol);
    __Pyx_DECREF(__pyx_v_self->_vol);
    __pyx_v_self->_vol = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":798
 *         if self._vol is None:
 *             self._vol = np.empty(self.nC, dtype=np.float64)
 *             vol = self._vol             # <<<<<<<<<<<<<<
 *             for cell in self.tree.cells:
 *                 vol[cell.index] = cell.volume
 */
    __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_vol);
    if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 798, __pyx_L1_error)
    __pyx_v_vol = __pyx_t_8;
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "discretize/tree_ext.pyx":799
 *             self._vol = np.empty(self.nC, dtype=np.float64)
 *             vol = self._vol
 *             for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *                 vol[cell.index] = cell.volume
 *         return self._vol
 */
    __pyx_t_10 = &__pyx_v_self->tree->cells;
    __pyx_t_9 = __pyx_t_10->begin();
    for (;;) {
      if (!(__pyx_t_9 != __pyx_t_10->end())) break;
      __pyx_t_11 = *__pyx_t_9;
      ++__pyx_t_9;
      __pyx_v_cell = __pyx_t_11;

      /* "discretize/tree_ext.pyx":800
 *             vol = self._vol
 *             for cell in self.tree.cells:
 *                 vol[cell.index] = cell.volume             # <<<<<<<<<<<<<<
 *         return self._vol
 * 
 */
      __pyx_t_12 = __pyx_v_cell->volume;
      __pyx_t_13 = __pyx_v_cell->index;
      __pyx_t_14 = -1;
      if (__pyx_t_13 < 0) {
        __pyx_t_13 += __pyx_v_vol.shape[0];
        if (unlikely(__pyx_t_13 < 0)) __pyx_t_14 = 0;
      } else if (unlikely(__pyx_t_13 >= __pyx_v_vol.shape[0])) __pyx_t_14 = 0;
      if (unlikely(__pyx_t_14 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_14);
        __PYX_ERR(0, 800, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_vol.data + __pyx_t_13 * __pyx_v_vol.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":799
 *             self._vol = np.empty(self.nC, dtype=np.float64)
 *             vol = self._vol
 *             for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *                 vol[cell.index] = cell.volume
 *         return self._vol
 */
    }

    /* "discretize/tree_ext.pyx":796
 *     def vol(self):
 *         cdef np.float64_t[:] vol
 *         if self._vol is None:             # <<<<<<<<<<<<<<
 *             self._vol = np.empty(self.nC, dtype=np.float64)
 *             vol = self._vol
 */
  }

  /* "discretize/tree_ext.pyx":801
 *             for cell in self.tree.cells:
 *                 vol[cell.index] = cell.volume
 *         return self._vol             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_vol);
  __pyx_r = __pyx_v_self->_vol;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":794
 * 
 *     @property
 *     def vol(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] vol
 *         if self._vol is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.vol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_vol, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":804
 * 
 *     @property
 *     def area(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2 and self._area is None:
 *             self._area = np.r_[self.edge[self.nEx:], self.edge[:self.nEx]]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4area_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4area_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4area___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4area___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_area = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_v_offset;
  Face *__pyx_v_face;
  std::pair<int_t,Face *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Face *> ::iterator __pyx_t_10;
  face_map_t *__pyx_t_11;
  std::pair<int_t,Face *>  __pyx_t_12;
  Face *__pyx_t_13;
  double __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":805
 *     @property
 *     def area(self):
 *         if self._dim == 2 and self._area is None:             # <<<<<<<<<<<<<<
 *             self._area = np.r_[self.edge[self.nEx:], self.edge[:self.nEx]]
 *         cdef np.float64_t[:] area
 */
  __pyx_t_2 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_area == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":806
 *     def area(self):
 *         if self._dim == 2 and self._area is None:
 *             self._area = np.r_[self.edge[self.nEx:], self.edge[:self.nEx]]             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] area
 *         cdef int_t ind, offset = 0
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edge); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, 0, &__pyx_t_6, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edge); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_t_6, 0, 0, NULL, &__pyx_t_4, NULL, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = PyObject_GetItem(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_v_self->_area);
    __Pyx_DECREF(__pyx_v_self->_area);
    __pyx_v_self->_area = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "discretize/tree_ext.pyx":805
 *     @property
 *     def area(self):
 *         if self._dim == 2 and self._area is None:             # <<<<<<<<<<<<<<
 *             self._area = np.r_[self.edge[self.nEx:], self.edge[:self.nEx]]
 *         cdef np.float64_t[:] area
 */
  }

  /* "discretize/tree_ext.pyx":808
 *             self._area = np.r_[self.edge[self.nEx:], self.edge[:self.nEx]]
 *         cdef np.float64_t[:] area
 *         cdef int_t ind, offset = 0             # <<<<<<<<<<<<<<
 *         cdef Face *face
 *         if self._area is None:
 */
  __pyx_v_offset = 0;

  /* "discretize/tree_ext.pyx":810
 *         cdef int_t ind, offset = 0
 *         cdef Face *face
 *         if self._area is None:             # <<<<<<<<<<<<<<
 *             self._area = np.empty(self.nF, dtype=np.float64)
 *             area = self._area
 */
  __pyx_t_1 = (__pyx_v_self->_area == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":811
 *         cdef Face *face
 *         if self._area is None:
 *             self._area = np.empty(self.nF, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             area = self._area
 * 
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nF); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->_area);
    __Pyx_DECREF(__pyx_v_self->_area);
    __pyx_v_self->_area = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "discretize/tree_ext.pyx":812
 *         if self._area is None:
 *             self._area = np.empty(self.nF, dtype=np.float64)
 *             area = self._area             # <<<<<<<<<<<<<<
 * 
 *             for it in self.tree.faces_x:
 */
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_area);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 812, __pyx_L1_error)
    __pyx_v_area = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":814
 *             area = self._area
 * 
 *             for it in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if face.hanging: continue
 */
    __pyx_t_11 = &__pyx_v_self->tree->faces_x;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":815
 * 
 *             for it in self.tree.faces_x:
 *                 face = it.second             # <<<<<<<<<<<<<<
 *                 if face.hanging: continue
 *                 area[face.index] = face.area
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_face = __pyx_t_13;

      /* "discretize/tree_ext.pyx":816
 *             for it in self.tree.faces_x:
 *                 face = it.second
 *                 if face.hanging: continue             # <<<<<<<<<<<<<<
 *                 area[face.index] = face.area
 * 
 */
      __pyx_t_3 = (__pyx_v_face->hanging != 0);
      if (__pyx_t_3) {
        goto __pyx_L7_continue;
      }

      /* "discretize/tree_ext.pyx":817
 *                 face = it.second
 *                 if face.hanging: continue
 *                 area[face.index] = face.area             # <<<<<<<<<<<<<<
 * 
 *             offset = self.nFx
 */
      __pyx_t_14 = __pyx_v_face->area;
      __pyx_t_15 = __pyx_v_face->index;
      __pyx_t_16 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_area.shape[0];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_area.shape[0])) __pyx_t_16 = 0;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 817, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_area.data + __pyx_t_15 * __pyx_v_area.strides[0]) )) = __pyx_t_14;

      /* "discretize/tree_ext.pyx":814
 *             area = self._area
 * 
 *             for it in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if face.hanging: continue
 */
      __pyx_L7_continue:;
    }

    /* "discretize/tree_ext.pyx":819
 *                 area[face.index] = face.area
 * 
 *             offset = self.nFx             # <<<<<<<<<<<<<<
 *             for it in self.tree.faces_y:
 *                 face = it.second
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_17 = __Pyx_PyInt_As_int_t(__pyx_t_6); if (unlikely((__pyx_t_17 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_offset = __pyx_t_17;

    /* "discretize/tree_ext.pyx":820
 * 
 *             offset = self.nFx
 *             for it in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if face.hanging: continue
 */
    __pyx_t_11 = &__pyx_v_self->tree->faces_y;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":821
 *             offset = self.nFx
 *             for it in self.tree.faces_y:
 *                 face = it.second             # <<<<<<<<<<<<<<
 *                 if face.hanging: continue
 *                 area[face.index + offset] = face.area
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_face = __pyx_t_13;

      /* "discretize/tree_ext.pyx":822
 *             for it in self.tree.faces_y:
 *                 face = it.second
 *                 if face.hanging: continue             # <<<<<<<<<<<<<<
 *                 area[face.index + offset] = face.area
 * 
 */
      __pyx_t_3 = (__pyx_v_face->hanging != 0);
      if (__pyx_t_3) {
        goto __pyx_L10_continue;
      }

      /* "discretize/tree_ext.pyx":823
 *                 face = it.second
 *                 if face.hanging: continue
 *                 area[face.index + offset] = face.area             # <<<<<<<<<<<<<<
 * 
 *             offset = self.nFx + self.nFy
 */
      __pyx_t_14 = __pyx_v_face->area;
      __pyx_t_18 = (__pyx_v_face->index + __pyx_v_offset);
      __pyx_t_16 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_area.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_area.shape[0])) __pyx_t_16 = 0;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 823, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_area.data + __pyx_t_18 * __pyx_v_area.strides[0]) )) = __pyx_t_14;

      /* "discretize/tree_ext.pyx":820
 * 
 *             offset = self.nFx
 *             for it in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if face.hanging: continue
 */
      __pyx_L10_continue:;
    }

    /* "discretize/tree_ext.pyx":825
 *                 area[face.index + offset] = face.area
 * 
 *             offset = self.nFx + self.nFy             # <<<<<<<<<<<<<<
 *             for it in self.tree.faces_z:
 *                 face = it.second
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_17 = __Pyx_PyInt_As_int_t(__pyx_t_5); if (unlikely((__pyx_t_17 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_offset = __pyx_t_17;

    /* "discretize/tree_ext.pyx":826
 * 
 *             offset = self.nFx + self.nFy
 *             for it in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if face.hanging: continue
 */
    __pyx_t_11 = &__pyx_v_self->tree->faces_z;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_it = __pyx_t_12;

      /* "discretize/tree_ext.pyx":827
 *             offset = self.nFx + self.nFy
 *             for it in self.tree.faces_z:
 *                 face = it.second             # <<<<<<<<<<<<<<
 *                 if face.hanging: continue
 *                 area[face.index + offset] = face.area
 */
      __pyx_t_13 = __pyx_v_it.second;
      __pyx_v_face = __pyx_t_13;

      /* "discretize/tree_ext.pyx":828
 *             for it in self.tree.faces_z:
 *                 face = it.second
 *                 if face.hanging: continue             # <<<<<<<<<<<<<<
 *                 area[face.index + offset] = face.area
 *         return self._area
 */
      __pyx_t_3 = (__pyx_v_face->hanging != 0);
      if (__pyx_t_3) {
        goto __pyx_L13_continue;
      }

      /* "discretize/tree_ext.pyx":829
 *                 face = it.second
 *                 if face.hanging: continue
 *                 area[face.index + offset] = face.area             # <<<<<<<<<<<<<<
 *         return self._area
 * 
 */
      __pyx_t_14 = __pyx_v_face->area;
      __pyx_t_19 = (__pyx_v_face->index + __pyx_v_offset);
      __pyx_t_16 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_v_area.shape[0];
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_v_area.shape[0])) __pyx_t_16 = 0;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 829, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_area.data + __pyx_t_19 * __pyx_v_area.strides[0]) )) = __pyx_t_14;

      /* "discretize/tree_ext.pyx":826
 * 
 *             offset = self.nFx + self.nFy
 *             for it in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *                 face = it.second
 *                 if face.hanging: continue
 */
      __pyx_L13_continue:;
    }

    /* "discretize/tree_ext.pyx":810
 *         cdef int_t ind, offset = 0
 *         cdef Face *face
 *         if self._area is None:             # <<<<<<<<<<<<<<
 *             self._area = np.empty(self.nF, dtype=np.float64)
 *             area = self._area
 */
  }

  /* "discretize/tree_ext.pyx":830
 *                 if face.hanging: continue
 *                 area[face.index + offset] = face.area
 *         return self._area             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_area);
  __pyx_r = __pyx_v_self->_area;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":804
 * 
 *     @property
 *     def area(self):             # <<<<<<<<<<<<<<
 *         if self._dim == 2 and self._area is None:
 *             self._area = np.r_[self.edge[self.nEx:], self.edge[:self.nEx]]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.area.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_area, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":833
 * 
 *     @property
 *     def edge(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] edge_l
 *         cdef Edge *edge
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4edge_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_4edge_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_4edge___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_4edge___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_edge_l = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  int_t __pyx_v_offset;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Edge *> ::iterator __pyx_t_9;
  edge_map_t *__pyx_t_10;
  std::pair<int_t,Edge *>  __pyx_t_11;
  Edge *__pyx_t_12;
  double __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_t_15;
  int_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":837
 *         cdef Edge *edge
 *         cdef int_t ind, offset
 *         if self._edge is None:             # <<<<<<<<<<<<<<
 *             self._edge = np.empty(self.nE, dtype=np.float64)
 *             edge_l = self._edge
 */
  __pyx_t_1 = (__pyx_v_self->_edge == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":838
 *         cdef int_t ind, offset
 *         if self._edge is None:
 *             self._edge = np.empty(self.nE, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             edge_l = self._edge
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->_edge);
    __Pyx_DECREF(__pyx_v_self->_edge);
    __pyx_v_self->_edge = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":839
 *         if self._edge is None:
 *             self._edge = np.empty(self.nE, dtype=np.float64)
 *             edge_l = self._edge             # <<<<<<<<<<<<<<
 * 
 *             for it in self.tree.edges_x:
 */
    __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_v_self->_edge);
    if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 839, __pyx_L1_error)
    __pyx_v_edge_l = __pyx_t_8;
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "discretize/tree_ext.pyx":841
 *             edge_l = self._edge
 * 
 *             for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if edge.hanging: continue
 */
    __pyx_t_10 = &__pyx_v_self->tree->edges_x;
    __pyx_t_9 = __pyx_t_10->begin();
    for (;;) {
      if (!(__pyx_t_9 != __pyx_t_10->end())) break;
      __pyx_t_11 = *__pyx_t_9;
      ++__pyx_t_9;
      __pyx_v_it = __pyx_t_11;

      /* "discretize/tree_ext.pyx":842
 * 
 *             for it in self.tree.edges_x:
 *                 edge = it.second             # <<<<<<<<<<<<<<
 *                 if edge.hanging: continue
 *                 edge_l[edge.index] = edge.length
 */
      __pyx_t_12 = __pyx_v_it.second;
      __pyx_v_edge = __pyx_t_12;

      /* "discretize/tree_ext.pyx":843
 *             for it in self.tree.edges_x:
 *                 edge = it.second
 *                 if edge.hanging: continue             # <<<<<<<<<<<<<<
 *                 edge_l[edge.index] = edge.length
 * 
 */
      __pyx_t_2 = (__pyx_v_edge->hanging != 0);
      if (__pyx_t_2) {
        goto __pyx_L4_continue;
      }

      /* "discretize/tree_ext.pyx":844
 *                 edge = it.second
 *                 if edge.hanging: continue
 *                 edge_l[edge.index] = edge.length             # <<<<<<<<<<<<<<
 * 
 *             offset = self.nEx
 */
      __pyx_t_13 = __pyx_v_edge->length;
      __pyx_t_14 = __pyx_v_edge->index;
      __pyx_t_15 = -1;
      if (__pyx_t_14 < 0) {
        __pyx_t_14 += __pyx_v_edge_l.shape[0];
        if (unlikely(__pyx_t_14 < 0)) __pyx_t_15 = 0;
      } else if (unlikely(__pyx_t_14 >= __pyx_v_edge_l.shape[0])) __pyx_t_15 = 0;
      if (unlikely(__pyx_t_15 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_15);
        __PYX_ERR(0, 844, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_edge_l.data + __pyx_t_14 * __pyx_v_edge_l.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":841
 *             edge_l = self._edge
 * 
 *             for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if edge.hanging: continue
 */
      __pyx_L4_continue:;
    }

    /* "discretize/tree_ext.pyx":846
 *                 edge_l[edge.index] = edge.length
 * 
 *             offset = self.nEx             # <<<<<<<<<<<<<<
 *             for it in self.tree.edges_y:
 *                 edge = it.second
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_16 = __Pyx_PyInt_As_int_t(__pyx_t_7); if (unlikely((__pyx_t_16 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_offset = __pyx_t_16;

    /* "discretize/tree_ext.pyx":847
 * 
 *             offset = self.nEx
 *             for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if edge.hanging: continue
 */
    __pyx_t_10 = &__pyx_v_self->tree->edges_y;
    __pyx_t_9 = __pyx_t_10->begin();
    for (;;) {
      if (!(__pyx_t_9 != __pyx_t_10->end())) break;
      __pyx_t_11 = *__pyx_t_9;
      ++__pyx_t_9;
      __pyx_v_it = __pyx_t_11;

      /* "discretize/tree_ext.pyx":848
 *             offset = self.nEx
 *             for it in self.tree.edges_y:
 *                 edge = it.second             # <<<<<<<<<<<<<<
 *                 if edge.hanging: continue
 *                 edge_l[edge.index + offset] = edge.length
 */
      __pyx_t_12 = __pyx_v_it.second;
      __pyx_v_edge = __pyx_t_12;

      /* "discretize/tree_ext.pyx":849
 *             for it in self.tree.edges_y:
 *                 edge = it.second
 *                 if edge.hanging: continue             # <<<<<<<<<<<<<<
 *                 edge_l[edge.index + offset] = edge.length
 * 
 */
      __pyx_t_2 = (__pyx_v_edge->hanging != 0);
      if (__pyx_t_2) {
        goto __pyx_L7_continue;
      }

      /* "discretize/tree_ext.pyx":850
 *                 edge = it.second
 *                 if edge.hanging: continue
 *                 edge_l[edge.index + offset] = edge.length             # <<<<<<<<<<<<<<
 * 
 *             if self._dim > 2:
 */
      __pyx_t_13 = __pyx_v_edge->length;
      __pyx_t_17 = (__pyx_v_edge->index + __pyx_v_offset);
      __pyx_t_15 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_v_edge_l.shape[0];
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_15 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_v_edge_l.shape[0])) __pyx_t_15 = 0;
      if (unlikely(__pyx_t_15 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_15);
        __PYX_ERR(0, 850, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_edge_l.data + __pyx_t_17 * __pyx_v_edge_l.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":847
 * 
 *             offset = self.nEx
 *             for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if edge.hanging: continue
 */
      __pyx_L7_continue:;
    }

    /* "discretize/tree_ext.pyx":852
 *                 edge_l[edge.index + offset] = edge.length
 * 
 *             if self._dim > 2:             # <<<<<<<<<<<<<<
 *                 offset = self.nEx + self.nEy
 *                 for it in self.tree.edges_z:
 */
    __pyx_t_2 = ((__pyx_v_self->_dim > 2) != 0);
    if (__pyx_t_2) {

      /* "discretize/tree_ext.pyx":853
 * 
 *             if self._dim > 2:
 *                 offset = self.nEx + self.nEy             # <<<<<<<<<<<<<<
 *                 for it in self.tree.edges_z:
 *                     edge = it.second
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyNumber_Add(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_16 = __Pyx_PyInt_As_int_t(__pyx_t_5); if (unlikely((__pyx_t_16 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_offset = __pyx_t_16;

      /* "discretize/tree_ext.pyx":854
 *             if self._dim > 2:
 *                 offset = self.nEx + self.nEy
 *                 for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if edge.hanging: continue
 */
      __pyx_t_10 = &__pyx_v_self->tree->edges_z;
      __pyx_t_9 = __pyx_t_10->begin();
      for (;;) {
        if (!(__pyx_t_9 != __pyx_t_10->end())) break;
        __pyx_t_11 = *__pyx_t_9;
        ++__pyx_t_9;
        __pyx_v_it = __pyx_t_11;

        /* "discretize/tree_ext.pyx":855
 *                 offset = self.nEx + self.nEy
 *                 for it in self.tree.edges_z:
 *                     edge = it.second             # <<<<<<<<<<<<<<
 *                     if edge.hanging: continue
 *                     edge_l[edge.index + offset] = edge.length
 */
        __pyx_t_12 = __pyx_v_it.second;
        __pyx_v_edge = __pyx_t_12;

        /* "discretize/tree_ext.pyx":856
 *                 for it in self.tree.edges_z:
 *                     edge = it.second
 *                     if edge.hanging: continue             # <<<<<<<<<<<<<<
 *                     edge_l[edge.index + offset] = edge.length
 *         return self._edge
 */
        __pyx_t_2 = (__pyx_v_edge->hanging != 0);
        if (__pyx_t_2) {
          goto __pyx_L11_continue;
        }

        /* "discretize/tree_ext.pyx":857
 *                     edge = it.second
 *                     if edge.hanging: continue
 *                     edge_l[edge.index + offset] = edge.length             # <<<<<<<<<<<<<<
 *         return self._edge
 * 
 */
        __pyx_t_13 = __pyx_v_edge->length;
        __pyx_t_18 = (__pyx_v_edge->index + __pyx_v_offset);
        __pyx_t_15 = -1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_v_edge_l.shape[0];
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_15 = 0;
        } else if (unlikely(__pyx_t_18 >= __pyx_v_edge_l.shape[0])) __pyx_t_15 = 0;
        if (unlikely(__pyx_t_15 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_15);
          __PYX_ERR(0, 857, __pyx_L1_error)
        }
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_edge_l.data + __pyx_t_18 * __pyx_v_edge_l.strides[0]) )) = __pyx_t_13;

        /* "discretize/tree_ext.pyx":854
 *             if self._dim > 2:
 *                 offset = self.nEx + self.nEy
 *                 for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if edge.hanging: continue
 */
        __pyx_L11_continue:;
      }

      /* "discretize/tree_ext.pyx":852
 *                 edge_l[edge.index + offset] = edge.length
 * 
 *             if self._dim > 2:             # <<<<<<<<<<<<<<
 *                 offset = self.nEx + self.nEy
 *                 for it in self.tree.edges_z:
 */
    }

    /* "discretize/tree_ext.pyx":837
 *         cdef Edge *edge
 *         cdef int_t ind, offset
 *         if self._edge is None:             # <<<<<<<<<<<<<<
 *             self._edge = np.empty(self.nE, dtype=np.float64)
 *             edge_l = self._edge
 */
  }

  /* "discretize/tree_ext.pyx":858
 *                     if edge.hanging: continue
 *                     edge_l[edge.index + offset] = edge.length
 *         return self._edge             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_edge);
  __pyx_r = __pyx_v_self->_edge;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":833
 * 
 *     @property
 *     def edge(self):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] edge_l
 *         cdef Edge *edge
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.edge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_edge_l, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":861
 * 
 *     @property
 *     def faceDiv(self):             # <<<<<<<<<<<<<<
 *         if self._faceDiv is not None:
 *             return self._faceDiv
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7faceDiv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7faceDiv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7faceDiv___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7faceDiv___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_D = NULL;
  PyObject *__pyx_v_R = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":862
 *     @property
 *     def faceDiv(self):
 *         if self._faceDiv is not None:             # <<<<<<<<<<<<<<
 *             return self._faceDiv
 *         if self._dim == 2:
 */
  __pyx_t_1 = (__pyx_v_self->_faceDiv != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":863
 *     def faceDiv(self):
 *         if self._faceDiv is not None:
 *             return self._faceDiv             # <<<<<<<<<<<<<<
 *         if self._dim == 2:
 *             D = self._faceDiv2D() # Because it uses edges instead of faces
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_faceDiv);
    __pyx_r = __pyx_v_self->_faceDiv;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":862
 *     @property
 *     def faceDiv(self):
 *         if self._faceDiv is not None:             # <<<<<<<<<<<<<<
 *             return self._faceDiv
 *         if self._dim == 2:
 */
  }

  /* "discretize/tree_ext.pyx":864
 *         if self._faceDiv is not None:
 *             return self._faceDiv
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             D = self._faceDiv2D() # Because it uses edges instead of faces
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":865
 *             return self._faceDiv
 *         if self._dim == 2:
 *             D = self._faceDiv2D() # Because it uses edges instead of faces             # <<<<<<<<<<<<<<
 *         else:
 *             D = self._faceDiv3D()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_faceDiv2D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 865, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "discretize/tree_ext.pyx":864
 *         if self._faceDiv is not None:
 *             return self._faceDiv
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             D = self._faceDiv2D() # Because it uses edges instead of faces
 *         else:
 */
    goto __pyx_L4;
  }

  /* "discretize/tree_ext.pyx":867
 *             D = self._faceDiv2D() # Because it uses edges instead of faces
 *         else:
 *             D = self._faceDiv3D()             # <<<<<<<<<<<<<<
 *         R = self._deflate_faces()
 *         self._faceDiv = D*R
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_faceDiv3D); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 867, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_D = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L4:;

  /* "discretize/tree_ext.pyx":868
 *         else:
 *             D = self._faceDiv3D()
 *         R = self._deflate_faces()             # <<<<<<<<<<<<<<
 *         self._faceDiv = D*R
 *         return self._faceDiv
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_faces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 868, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_R = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":869
 *             D = self._faceDiv3D()
 *         R = self._deflate_faces()
 *         self._faceDiv = D*R             # <<<<<<<<<<<<<<
 *         return self._faceDiv
 * 
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_D, __pyx_v_R); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_faceDiv);
  __Pyx_DECREF(__pyx_v_self->_faceDiv);
  __pyx_v_self->_faceDiv = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":870
 *         R = self._deflate_faces()
 *         self._faceDiv = D*R
 *         return self._faceDiv             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_faceDiv);
  __pyx_r = __pyx_v_self->_faceDiv;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":861
 * 
 *     @property
 *     def faceDiv(self):             # <<<<<<<<<<<<<<
 *         if self._faceDiv is not None:
 *             return self._faceDiv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.faceDiv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_R);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":874
 *     @cython.cdivision(True)
 *     @cython.boundscheck(False)
 *     def _faceDiv2D(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.empty(self.nC*4, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.nC*4, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_13_faceDiv2D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_13_faceDiv2D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_faceDiv2D (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_faceDiv2D(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_faceDiv2D(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_v_i;
  Edge *__pyx_v_edges[4];
  __pyx_t_5numpy_int64_t __pyx_v_offset;
  double __pyx_v_volume;
  Cell *__pyx_v_cell;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_8;
  std::vector<Cell *>  *__pyx_t_9;
  Cell *__pyx_t_10;
  Edge **__pyx_t_11;
  int_t __pyx_t_12;
  int __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  double __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  __pyx_t_5numpy_int64_t __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  __Pyx_RefNannySetupContext("_faceDiv2D", 0);

  /* "discretize/tree_ext.pyx":875
 *     @cython.boundscheck(False)
 *     def _faceDiv2D(self):
 *         cdef np.int64_t[:] I = np.empty(self.nC*4, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.empty(self.nC*4, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(self.nC*4, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_int_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":876
 *     def _faceDiv2D(self):
 *         cdef np.int64_t[:] I = np.empty(self.nC*4, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.nC*4, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.empty(self.nC*4, dtype=np.float64)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_5, __pyx_int_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":877
 *         cdef np.int64_t[:] I = np.empty(self.nC*4, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.nC*4, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(self.nC*4, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.int64_t i = 0
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_int_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":879
 *         cdef np.float64_t[:] V = np.empty(self.nC*4, dtype=np.float64)
 * 
 *         cdef np.int64_t i = 0             # <<<<<<<<<<<<<<
 *         cdef Edge *edges[4]
 *         cdef np.int64_t offset = self.tree.edges_y.size()
 */
  __pyx_v_i = 0;

  /* "discretize/tree_ext.pyx":881
 *         cdef np.int64_t i = 0
 *         cdef Edge *edges[4]
 *         cdef np.int64_t offset = self.tree.edges_y.size()             # <<<<<<<<<<<<<<
 *         cdef double volume
 * 
 */
  __pyx_v_offset = __pyx_v_self->tree->edges_y.size();

  /* "discretize/tree_ext.pyx":884
 *         cdef double volume
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             edges = cell.edges
 *             i = cell.index
 */
  __pyx_t_9 = &__pyx_v_self->tree->cells;
  __pyx_t_8 = __pyx_t_9->begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_t_9->end())) break;
    __pyx_t_10 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_cell = __pyx_t_10;

    /* "discretize/tree_ext.pyx":885
 * 
 *         for cell in self.tree.cells:
 *             edges = cell.edges             # <<<<<<<<<<<<<<
 *             i = cell.index
 *             I[i*4 : i*4 + 4] = i
 */
    __pyx_t_11 = __pyx_v_cell->edges;
    memcpy(&(__pyx_v_edges[0]), __pyx_t_11, sizeof(__pyx_v_edges[0]) * (4 - 0));

    /* "discretize/tree_ext.pyx":886
 *         for cell in self.tree.cells:
 *             edges = cell.edges
 *             i = cell.index             # <<<<<<<<<<<<<<
 *             I[i*4 : i*4 + 4] = i
 *             J[i*4    ] = edges[0].index + offset #x edge, y face (add offset)
 */
    __pyx_t_12 = __pyx_v_cell->index;
    __pyx_v_i = __pyx_t_12;

    /* "discretize/tree_ext.pyx":887
 *             edges = cell.edges
 *             i = cell.index
 *             I[i*4 : i*4 + 4] = i             # <<<<<<<<<<<<<<
 *             J[i*4    ] = edges[0].index + offset #x edge, y face (add offset)
 *             J[i*4 + 1] = edges[1].index + offset #x edge, y face (add offset)
 */
    __pyx_t_6.data = __pyx_v_I.data;
    __pyx_t_6.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_6, 0);
    __pyx_t_13 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_6,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_13,
    (__pyx_v_i * 4),
    ((__pyx_v_i * 4) + 4),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 887, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_i;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_6.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_6.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_6.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
    __pyx_t_6.memview = NULL;
    __pyx_t_6.data = NULL;

    /* "discretize/tree_ext.pyx":888
 *             i = cell.index
 *             I[i*4 : i*4 + 4] = i
 *             J[i*4    ] = edges[0].index + offset #x edge, y face (add offset)             # <<<<<<<<<<<<<<
 *             J[i*4 + 1] = edges[1].index + offset #x edge, y face (add offset)
 *             J[i*4 + 2] = edges[2].index #y edge, x face
 */
    __pyx_t_14 = (__pyx_v_i * 4);
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_14 * __pyx_v_J.strides[0]) )) = ((__pyx_v_edges[0])->index + __pyx_v_offset);

    /* "discretize/tree_ext.pyx":889
 *             I[i*4 : i*4 + 4] = i
 *             J[i*4    ] = edges[0].index + offset #x edge, y face (add offset)
 *             J[i*4 + 1] = edges[1].index + offset #x edge, y face (add offset)             # <<<<<<<<<<<<<<
 *             J[i*4 + 2] = edges[2].index #y edge, x face
 *             J[i*4 + 3] = edges[3].index #y edge, x face
 */
    __pyx_t_15 = ((__pyx_v_i * 4) + 1);
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = ((__pyx_v_edges[1])->index + __pyx_v_offset);

    /* "discretize/tree_ext.pyx":890
 *             J[i*4    ] = edges[0].index + offset #x edge, y face (add offset)
 *             J[i*4 + 1] = edges[1].index + offset #x edge, y face (add offset)
 *             J[i*4 + 2] = edges[2].index #y edge, x face             # <<<<<<<<<<<<<<
 *             J[i*4 + 3] = edges[3].index #y edge, x face
 * 
 */
    __pyx_t_12 = (__pyx_v_edges[2])->index;
    __pyx_t_16 = ((__pyx_v_i * 4) + 2);
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

    /* "discretize/tree_ext.pyx":891
 *             J[i*4 + 1] = edges[1].index + offset #x edge, y face (add offset)
 *             J[i*4 + 2] = edges[2].index #y edge, x face
 *             J[i*4 + 3] = edges[3].index #y edge, x face             # <<<<<<<<<<<<<<
 * 
 *             volume = cell.volume
 */
    __pyx_t_12 = (__pyx_v_edges[3])->index;
    __pyx_t_17 = ((__pyx_v_i * 4) + 3);
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

    /* "discretize/tree_ext.pyx":893
 *             J[i*4 + 3] = edges[3].index #y edge, x face
 * 
 *             volume = cell.volume             # <<<<<<<<<<<<<<
 *             V[i*4    ] = -edges[0].length/volume
 *             V[i*4 + 1] =  edges[1].length/volume
 */
    __pyx_t_18 = __pyx_v_cell->volume;
    __pyx_v_volume = __pyx_t_18;

    /* "discretize/tree_ext.pyx":894
 * 
 *             volume = cell.volume
 *             V[i*4    ] = -edges[0].length/volume             # <<<<<<<<<<<<<<
 *             V[i*4 + 1] =  edges[1].length/volume
 *             V[i*4 + 2] = -edges[2].length/volume
 */
    __pyx_t_19 = (__pyx_v_i * 4);
    if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_19 * __pyx_v_V.strides[0]) )) = ((-(__pyx_v_edges[0])->length) / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":895
 *             volume = cell.volume
 *             V[i*4    ] = -edges[0].length/volume
 *             V[i*4 + 1] =  edges[1].length/volume             # <<<<<<<<<<<<<<
 *             V[i*4 + 2] = -edges[2].length/volume
 *             V[i*4 + 3] =  edges[3].length/volume
 */
    __pyx_t_20 = ((__pyx_v_i * 4) + 1);
    if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_20 * __pyx_v_V.strides[0]) )) = ((__pyx_v_edges[1])->length / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":896
 *             V[i*4    ] = -edges[0].length/volume
 *             V[i*4 + 1] =  edges[1].length/volume
 *             V[i*4 + 2] = -edges[2].length/volume             # <<<<<<<<<<<<<<
 *             V[i*4 + 3] =  edges[3].length/volume
 *         return sp.csr_matrix((V, (I, J)))
 */
    __pyx_t_21 = ((__pyx_v_i * 4) + 2);
    if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_21 * __pyx_v_V.strides[0]) )) = ((-(__pyx_v_edges[2])->length) / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":897
 *             V[i*4 + 1] =  edges[1].length/volume
 *             V[i*4 + 2] = -edges[2].length/volume
 *             V[i*4 + 3] =  edges[3].length/volume             # <<<<<<<<<<<<<<
 *         return sp.csr_matrix((V, (I, J)))
 * 
 */
    __pyx_t_22 = ((__pyx_v_i * 4) + 3);
    if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_22 * __pyx_v_V.strides[0]) )) = ((__pyx_v_edges[3])->length / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":884
 *         cdef double volume
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             edges = cell.edges
 *             i = cell.index
 */
  }

  /* "discretize/tree_ext.pyx":898
 *             V[i*4 + 2] = -edges[2].length/volume
 *             V[i*4 + 3] =  edges[3].length/volume
 *         return sp.csr_matrix((V, (I, J)))             # <<<<<<<<<<<<<<
 * 
 *     @cython.cdivision(True)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_23);
  __pyx_t_5 = 0;
  __pyx_t_23 = 0;
  __pyx_t_23 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_23)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_23);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_23) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_23, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 898, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_23, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 898, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_23); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_23); __pyx_t_23 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":874
 *     @cython.cdivision(True)
 *     @cython.boundscheck(False)
 *     def _faceDiv2D(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.empty(self.nC*4, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.nC*4, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._faceDiv2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":902
 *     @cython.cdivision(True)
 *     @cython.boundscheck(False)
 *     def _faceDiv3D(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             np.int64_t[:] I = np.empty(self.nC*6, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_15_faceDiv3D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_15_faceDiv3D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_faceDiv3D (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_14_faceDiv3D(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_14_faceDiv3D(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_v_i;
  Face *__pyx_v_faces[6];
  __pyx_t_5numpy_int64_t __pyx_v_offset1;
  __pyx_t_5numpy_int64_t __pyx_v_offset2;
  double __pyx_v_volume;
  double __pyx_v_fx_area;
  double __pyx_v_fy_area;
  double __pyx_v_fz_area;
  Cell *__pyx_v_cell;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_8;
  std::vector<Cell *>  *__pyx_t_9;
  Cell *__pyx_t_10;
  Face **__pyx_t_11;
  int_t __pyx_t_12;
  int __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  double __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  __pyx_t_5numpy_int64_t __pyx_t_22;
  __pyx_t_5numpy_int64_t __pyx_t_23;
  __pyx_t_5numpy_int64_t __pyx_t_24;
  __pyx_t_5numpy_int64_t __pyx_t_25;
  __pyx_t_5numpy_int64_t __pyx_t_26;
  PyObject *__pyx_t_27 = NULL;
  __Pyx_RefNannySetupContext("_faceDiv3D", 0);

  /* "discretize/tree_ext.pyx":904
 *     def _faceDiv3D(self):
 *         cdef:
 *             np.int64_t[:] I = np.empty(self.nC*6, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             np.int64_t[:] J = np.empty(self.nC*6, dtype=np.int64)
 *             np.float64_t[:] V = np.empty(self.nC*6, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_int_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":905
 *         cdef:
 *             np.int64_t[:] I = np.empty(self.nC*6, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(self.nC*6, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             np.float64_t[:] V = np.empty(self.nC*6, dtype=np.float64)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_5, __pyx_int_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":906
 *             np.int64_t[:] I = np.empty(self.nC*6, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(self.nC*6, dtype=np.int64)
 *             np.float64_t[:] V = np.empty(self.nC*6, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *             np.int64_t i = 0
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_int_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":908
 *             np.float64_t[:] V = np.empty(self.nC*6, dtype=np.float64)
 * 
 *             np.int64_t i = 0             # <<<<<<<<<<<<<<
 *             Face *faces[6]
 *             np.int64_t offset1 = self.tree.faces_x.size()
 */
  __pyx_v_i = 0;

  /* "discretize/tree_ext.pyx":910
 *             np.int64_t i = 0
 *             Face *faces[6]
 *             np.int64_t offset1 = self.tree.faces_x.size()             # <<<<<<<<<<<<<<
 *             np.int64_t offset2 = offset1 + self.tree.faces_y.size()
 *             double volume, fx_area, fy_area, fz_area
 */
  __pyx_v_offset1 = __pyx_v_self->tree->faces_x.size();

  /* "discretize/tree_ext.pyx":911
 *             Face *faces[6]
 *             np.int64_t offset1 = self.tree.faces_x.size()
 *             np.int64_t offset2 = offset1 + self.tree.faces_y.size()             # <<<<<<<<<<<<<<
 *             double volume, fx_area, fy_area, fz_area
 * 
 */
  __pyx_v_offset2 = (__pyx_v_offset1 + __pyx_v_self->tree->faces_y.size());

  /* "discretize/tree_ext.pyx":914
 *             double volume, fx_area, fy_area, fz_area
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             faces = cell.faces
 *             i = cell.index
 */
  __pyx_t_9 = &__pyx_v_self->tree->cells;
  __pyx_t_8 = __pyx_t_9->begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_t_9->end())) break;
    __pyx_t_10 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_cell = __pyx_t_10;

    /* "discretize/tree_ext.pyx":915
 * 
 *         for cell in self.tree.cells:
 *             faces = cell.faces             # <<<<<<<<<<<<<<
 *             i = cell.index
 *             I[i*6 : i*6 + 6] = i
 */
    __pyx_t_11 = __pyx_v_cell->faces;
    memcpy(&(__pyx_v_faces[0]), __pyx_t_11, sizeof(__pyx_v_faces[0]) * (6 - 0));

    /* "discretize/tree_ext.pyx":916
 *         for cell in self.tree.cells:
 *             faces = cell.faces
 *             i = cell.index             # <<<<<<<<<<<<<<
 *             I[i*6 : i*6 + 6] = i
 *             J[i*6    ] = faces[0].index #x1 face
 */
    __pyx_t_12 = __pyx_v_cell->index;
    __pyx_v_i = __pyx_t_12;

    /* "discretize/tree_ext.pyx":917
 *             faces = cell.faces
 *             i = cell.index
 *             I[i*6 : i*6 + 6] = i             # <<<<<<<<<<<<<<
 *             J[i*6    ] = faces[0].index #x1 face
 *             J[i*6 + 1] = faces[1].index #x2 face
 */
    __pyx_t_6.data = __pyx_v_I.data;
    __pyx_t_6.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_6, 0);
    __pyx_t_13 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_6,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_13,
    (__pyx_v_i * 6),
    ((__pyx_v_i * 6) + 6),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 917, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_i;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_6.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_6.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_6.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
    __pyx_t_6.memview = NULL;
    __pyx_t_6.data = NULL;

    /* "discretize/tree_ext.pyx":918
 *             i = cell.index
 *             I[i*6 : i*6 + 6] = i
 *             J[i*6    ] = faces[0].index #x1 face             # <<<<<<<<<<<<<<
 *             J[i*6 + 1] = faces[1].index #x2 face
 *             J[i*6 + 2] = faces[2].index + offset1 #y face (add offset1)
 */
    __pyx_t_12 = (__pyx_v_faces[0])->index;
    __pyx_t_14 = (__pyx_v_i * 6);
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_14 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

    /* "discretize/tree_ext.pyx":919
 *             I[i*6 : i*6 + 6] = i
 *             J[i*6    ] = faces[0].index #x1 face
 *             J[i*6 + 1] = faces[1].index #x2 face             # <<<<<<<<<<<<<<
 *             J[i*6 + 2] = faces[2].index + offset1 #y face (add offset1)
 *             J[i*6 + 3] = faces[3].index + offset1 #y face (add offset1)
 */
    __pyx_t_12 = (__pyx_v_faces[1])->index;
    __pyx_t_15 = ((__pyx_v_i * 6) + 1);
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

    /* "discretize/tree_ext.pyx":920
 *             J[i*6    ] = faces[0].index #x1 face
 *             J[i*6 + 1] = faces[1].index #x2 face
 *             J[i*6 + 2] = faces[2].index + offset1 #y face (add offset1)             # <<<<<<<<<<<<<<
 *             J[i*6 + 3] = faces[3].index + offset1 #y face (add offset1)
 *             J[i*6 + 4] = faces[4].index + offset2 #z face (add offset2)
 */
    __pyx_t_16 = ((__pyx_v_i * 6) + 2);
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = ((__pyx_v_faces[2])->index + __pyx_v_offset1);

    /* "discretize/tree_ext.pyx":921
 *             J[i*6 + 1] = faces[1].index #x2 face
 *             J[i*6 + 2] = faces[2].index + offset1 #y face (add offset1)
 *             J[i*6 + 3] = faces[3].index + offset1 #y face (add offset1)             # <<<<<<<<<<<<<<
 *             J[i*6 + 4] = faces[4].index + offset2 #z face (add offset2)
 *             J[i*6 + 5] = faces[5].index + offset2 #z face (add offset2)
 */
    __pyx_t_17 = ((__pyx_v_i * 6) + 3);
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = ((__pyx_v_faces[3])->index + __pyx_v_offset1);

    /* "discretize/tree_ext.pyx":922
 *             J[i*6 + 2] = faces[2].index + offset1 #y face (add offset1)
 *             J[i*6 + 3] = faces[3].index + offset1 #y face (add offset1)
 *             J[i*6 + 4] = faces[4].index + offset2 #z face (add offset2)             # <<<<<<<<<<<<<<
 *             J[i*6 + 5] = faces[5].index + offset2 #z face (add offset2)
 * 
 */
    __pyx_t_18 = ((__pyx_v_i * 6) + 4);
    if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_18 * __pyx_v_J.strides[0]) )) = ((__pyx_v_faces[4])->index + __pyx_v_offset2);

    /* "discretize/tree_ext.pyx":923
 *             J[i*6 + 3] = faces[3].index + offset1 #y face (add offset1)
 *             J[i*6 + 4] = faces[4].index + offset2 #z face (add offset2)
 *             J[i*6 + 5] = faces[5].index + offset2 #z face (add offset2)             # <<<<<<<<<<<<<<
 * 
 *             volume = cell.volume
 */
    __pyx_t_19 = ((__pyx_v_i * 6) + 5);
    if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_19 * __pyx_v_J.strides[0]) )) = ((__pyx_v_faces[5])->index + __pyx_v_offset2);

    /* "discretize/tree_ext.pyx":925
 *             J[i*6 + 5] = faces[5].index + offset2 #z face (add offset2)
 * 
 *             volume = cell.volume             # <<<<<<<<<<<<<<
 *             fx_area = faces[0].area
 *             fy_area = faces[2].area
 */
    __pyx_t_20 = __pyx_v_cell->volume;
    __pyx_v_volume = __pyx_t_20;

    /* "discretize/tree_ext.pyx":926
 * 
 *             volume = cell.volume
 *             fx_area = faces[0].area             # <<<<<<<<<<<<<<
 *             fy_area = faces[2].area
 *             fz_area = faces[4].area
 */
    __pyx_t_20 = (__pyx_v_faces[0])->area;
    __pyx_v_fx_area = __pyx_t_20;

    /* "discretize/tree_ext.pyx":927
 *             volume = cell.volume
 *             fx_area = faces[0].area
 *             fy_area = faces[2].area             # <<<<<<<<<<<<<<
 *             fz_area = faces[4].area
 *             V[i*6    ] = -fx_area/volume
 */
    __pyx_t_20 = (__pyx_v_faces[2])->area;
    __pyx_v_fy_area = __pyx_t_20;

    /* "discretize/tree_ext.pyx":928
 *             fx_area = faces[0].area
 *             fy_area = faces[2].area
 *             fz_area = faces[4].area             # <<<<<<<<<<<<<<
 *             V[i*6    ] = -fx_area/volume
 *             V[i*6 + 1] =  fx_area/volume
 */
    __pyx_t_20 = (__pyx_v_faces[4])->area;
    __pyx_v_fz_area = __pyx_t_20;

    /* "discretize/tree_ext.pyx":929
 *             fy_area = faces[2].area
 *             fz_area = faces[4].area
 *             V[i*6    ] = -fx_area/volume             # <<<<<<<<<<<<<<
 *             V[i*6 + 1] =  fx_area/volume
 *             V[i*6 + 2] = -fy_area/volume
 */
    __pyx_t_21 = (__pyx_v_i * 6);
    if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_21 * __pyx_v_V.strides[0]) )) = ((-__pyx_v_fx_area) / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":930
 *             fz_area = faces[4].area
 *             V[i*6    ] = -fx_area/volume
 *             V[i*6 + 1] =  fx_area/volume             # <<<<<<<<<<<<<<
 *             V[i*6 + 2] = -fy_area/volume
 *             V[i*6 + 3] =  fy_area/volume
 */
    __pyx_t_22 = ((__pyx_v_i * 6) + 1);
    if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_22 * __pyx_v_V.strides[0]) )) = (__pyx_v_fx_area / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":931
 *             V[i*6    ] = -fx_area/volume
 *             V[i*6 + 1] =  fx_area/volume
 *             V[i*6 + 2] = -fy_area/volume             # <<<<<<<<<<<<<<
 *             V[i*6 + 3] =  fy_area/volume
 *             V[i*6 + 4] = -fz_area/volume
 */
    __pyx_t_23 = ((__pyx_v_i * 6) + 2);
    if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_23 * __pyx_v_V.strides[0]) )) = ((-__pyx_v_fy_area) / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":932
 *             V[i*6 + 1] =  fx_area/volume
 *             V[i*6 + 2] = -fy_area/volume
 *             V[i*6 + 3] =  fy_area/volume             # <<<<<<<<<<<<<<
 *             V[i*6 + 4] = -fz_area/volume
 *             V[i*6 + 5] =  fz_area/volume
 */
    __pyx_t_24 = ((__pyx_v_i * 6) + 3);
    if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_24 * __pyx_v_V.strides[0]) )) = (__pyx_v_fy_area / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":933
 *             V[i*6 + 2] = -fy_area/volume
 *             V[i*6 + 3] =  fy_area/volume
 *             V[i*6 + 4] = -fz_area/volume             # <<<<<<<<<<<<<<
 *             V[i*6 + 5] =  fz_area/volume
 *         return sp.csr_matrix((V, (I, J)))
 */
    __pyx_t_25 = ((__pyx_v_i * 6) + 4);
    if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_25 * __pyx_v_V.strides[0]) )) = ((-__pyx_v_fz_area) / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":934
 *             V[i*6 + 3] =  fy_area/volume
 *             V[i*6 + 4] = -fz_area/volume
 *             V[i*6 + 5] =  fz_area/volume             # <<<<<<<<<<<<<<
 *         return sp.csr_matrix((V, (I, J)))
 * 
 */
    __pyx_t_26 = ((__pyx_v_i * 6) + 5);
    if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_26 * __pyx_v_V.strides[0]) )) = (__pyx_v_fz_area / __pyx_v_volume);

    /* "discretize/tree_ext.pyx":914
 *             double volume, fx_area, fy_area, fz_area
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             faces = cell.faces
 *             i = cell.index
 */
  }

  /* "discretize/tree_ext.pyx":935
 *             V[i*6 + 4] = -fz_area/volume
 *             V[i*6 + 5] =  fz_area/volume
 *         return sp.csr_matrix((V, (I, J)))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_27 = PyTuple_New(2); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_27, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_27);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_27);
  __pyx_t_5 = 0;
  __pyx_t_27 = 0;
  __pyx_t_27 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_27)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_27);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_27) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_27, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_27, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_27); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_27); __pyx_t_27 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":902
 *     @cython.cdivision(True)
 *     @cython.boundscheck(False)
 *     def _faceDiv3D(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             np.int64_t[:] I = np.empty(self.nC*6, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._faceDiv3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":940
 *     @cython.cdivision(True)
 *     @cython.boundscheck(False)
 *     def edgeCurl(self):             # <<<<<<<<<<<<<<
 *         if self._edgeCurl is not None:
 *             return self._edgeCurl
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8edgeCurl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8edgeCurl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8edgeCurl___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8edgeCurl___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  CYTHON_UNUSED int_t __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  int_t __pyx_v_ii;
  int_t __pyx_v_face_offset_y;
  int_t __pyx_v_face_offset_z;
  int_t __pyx_v_edge_offset_y;
  int_t __pyx_v_edge_offset_z;
  double __pyx_v_area;
  std::pair<int_t,Face *>  __pyx_v_it;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_R = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Face *> ::iterator __pyx_t_11;
  face_map_t *__pyx_t_12;
  std::pair<int_t,Face *>  __pyx_t_13;
  Face *__pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  double __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  __Pyx_memviewslice __pyx_t_25 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  __Pyx_memviewslice __pyx_t_34 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  Py_ssize_t __pyx_t_40;
  Py_ssize_t __pyx_t_41;
  Py_ssize_t __pyx_t_42;
  PyObject *__pyx_t_43 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":941
 *     @cython.boundscheck(False)
 *     def edgeCurl(self):
 *         if self._edgeCurl is not None:             # <<<<<<<<<<<<<<
 *             return self._edgeCurl
 *         cdef:
 */
  __pyx_t_1 = (__pyx_v_self->_edgeCurl != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":942
 *     def edgeCurl(self):
 *         if self._edgeCurl is not None:
 *             return self._edgeCurl             # <<<<<<<<<<<<<<
 *         cdef:
 *             int_t dim = self._dim
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_edgeCurl);
    __pyx_r = __pyx_v_self->_edgeCurl;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":941
 *     @cython.boundscheck(False)
 *     def edgeCurl(self):
 *         if self._edgeCurl is not None:             # <<<<<<<<<<<<<<
 *             return self._edgeCurl
 *         cdef:
 */
  }

  /* "discretize/tree_ext.pyx":944
 *             return self._edgeCurl
 *         cdef:
 *             int_t dim = self._dim             # <<<<<<<<<<<<<<
 *             np.int64_t[:] I = np.empty(4*self.nF, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(4*self.nF, dtype=np.int64)
 */
  __pyx_t_3 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_3;

  /* "discretize/tree_ext.pyx":945
 *         cdef:
 *             int_t dim = self._dim
 *             np.int64_t[:] I = np.empty(4*self.nF, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             np.int64_t[:] J = np.empty(4*self.nF, dtype=np.int64)
 *             np.float64_t[:] V = np.empty(4*self.nF, dtype=np.float64)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nF); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyNumber_Multiply(__pyx_int_4, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_8);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_I = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":946
 *             int_t dim = self._dim
 *             np.int64_t[:] I = np.empty(4*self.nF, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(4*self.nF, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             np.float64_t[:] V = np.empty(4*self.nF, dtype=np.float64)
 *             Face *face
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nF); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_4, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_J = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":947
 *             np.int64_t[:] I = np.empty(4*self.nF, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(4*self.nF, dtype=np.int64)
 *             np.float64_t[:] V = np.empty(4*self.nF, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             Face *face
 *             int_t ii
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nF); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyNumber_Multiply(__pyx_int_4, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_V = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "discretize/tree_ext.pyx":950
 *             Face *face
 *             int_t ii
 *             int_t face_offset_y = self.nFx             # <<<<<<<<<<<<<<
 *             int_t face_offset_z = self.nFx + self.nFy
 *             int_t edge_offset_y = self.ntEx
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyInt_As_int_t(__pyx_t_5); if (unlikely((__pyx_t_3 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_face_offset_y = __pyx_t_3;

  /* "discretize/tree_ext.pyx":951
 *             int_t ii
 *             int_t face_offset_y = self.nFx
 *             int_t face_offset_z = self.nFx + self.nFy             # <<<<<<<<<<<<<<
 *             int_t edge_offset_y = self.ntEx
 *             int_t edge_offset_z = self.ntEx + self.ntEy
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int_t(__pyx_t_7); if (unlikely((__pyx_t_3 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_face_offset_z = __pyx_t_3;

  /* "discretize/tree_ext.pyx":952
 *             int_t face_offset_y = self.nFx
 *             int_t face_offset_z = self.nFx + self.nFy
 *             int_t edge_offset_y = self.ntEx             # <<<<<<<<<<<<<<
 *             int_t edge_offset_z = self.ntEx + self.ntEy
 *             double area
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyInt_As_int_t(__pyx_t_7); if (unlikely((__pyx_t_3 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_edge_offset_y = __pyx_t_3;

  /* "discretize/tree_ext.pyx":953
 *             int_t face_offset_z = self.nFx + self.nFy
 *             int_t edge_offset_y = self.ntEx
 *             int_t edge_offset_z = self.ntEx + self.ntEy             # <<<<<<<<<<<<<<
 *             double area
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyNumber_Add(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int_t(__pyx_t_5); if (unlikely((__pyx_t_3 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_edge_offset_z = __pyx_t_3;

  /* "discretize/tree_ext.pyx":956
 *             double area
 * 
 *         for it in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             if face.hanging:
 */
  __pyx_t_12 = &__pyx_v_self->tree->faces_x;
  __pyx_t_11 = __pyx_t_12->begin();
  for (;;) {
    if (!(__pyx_t_11 != __pyx_t_12->end())) break;
    __pyx_t_13 = *__pyx_t_11;
    ++__pyx_t_11;
    __pyx_v_it = __pyx_t_13;

    /* "discretize/tree_ext.pyx":957
 * 
 *         for it in self.tree.faces_x:
 *             face = it.second             # <<<<<<<<<<<<<<
 *             if face.hanging:
 *                 continue
 */
    __pyx_t_14 = __pyx_v_it.second;
    __pyx_v_face = __pyx_t_14;

    /* "discretize/tree_ext.pyx":958
 *         for it in self.tree.faces_x:
 *             face = it.second
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 continue
 *             ii = face.index
 */
    __pyx_t_2 = (__pyx_v_face->hanging != 0);
    if (__pyx_t_2) {

      /* "discretize/tree_ext.pyx":959
 *             face = it.second
 *             if face.hanging:
 *                 continue             # <<<<<<<<<<<<<<
 *             ii = face.index
 *             I[4*ii : 4*ii + 4] = ii
 */
      goto __pyx_L4_continue;

      /* "discretize/tree_ext.pyx":958
 *         for it in self.tree.faces_x:
 *             face = it.second
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 continue
 *             ii = face.index
 */
    }

    /* "discretize/tree_ext.pyx":960
 *             if face.hanging:
 *                 continue
 *             ii = face.index             # <<<<<<<<<<<<<<
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z
 */
    __pyx_t_3 = __pyx_v_face->index;
    __pyx_v_ii = __pyx_t_3;

    /* "discretize/tree_ext.pyx":961
 *                 continue
 *             ii = face.index
 *             I[4*ii : 4*ii + 4] = ii             # <<<<<<<<<<<<<<
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z
 *             J[4*ii + 1] = face.edges[1].index + edge_offset_y
 */
    __pyx_t_9.data = __pyx_v_I.data;
    __pyx_t_9.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_9, 0);
    __pyx_t_15 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_9,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_15,
    (4 * __pyx_v_ii),
    ((4 * __pyx_v_ii) + 4),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 961, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_9.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_9.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_9.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":962
 *             ii = face.index
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z             # <<<<<<<<<<<<<<
 *             J[4*ii + 1] = face.edges[1].index + edge_offset_y
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_z
 */
    __pyx_t_16 = (4 * __pyx_v_ii);
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = ((__pyx_v_face->edges[0])->index + __pyx_v_edge_offset_z);

    /* "discretize/tree_ext.pyx":963
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z
 *             J[4*ii + 1] = face.edges[1].index + edge_offset_y             # <<<<<<<<<<<<<<
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_z
 *             J[4*ii + 3] = face.edges[3].index + edge_offset_y
 */
    __pyx_t_17 = ((4 * __pyx_v_ii) + 1);
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = ((__pyx_v_face->edges[1])->index + __pyx_v_edge_offset_y);

    /* "discretize/tree_ext.pyx":964
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z
 *             J[4*ii + 1] = face.edges[1].index + edge_offset_y
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_z             # <<<<<<<<<<<<<<
 *             J[4*ii + 3] = face.edges[3].index + edge_offset_y
 * 
 */
    __pyx_t_18 = ((4 * __pyx_v_ii) + 2);
    if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_18 * __pyx_v_J.strides[0]) )) = ((__pyx_v_face->edges[2])->index + __pyx_v_edge_offset_z);

    /* "discretize/tree_ext.pyx":965
 *             J[4*ii + 1] = face.edges[1].index + edge_offset_y
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_z
 *             J[4*ii + 3] = face.edges[3].index + edge_offset_y             # <<<<<<<<<<<<<<
 * 
 *             area = face.area
 */
    __pyx_t_19 = ((4 * __pyx_v_ii) + 3);
    if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_19 * __pyx_v_J.strides[0]) )) = ((__pyx_v_face->edges[3])->index + __pyx_v_edge_offset_y);

    /* "discretize/tree_ext.pyx":967
 *             J[4*ii + 3] = face.edges[3].index + edge_offset_y
 * 
 *             area = face.area             # <<<<<<<<<<<<<<
 *             V[4*ii    ] = -face.edges[0].length/area
 *             V[4*ii + 1] = -face.edges[1].length/area
 */
    __pyx_t_20 = __pyx_v_face->area;
    __pyx_v_area = __pyx_t_20;

    /* "discretize/tree_ext.pyx":968
 * 
 *             area = face.area
 *             V[4*ii    ] = -face.edges[0].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 1] = -face.edges[1].length/area
 *             V[4*ii + 2] =  face.edges[2].length/area
 */
    __pyx_t_21 = (4 * __pyx_v_ii);
    if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_21 * __pyx_v_V.strides[0]) )) = ((-(__pyx_v_face->edges[0])->length) / __pyx_v_area);

    /* "discretize/tree_ext.pyx":969
 *             area = face.area
 *             V[4*ii    ] = -face.edges[0].length/area
 *             V[4*ii + 1] = -face.edges[1].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 2] =  face.edges[2].length/area
 *             V[4*ii + 3] =  face.edges[3].length/area
 */
    __pyx_t_22 = ((4 * __pyx_v_ii) + 1);
    if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_22 * __pyx_v_V.strides[0]) )) = ((-(__pyx_v_face->edges[1])->length) / __pyx_v_area);

    /* "discretize/tree_ext.pyx":970
 *             V[4*ii    ] = -face.edges[0].length/area
 *             V[4*ii + 1] = -face.edges[1].length/area
 *             V[4*ii + 2] =  face.edges[2].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 3] =  face.edges[3].length/area
 * 
 */
    __pyx_t_23 = ((4 * __pyx_v_ii) + 2);
    if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_23 * __pyx_v_V.strides[0]) )) = ((__pyx_v_face->edges[2])->length / __pyx_v_area);

    /* "discretize/tree_ext.pyx":971
 *             V[4*ii + 1] = -face.edges[1].length/area
 *             V[4*ii + 2] =  face.edges[2].length/area
 *             V[4*ii + 3] =  face.edges[3].length/area             # <<<<<<<<<<<<<<
 * 
 *         for it in self.tree.faces_y:
 */
    __pyx_t_24 = ((4 * __pyx_v_ii) + 3);
    if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_24 * __pyx_v_V.strides[0]) )) = ((__pyx_v_face->edges[3])->length / __pyx_v_area);

    /* "discretize/tree_ext.pyx":956
 *             double area
 * 
 *         for it in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             if face.hanging:
 */
    __pyx_L4_continue:;
  }

  /* "discretize/tree_ext.pyx":973
 *             V[4*ii + 3] =  face.edges[3].length/area
 * 
 *         for it in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             if face.hanging:
 */
  __pyx_t_12 = &__pyx_v_self->tree->faces_y;
  __pyx_t_11 = __pyx_t_12->begin();
  for (;;) {
    if (!(__pyx_t_11 != __pyx_t_12->end())) break;
    __pyx_t_13 = *__pyx_t_11;
    ++__pyx_t_11;
    __pyx_v_it = __pyx_t_13;

    /* "discretize/tree_ext.pyx":974
 * 
 *         for it in self.tree.faces_y:
 *             face = it.second             # <<<<<<<<<<<<<<
 *             if face.hanging:
 *                 continue
 */
    __pyx_t_14 = __pyx_v_it.second;
    __pyx_v_face = __pyx_t_14;

    /* "discretize/tree_ext.pyx":975
 *         for it in self.tree.faces_y:
 *             face = it.second
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 continue
 *             ii = face.index + face_offset_y
 */
    __pyx_t_2 = (__pyx_v_face->hanging != 0);
    if (__pyx_t_2) {

      /* "discretize/tree_ext.pyx":976
 *             face = it.second
 *             if face.hanging:
 *                 continue             # <<<<<<<<<<<<<<
 *             ii = face.index + face_offset_y
 *             I[4*ii : 4*ii + 4] = ii
 */
      goto __pyx_L7_continue;

      /* "discretize/tree_ext.pyx":975
 *         for it in self.tree.faces_y:
 *             face = it.second
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 continue
 *             ii = face.index + face_offset_y
 */
    }

    /* "discretize/tree_ext.pyx":977
 *             if face.hanging:
 *                 continue
 *             ii = face.index + face_offset_y             # <<<<<<<<<<<<<<
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z
 */
    __pyx_v_ii = (__pyx_v_face->index + __pyx_v_face_offset_y);

    /* "discretize/tree_ext.pyx":978
 *                 continue
 *             ii = face.index + face_offset_y
 *             I[4*ii : 4*ii + 4] = ii             # <<<<<<<<<<<<<<
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z
 *             J[4*ii + 1] = face.edges[1].index
 */
    __pyx_t_25.data = __pyx_v_I.data;
    __pyx_t_25.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_25, 0);
    __pyx_t_15 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_25,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_15,
    (4 * __pyx_v_ii),
    ((4 * __pyx_v_ii) + 4),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 978, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_25.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_25.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_25.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_25, 1);
    __pyx_t_25.memview = NULL;
    __pyx_t_25.data = NULL;

    /* "discretize/tree_ext.pyx":979
 *             ii = face.index + face_offset_y
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z             # <<<<<<<<<<<<<<
 *             J[4*ii + 1] = face.edges[1].index
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_z
 */
    __pyx_t_26 = (4 * __pyx_v_ii);
    if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_26 * __pyx_v_J.strides[0]) )) = ((__pyx_v_face->edges[0])->index + __pyx_v_edge_offset_z);

    /* "discretize/tree_ext.pyx":980
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z
 *             J[4*ii + 1] = face.edges[1].index             # <<<<<<<<<<<<<<
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_z
 *             J[4*ii + 3] = face.edges[3].index
 */
    __pyx_t_3 = (__pyx_v_face->edges[1])->index;
    __pyx_t_27 = ((4 * __pyx_v_ii) + 1);
    if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_27 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

    /* "discretize/tree_ext.pyx":981
 *             J[4*ii    ] = face.edges[0].index + edge_offset_z
 *             J[4*ii + 1] = face.edges[1].index
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_z             # <<<<<<<<<<<<<<
 *             J[4*ii + 3] = face.edges[3].index
 * 
 */
    __pyx_t_28 = ((4 * __pyx_v_ii) + 2);
    if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_28 * __pyx_v_J.strides[0]) )) = ((__pyx_v_face->edges[2])->index + __pyx_v_edge_offset_z);

    /* "discretize/tree_ext.pyx":982
 *             J[4*ii + 1] = face.edges[1].index
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_z
 *             J[4*ii + 3] = face.edges[3].index             # <<<<<<<<<<<<<<
 * 
 *             area = face.area
 */
    __pyx_t_3 = (__pyx_v_face->edges[3])->index;
    __pyx_t_29 = ((4 * __pyx_v_ii) + 3);
    if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_29 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

    /* "discretize/tree_ext.pyx":984
 *             J[4*ii + 3] = face.edges[3].index
 * 
 *             area = face.area             # <<<<<<<<<<<<<<
 *             V[4*ii    ] =  face.edges[0].length/area
 *             V[4*ii + 1] =  face.edges[1].length/area
 */
    __pyx_t_20 = __pyx_v_face->area;
    __pyx_v_area = __pyx_t_20;

    /* "discretize/tree_ext.pyx":985
 * 
 *             area = face.area
 *             V[4*ii    ] =  face.edges[0].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 1] =  face.edges[1].length/area
 *             V[4*ii + 2] = -face.edges[2].length/area
 */
    __pyx_t_30 = (4 * __pyx_v_ii);
    if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_30 * __pyx_v_V.strides[0]) )) = ((__pyx_v_face->edges[0])->length / __pyx_v_area);

    /* "discretize/tree_ext.pyx":986
 *             area = face.area
 *             V[4*ii    ] =  face.edges[0].length/area
 *             V[4*ii + 1] =  face.edges[1].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 2] = -face.edges[2].length/area
 *             V[4*ii + 3] = -face.edges[3].length/area
 */
    __pyx_t_31 = ((4 * __pyx_v_ii) + 1);
    if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_31 * __pyx_v_V.strides[0]) )) = ((__pyx_v_face->edges[1])->length / __pyx_v_area);

    /* "discretize/tree_ext.pyx":987
 *             V[4*ii    ] =  face.edges[0].length/area
 *             V[4*ii + 1] =  face.edges[1].length/area
 *             V[4*ii + 2] = -face.edges[2].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 3] = -face.edges[3].length/area
 * 
 */
    __pyx_t_32 = ((4 * __pyx_v_ii) + 2);
    if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_32 * __pyx_v_V.strides[0]) )) = ((-(__pyx_v_face->edges[2])->length) / __pyx_v_area);

    /* "discretize/tree_ext.pyx":988
 *             V[4*ii + 1] =  face.edges[1].length/area
 *             V[4*ii + 2] = -face.edges[2].length/area
 *             V[4*ii + 3] = -face.edges[3].length/area             # <<<<<<<<<<<<<<
 * 
 *         for it in self.tree.faces_z:
 */
    __pyx_t_33 = ((4 * __pyx_v_ii) + 3);
    if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_33 * __pyx_v_V.strides[0]) )) = ((-(__pyx_v_face->edges[3])->length) / __pyx_v_area);

    /* "discretize/tree_ext.pyx":973
 *             V[4*ii + 3] =  face.edges[3].length/area
 * 
 *         for it in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             if face.hanging:
 */
    __pyx_L7_continue:;
  }

  /* "discretize/tree_ext.pyx":990
 *             V[4*ii + 3] = -face.edges[3].length/area
 * 
 *         for it in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             if face.hanging:
 */
  __pyx_t_12 = &__pyx_v_self->tree->faces_z;
  __pyx_t_11 = __pyx_t_12->begin();
  for (;;) {
    if (!(__pyx_t_11 != __pyx_t_12->end())) break;
    __pyx_t_13 = *__pyx_t_11;
    ++__pyx_t_11;
    __pyx_v_it = __pyx_t_13;

    /* "discretize/tree_ext.pyx":991
 * 
 *         for it in self.tree.faces_z:
 *             face = it.second             # <<<<<<<<<<<<<<
 *             if face.hanging:
 *                 continue
 */
    __pyx_t_14 = __pyx_v_it.second;
    __pyx_v_face = __pyx_t_14;

    /* "discretize/tree_ext.pyx":992
 *         for it in self.tree.faces_z:
 *             face = it.second
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 continue
 *             ii = face.index + face_offset_z
 */
    __pyx_t_2 = (__pyx_v_face->hanging != 0);
    if (__pyx_t_2) {

      /* "discretize/tree_ext.pyx":993
 *             face = it.second
 *             if face.hanging:
 *                 continue             # <<<<<<<<<<<<<<
 *             ii = face.index + face_offset_z
 *             I[4*ii : 4*ii + 4] = ii
 */
      goto __pyx_L10_continue;

      /* "discretize/tree_ext.pyx":992
 *         for it in self.tree.faces_z:
 *             face = it.second
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 continue
 *             ii = face.index + face_offset_z
 */
    }

    /* "discretize/tree_ext.pyx":994
 *             if face.hanging:
 *                 continue
 *             ii = face.index + face_offset_z             # <<<<<<<<<<<<<<
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_y
 */
    __pyx_v_ii = (__pyx_v_face->index + __pyx_v_face_offset_z);

    /* "discretize/tree_ext.pyx":995
 *                 continue
 *             ii = face.index + face_offset_z
 *             I[4*ii : 4*ii + 4] = ii             # <<<<<<<<<<<<<<
 *             J[4*ii    ] = face.edges[0].index + edge_offset_y
 *             J[4*ii + 1] = face.edges[1].index
 */
    __pyx_t_34.data = __pyx_v_I.data;
    __pyx_t_34.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_34, 0);
    __pyx_t_15 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_34,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_15,
    (4 * __pyx_v_ii),
    ((4 * __pyx_v_ii) + 4),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 995, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_34.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_34.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_34.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_34, 1);
    __pyx_t_34.memview = NULL;
    __pyx_t_34.data = NULL;

    /* "discretize/tree_ext.pyx":996
 *             ii = face.index + face_offset_z
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_y             # <<<<<<<<<<<<<<
 *             J[4*ii + 1] = face.edges[1].index
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_y
 */
    __pyx_t_35 = (4 * __pyx_v_ii);
    if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_35 * __pyx_v_J.strides[0]) )) = ((__pyx_v_face->edges[0])->index + __pyx_v_edge_offset_y);

    /* "discretize/tree_ext.pyx":997
 *             I[4*ii : 4*ii + 4] = ii
 *             J[4*ii    ] = face.edges[0].index + edge_offset_y
 *             J[4*ii + 1] = face.edges[1].index             # <<<<<<<<<<<<<<
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_y
 *             J[4*ii + 3] = face.edges[3].index
 */
    __pyx_t_3 = (__pyx_v_face->edges[1])->index;
    __pyx_t_36 = ((4 * __pyx_v_ii) + 1);
    if (__pyx_t_36 < 0) __pyx_t_36 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_36 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

    /* "discretize/tree_ext.pyx":998
 *             J[4*ii    ] = face.edges[0].index + edge_offset_y
 *             J[4*ii + 1] = face.edges[1].index
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_y             # <<<<<<<<<<<<<<
 *             J[4*ii + 3] = face.edges[3].index
 * 
 */
    __pyx_t_37 = ((4 * __pyx_v_ii) + 2);
    if (__pyx_t_37 < 0) __pyx_t_37 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_37 * __pyx_v_J.strides[0]) )) = ((__pyx_v_face->edges[2])->index + __pyx_v_edge_offset_y);

    /* "discretize/tree_ext.pyx":999
 *             J[4*ii + 1] = face.edges[1].index
 *             J[4*ii + 2] = face.edges[2].index + edge_offset_y
 *             J[4*ii + 3] = face.edges[3].index             # <<<<<<<<<<<<<<
 * 
 *             area = face.area
 */
    __pyx_t_3 = (__pyx_v_face->edges[3])->index;
    __pyx_t_38 = ((4 * __pyx_v_ii) + 3);
    if (__pyx_t_38 < 0) __pyx_t_38 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_38 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

    /* "discretize/tree_ext.pyx":1001
 *             J[4*ii + 3] = face.edges[3].index
 * 
 *             area = face.area             # <<<<<<<<<<<<<<
 *             V[4*ii    ] = -face.edges[0].length/area
 *             V[4*ii + 1] = -face.edges[1].length/area
 */
    __pyx_t_20 = __pyx_v_face->area;
    __pyx_v_area = __pyx_t_20;

    /* "discretize/tree_ext.pyx":1002
 * 
 *             area = face.area
 *             V[4*ii    ] = -face.edges[0].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 1] = -face.edges[1].length/area
 *             V[4*ii + 2] =  face.edges[2].length/area
 */
    __pyx_t_39 = (4 * __pyx_v_ii);
    if (__pyx_t_39 < 0) __pyx_t_39 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_39 * __pyx_v_V.strides[0]) )) = ((-(__pyx_v_face->edges[0])->length) / __pyx_v_area);

    /* "discretize/tree_ext.pyx":1003
 *             area = face.area
 *             V[4*ii    ] = -face.edges[0].length/area
 *             V[4*ii + 1] = -face.edges[1].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 2] =  face.edges[2].length/area
 *             V[4*ii + 3] =  face.edges[3].length/area
 */
    __pyx_t_40 = ((4 * __pyx_v_ii) + 1);
    if (__pyx_t_40 < 0) __pyx_t_40 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_40 * __pyx_v_V.strides[0]) )) = ((-(__pyx_v_face->edges[1])->length) / __pyx_v_area);

    /* "discretize/tree_ext.pyx":1004
 *             V[4*ii    ] = -face.edges[0].length/area
 *             V[4*ii + 1] = -face.edges[1].length/area
 *             V[4*ii + 2] =  face.edges[2].length/area             # <<<<<<<<<<<<<<
 *             V[4*ii + 3] =  face.edges[3].length/area
 * 
 */
    __pyx_t_41 = ((4 * __pyx_v_ii) + 2);
    if (__pyx_t_41 < 0) __pyx_t_41 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_41 * __pyx_v_V.strides[0]) )) = ((__pyx_v_face->edges[2])->length / __pyx_v_area);

    /* "discretize/tree_ext.pyx":1005
 *             V[4*ii + 1] = -face.edges[1].length/area
 *             V[4*ii + 2] =  face.edges[2].length/area
 *             V[4*ii + 3] =  face.edges[3].length/area             # <<<<<<<<<<<<<<
 * 
 *         C = sp.csr_matrix((V, (I, J)),shape=(self.nF, self.ntE))
 */
    __pyx_t_42 = ((4 * __pyx_v_ii) + 3);
    if (__pyx_t_42 < 0) __pyx_t_42 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_42 * __pyx_v_V.strides[0]) )) = ((__pyx_v_face->edges[3])->length / __pyx_v_area);

    /* "discretize/tree_ext.pyx":990
 *             V[4*ii + 3] = -face.edges[3].length/area
 * 
 *         for it in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             if face.hanging:
 */
    __pyx_L10_continue:;
  }

  /* "discretize/tree_ext.pyx":1007
 *             V[4*ii + 3] =  face.edges[3].length/area
 * 
 *         C = sp.csr_matrix((V, (I, J)),shape=(self.nF, self.ntE))             # <<<<<<<<<<<<<<
 *         R = self._deflate_edges()
 *         self._edgeCurl = C*R
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __pyx_t_7 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nF); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_43 = PyTuple_New(2); if (unlikely(!__pyx_t_43)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_43, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_43, 1, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_shape, __pyx_t_43) < 0) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_43); __pyx_t_43 = 0;
  __pyx_t_43 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_43)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_C = __pyx_t_43;
  __pyx_t_43 = 0;

  /* "discretize/tree_ext.pyx":1008
 * 
 *         C = sp.csr_matrix((V, (I, J)),shape=(self.nF, self.ntE))
 *         R = self._deflate_edges()             # <<<<<<<<<<<<<<
 *         self._edgeCurl = C*R
 *         return self._edgeCurl
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_43 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_43)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_43 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_43)) __PYX_ERR(0, 1008, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_R = __pyx_t_43;
  __pyx_t_43 = 0;

  /* "discretize/tree_ext.pyx":1009
 *         C = sp.csr_matrix((V, (I, J)),shape=(self.nF, self.ntE))
 *         R = self._deflate_edges()
 *         self._edgeCurl = C*R             # <<<<<<<<<<<<<<
 *         return self._edgeCurl
 * 
 */
  __pyx_t_43 = PyNumber_Multiply(__pyx_v_C, __pyx_v_R); if (unlikely(!__pyx_t_43)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_GIVEREF(__pyx_t_43);
  __Pyx_GOTREF(__pyx_v_self->_edgeCurl);
  __Pyx_DECREF(__pyx_v_self->_edgeCurl);
  __pyx_v_self->_edgeCurl = __pyx_t_43;
  __pyx_t_43 = 0;

  /* "discretize/tree_ext.pyx":1010
 *         R = self._deflate_edges()
 *         self._edgeCurl = C*R
 *         return self._edgeCurl             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_edgeCurl);
  __pyx_r = __pyx_v_self->_edgeCurl;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":940
 *     @cython.cdivision(True)
 *     @cython.boundscheck(False)
 *     def edgeCurl(self):             # <<<<<<<<<<<<<<
 *         if self._edgeCurl is not None:
 *             return self._edgeCurl
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_25, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_34, 1);
  __Pyx_XDECREF(__pyx_t_43);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.edgeCurl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_R);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1015
 *     @cython.cdivision(True)
 *     @cython.boundscheck(False)
 *     def nodalGrad(self):             # <<<<<<<<<<<<<<
 *         if self._nodalGrad is not None:
 *             return self._nodalGrad
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_9nodalGrad_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_9nodalGrad_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_9nodalGrad___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_9nodalGrad___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  int_t __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  double __pyx_v_length;
  int_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_offset1;
  __pyx_t_5numpy_int64_t __pyx_v_offset2;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_v_Rn = NULL;
  PyObject *__pyx_v_G = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_t_11;
  std::map<int_t,Edge *> ::iterator __pyx_t_12;
  edge_map_t *__pyx_t_13;
  std::pair<int_t,Edge *>  __pyx_t_14;
  Edge *__pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  double __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __Pyx_memviewslice __pyx_t_22 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  __Pyx_memviewslice __pyx_t_27 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  PyObject *__pyx_t_32 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1016
 *     @cython.boundscheck(False)
 *     def nodalGrad(self):
 *         if self._nodalGrad is not None:             # <<<<<<<<<<<<<<
 *             return self._nodalGrad
 *         cdef:
 */
  __pyx_t_1 = (__pyx_v_self->_nodalGrad != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1017
 *     def nodalGrad(self):
 *         if self._nodalGrad is not None:
 *             return self._nodalGrad             # <<<<<<<<<<<<<<
 *         cdef:
 *             int_t dim = self._dim
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_nodalGrad);
    __pyx_r = __pyx_v_self->_nodalGrad;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1016
 *     @cython.boundscheck(False)
 *     def nodalGrad(self):
 *         if self._nodalGrad is not None:             # <<<<<<<<<<<<<<
 *             return self._nodalGrad
 *         cdef:
 */
  }

  /* "discretize/tree_ext.pyx":1019
 *             return self._nodalGrad
 *         cdef:
 *             int_t dim = self._dim             # <<<<<<<<<<<<<<
 *             np.int64_t[:] I = np.empty(2*self.nE, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(2*self.nE, dtype=np.int64)
 */
  __pyx_t_3 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_3;

  /* "discretize/tree_ext.pyx":1020
 *         cdef:
 *             int_t dim = self._dim
 *             np.int64_t[:] I = np.empty(2*self.nE, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             np.int64_t[:] J = np.empty(2*self.nE, dtype=np.int64)
 *             np.float64_t[:] V = np.empty(2*self.nE, dtype=np.float64)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int64); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_8);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_I = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":1021
 *             int_t dim = self._dim
 *             np.int64_t[:] I = np.empty(2*self.nE, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(2*self.nE, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             np.float64_t[:] V = np.empty(2*self.nE, dtype=np.float64)
 *             Edge *edge
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_2, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_J = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":1022
 *             np.int64_t[:] I = np.empty(2*self.nE, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(2*self.nE, dtype=np.int64)
 *             np.float64_t[:] V = np.empty(2*self.nE, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             Edge *edge
 *             double length
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyNumber_Multiply(__pyx_int_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_V = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "discretize/tree_ext.pyx":1026
 *             double length
 *             int_t ii
 *             np.int64_t offset1 = self.nEx             # <<<<<<<<<<<<<<
 *             np.int64_t offset2 = offset1 + self.nEy
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyInt_As_npy_int64(__pyx_t_5); if (unlikely((__pyx_t_11 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_offset1 = __pyx_t_11;

  /* "discretize/tree_ext.pyx":1027
 *             int_t ii
 *             np.int64_t offset1 = self.nEx
 *             np.int64_t offset2 = offset1 + self.nEy             # <<<<<<<<<<<<<<
 * 
 *         for it in self.tree.edges_x:
 */
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_offset1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_npy_int64(__pyx_t_7); if (unlikely((__pyx_t_11 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_offset2 = __pyx_t_11;

  /* "discretize/tree_ext.pyx":1029
 *             np.int64_t offset2 = offset1 + self.nEy
 * 
 *         for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             if edge.hanging: continue
 */
  __pyx_t_13 = &__pyx_v_self->tree->edges_x;
  __pyx_t_12 = __pyx_t_13->begin();
  for (;;) {
    if (!(__pyx_t_12 != __pyx_t_13->end())) break;
    __pyx_t_14 = *__pyx_t_12;
    ++__pyx_t_12;
    __pyx_v_it = __pyx_t_14;

    /* "discretize/tree_ext.pyx":1030
 * 
 *         for it in self.tree.edges_x:
 *             edge = it.second             # <<<<<<<<<<<<<<
 *             if edge.hanging: continue
 *             ii = edge.index
 */
    __pyx_t_15 = __pyx_v_it.second;
    __pyx_v_edge = __pyx_t_15;

    /* "discretize/tree_ext.pyx":1031
 *         for it in self.tree.edges_x:
 *             edge = it.second
 *             if edge.hanging: continue             # <<<<<<<<<<<<<<
 *             ii = edge.index
 *             I[ii*2 : ii*2 + 2] = ii
 */
    __pyx_t_2 = (__pyx_v_edge->hanging != 0);
    if (__pyx_t_2) {
      goto __pyx_L4_continue;
    }

    /* "discretize/tree_ext.pyx":1032
 *             edge = it.second
 *             if edge.hanging: continue
 *             ii = edge.index             # <<<<<<<<<<<<<<
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = edge.points[0].index
 */
    __pyx_t_3 = __pyx_v_edge->index;
    __pyx_v_ii = __pyx_t_3;

    /* "discretize/tree_ext.pyx":1033
 *             if edge.hanging: continue
 *             ii = edge.index
 *             I[ii*2 : ii*2 + 2] = ii             # <<<<<<<<<<<<<<
 *             J[ii*2    ] = edge.points[0].index
 *             J[ii*2 + 1] = edge.points[1].index
 */
    __pyx_t_9.data = __pyx_v_I.data;
    __pyx_t_9.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_9, 0);
    __pyx_t_16 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_9,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_16,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1033, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_9.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_9.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_9.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":1034
 *             ii = edge.index
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = edge.points[0].index             # <<<<<<<<<<<<<<
 *             J[ii*2 + 1] = edge.points[1].index
 * 
 */
    __pyx_t_3 = (__pyx_v_edge->points[0])->index;
    __pyx_t_17 = (__pyx_v_ii * 2);
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

    /* "discretize/tree_ext.pyx":1035
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = edge.points[0].index
 *             J[ii*2 + 1] = edge.points[1].index             # <<<<<<<<<<<<<<
 * 
 *             length = edge.length
 */
    __pyx_t_3 = (__pyx_v_edge->points[1])->index;
    __pyx_t_18 = ((__pyx_v_ii * 2) + 1);
    if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_18 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

    /* "discretize/tree_ext.pyx":1037
 *             J[ii*2 + 1] = edge.points[1].index
 * 
 *             length = edge.length             # <<<<<<<<<<<<<<
 *             V[ii*2    ] = -1.0/length
 *             V[ii*2 + 1] =  1.0/length
 */
    __pyx_t_19 = __pyx_v_edge->length;
    __pyx_v_length = __pyx_t_19;

    /* "discretize/tree_ext.pyx":1038
 * 
 *             length = edge.length
 *             V[ii*2    ] = -1.0/length             # <<<<<<<<<<<<<<
 *             V[ii*2 + 1] =  1.0/length
 * 
 */
    __pyx_t_20 = (__pyx_v_ii * 2);
    if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_20 * __pyx_v_V.strides[0]) )) = (-1.0 / __pyx_v_length);

    /* "discretize/tree_ext.pyx":1039
 *             length = edge.length
 *             V[ii*2    ] = -1.0/length
 *             V[ii*2 + 1] =  1.0/length             # <<<<<<<<<<<<<<
 * 
 *         for it in self.tree.edges_y:
 */
    __pyx_t_21 = ((__pyx_v_ii * 2) + 1);
    if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_21 * __pyx_v_V.strides[0]) )) = (1.0 / __pyx_v_length);

    /* "discretize/tree_ext.pyx":1029
 *             np.int64_t offset2 = offset1 + self.nEy
 * 
 *         for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             if edge.hanging: continue
 */
    __pyx_L4_continue:;
  }

  /* "discretize/tree_ext.pyx":1041
 *             V[ii*2 + 1] =  1.0/length
 * 
 *         for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             if edge.hanging: continue
 */
  __pyx_t_13 = &__pyx_v_self->tree->edges_y;
  __pyx_t_12 = __pyx_t_13->begin();
  for (;;) {
    if (!(__pyx_t_12 != __pyx_t_13->end())) break;
    __pyx_t_14 = *__pyx_t_12;
    ++__pyx_t_12;
    __pyx_v_it = __pyx_t_14;

    /* "discretize/tree_ext.pyx":1042
 * 
 *         for it in self.tree.edges_y:
 *             edge = it.second             # <<<<<<<<<<<<<<
 *             if edge.hanging: continue
 *             ii = edge.index + offset1
 */
    __pyx_t_15 = __pyx_v_it.second;
    __pyx_v_edge = __pyx_t_15;

    /* "discretize/tree_ext.pyx":1043
 *         for it in self.tree.edges_y:
 *             edge = it.second
 *             if edge.hanging: continue             # <<<<<<<<<<<<<<
 *             ii = edge.index + offset1
 *             I[ii*2 : ii*2 + 2] = ii
 */
    __pyx_t_2 = (__pyx_v_edge->hanging != 0);
    if (__pyx_t_2) {
      goto __pyx_L7_continue;
    }

    /* "discretize/tree_ext.pyx":1044
 *             edge = it.second
 *             if edge.hanging: continue
 *             ii = edge.index + offset1             # <<<<<<<<<<<<<<
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = edge.points[0].index
 */
    __pyx_v_ii = (__pyx_v_edge->index + __pyx_v_offset1);

    /* "discretize/tree_ext.pyx":1045
 *             if edge.hanging: continue
 *             ii = edge.index + offset1
 *             I[ii*2 : ii*2 + 2] = ii             # <<<<<<<<<<<<<<
 *             J[ii*2    ] = edge.points[0].index
 *             J[ii*2 + 1] = edge.points[1].index
 */
    __pyx_t_22.data = __pyx_v_I.data;
    __pyx_t_22.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_22, 0);
    __pyx_t_16 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_22,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_16,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1045, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_22.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_22.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_22.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_22, 1);
    __pyx_t_22.memview = NULL;
    __pyx_t_22.data = NULL;

    /* "discretize/tree_ext.pyx":1046
 *             ii = edge.index + offset1
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = edge.points[0].index             # <<<<<<<<<<<<<<
 *             J[ii*2 + 1] = edge.points[1].index
 * 
 */
    __pyx_t_3 = (__pyx_v_edge->points[0])->index;
    __pyx_t_23 = (__pyx_v_ii * 2);
    if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_23 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

    /* "discretize/tree_ext.pyx":1047
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = edge.points[0].index
 *             J[ii*2 + 1] = edge.points[1].index             # <<<<<<<<<<<<<<
 * 
 *             length = edge.length
 */
    __pyx_t_3 = (__pyx_v_edge->points[1])->index;
    __pyx_t_24 = ((__pyx_v_ii * 2) + 1);
    if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_24 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

    /* "discretize/tree_ext.pyx":1049
 *             J[ii*2 + 1] = edge.points[1].index
 * 
 *             length = edge.length             # <<<<<<<<<<<<<<
 *             V[ii*2    ] = -1.0/length
 *             V[ii*2 + 1] =  1.0/length
 */
    __pyx_t_19 = __pyx_v_edge->length;
    __pyx_v_length = __pyx_t_19;

    /* "discretize/tree_ext.pyx":1050
 * 
 *             length = edge.length
 *             V[ii*2    ] = -1.0/length             # <<<<<<<<<<<<<<
 *             V[ii*2 + 1] =  1.0/length
 * 
 */
    __pyx_t_25 = (__pyx_v_ii * 2);
    if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_25 * __pyx_v_V.strides[0]) )) = (-1.0 / __pyx_v_length);

    /* "discretize/tree_ext.pyx":1051
 *             length = edge.length
 *             V[ii*2    ] = -1.0/length
 *             V[ii*2 + 1] =  1.0/length             # <<<<<<<<<<<<<<
 * 
 *         if(dim>2):
 */
    __pyx_t_26 = ((__pyx_v_ii * 2) + 1);
    if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_26 * __pyx_v_V.strides[0]) )) = (1.0 / __pyx_v_length);

    /* "discretize/tree_ext.pyx":1041
 *             V[ii*2 + 1] =  1.0/length
 * 
 *         for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             if edge.hanging: continue
 */
    __pyx_L7_continue:;
  }

  /* "discretize/tree_ext.pyx":1053
 *             V[ii*2 + 1] =  1.0/length
 * 
 *         if(dim>2):             # <<<<<<<<<<<<<<
 *             for it in self.tree.edges_z:
 *                 edge = it.second
 */
  __pyx_t_2 = ((__pyx_v_dim > 2) != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1054
 * 
 *         if(dim>2):
 *             for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if edge.hanging: continue
 */
    __pyx_t_13 = &__pyx_v_self->tree->edges_z;
    __pyx_t_12 = __pyx_t_13->begin();
    for (;;) {
      if (!(__pyx_t_12 != __pyx_t_13->end())) break;
      __pyx_t_14 = *__pyx_t_12;
      ++__pyx_t_12;
      __pyx_v_it = __pyx_t_14;

      /* "discretize/tree_ext.pyx":1055
 *         if(dim>2):
 *             for it in self.tree.edges_z:
 *                 edge = it.second             # <<<<<<<<<<<<<<
 *                 if edge.hanging: continue
 *                 ii = edge.index + offset2
 */
      __pyx_t_15 = __pyx_v_it.second;
      __pyx_v_edge = __pyx_t_15;

      /* "discretize/tree_ext.pyx":1056
 *             for it in self.tree.edges_z:
 *                 edge = it.second
 *                 if edge.hanging: continue             # <<<<<<<<<<<<<<
 *                 ii = edge.index + offset2
 *                 I[ii*2 : ii*2 + 2] = ii
 */
      __pyx_t_2 = (__pyx_v_edge->hanging != 0);
      if (__pyx_t_2) {
        goto __pyx_L11_continue;
      }

      /* "discretize/tree_ext.pyx":1057
 *                 edge = it.second
 *                 if edge.hanging: continue
 *                 ii = edge.index + offset2             # <<<<<<<<<<<<<<
 *                 I[ii*2 : ii*2 + 2] = ii
 *                 J[ii*2    ] = edge.points[0].index
 */
      __pyx_v_ii = (__pyx_v_edge->index + __pyx_v_offset2);

      /* "discretize/tree_ext.pyx":1058
 *                 if edge.hanging: continue
 *                 ii = edge.index + offset2
 *                 I[ii*2 : ii*2 + 2] = ii             # <<<<<<<<<<<<<<
 *                 J[ii*2    ] = edge.points[0].index
 *                 J[ii*2 + 1] = edge.points[1].index
 */
      __pyx_t_27.data = __pyx_v_I.data;
      __pyx_t_27.memview = __pyx_v_I.memview;
      __PYX_INC_MEMVIEW(&__pyx_t_27, 0);
      __pyx_t_16 = -1;
      if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_27,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_16,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1058, __pyx_L1_error)
}

{
          __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
          {
              Py_ssize_t __pyx_temp_extent_0 = __pyx_t_27.shape[0];
              Py_ssize_t __pyx_temp_stride_0 = __pyx_t_27.strides[0];
              char *__pyx_temp_pointer_0;
              Py_ssize_t __pyx_temp_idx_0;
              __pyx_temp_pointer_0 = __pyx_t_27.data;
              for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
                *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
                __pyx_temp_pointer_0 += __pyx_temp_stride_0;
              }
          }
      }
      __PYX_XDEC_MEMVIEW(&__pyx_t_27, 1);
      __pyx_t_27.memview = NULL;
      __pyx_t_27.data = NULL;

      /* "discretize/tree_ext.pyx":1059
 *                 ii = edge.index + offset2
 *                 I[ii*2 : ii*2 + 2] = ii
 *                 J[ii*2    ] = edge.points[0].index             # <<<<<<<<<<<<<<
 *                 J[ii*2 + 1] = edge.points[1].index
 * 
 */
      __pyx_t_3 = (__pyx_v_edge->points[0])->index;
      __pyx_t_28 = (__pyx_v_ii * 2);
      if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_28 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

      /* "discretize/tree_ext.pyx":1060
 *                 I[ii*2 : ii*2 + 2] = ii
 *                 J[ii*2    ] = edge.points[0].index
 *                 J[ii*2 + 1] = edge.points[1].index             # <<<<<<<<<<<<<<
 * 
 *                 length = edge.length
 */
      __pyx_t_3 = (__pyx_v_edge->points[1])->index;
      __pyx_t_29 = ((__pyx_v_ii * 2) + 1);
      if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_29 * __pyx_v_J.strides[0]) )) = __pyx_t_3;

      /* "discretize/tree_ext.pyx":1062
 *                 J[ii*2 + 1] = edge.points[1].index
 * 
 *                 length = edge.length             # <<<<<<<<<<<<<<
 *                 V[ii*2    ] = -1.0/length
 *                 V[ii*2 + 1] =  1.0/length
 */
      __pyx_t_19 = __pyx_v_edge->length;
      __pyx_v_length = __pyx_t_19;

      /* "discretize/tree_ext.pyx":1063
 * 
 *                 length = edge.length
 *                 V[ii*2    ] = -1.0/length             # <<<<<<<<<<<<<<
 *                 V[ii*2 + 1] =  1.0/length
 * 
 */
      __pyx_t_30 = (__pyx_v_ii * 2);
      if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_30 * __pyx_v_V.strides[0]) )) = (-1.0 / __pyx_v_length);

      /* "discretize/tree_ext.pyx":1064
 *                 length = edge.length
 *                 V[ii*2    ] = -1.0/length
 *                 V[ii*2 + 1] =  1.0/length             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_31 = ((__pyx_v_ii * 2) + 1);
      if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_31 * __pyx_v_V.strides[0]) )) = (1.0 / __pyx_v_length);

      /* "discretize/tree_ext.pyx":1054
 * 
 *         if(dim>2):
 *             for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                 edge = it.second
 *                 if edge.hanging: continue
 */
      __pyx_L11_continue:;
    }

    /* "discretize/tree_ext.pyx":1053
 *             V[ii*2 + 1] =  1.0/length
 * 
 *         if(dim>2):             # <<<<<<<<<<<<<<
 *             for it in self.tree.edges_z:
 *                 edge = it.second
 */
  }

  /* "discretize/tree_ext.pyx":1067
 * 
 * 
 *         Rn = self._deflate_nodes()             # <<<<<<<<<<<<<<
 *         G = sp.csr_matrix((V, (I, J)), shape=(self.nE, self.ntN))
 *         self._nodalGrad = G*Rn
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_nodes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_Rn = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "discretize/tree_ext.pyx":1068
 * 
 *         Rn = self._deflate_nodes()
 *         G = sp.csr_matrix((V, (I, J)), shape=(self.nE, self.ntN))             # <<<<<<<<<<<<<<
 *         self._nodalGrad = G*Rn
 *         return self._nodalGrad
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
  __pyx_t_7 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntN); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_32 = PyTuple_New(2); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_32, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_32, 1, __pyx_t_5);
  __pyx_t_7 = 0;
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_shape, __pyx_t_32) < 0) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_G = __pyx_t_32;
  __pyx_t_32 = 0;

  /* "discretize/tree_ext.pyx":1069
 *         Rn = self._deflate_nodes()
 *         G = sp.csr_matrix((V, (I, J)), shape=(self.nE, self.ntN))
 *         self._nodalGrad = G*Rn             # <<<<<<<<<<<<<<
 *         return self._nodalGrad
 * 
 */
  __pyx_t_32 = PyNumber_Multiply(__pyx_v_G, __pyx_v_Rn); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  __Pyx_GOTREF(__pyx_v_self->_nodalGrad);
  __Pyx_DECREF(__pyx_v_self->_nodalGrad);
  __pyx_v_self->_nodalGrad = __pyx_t_32;
  __pyx_t_32 = 0;

  /* "discretize/tree_ext.pyx":1070
 *         G = sp.csr_matrix((V, (I, J)), shape=(self.nE, self.ntN))
 *         self._nodalGrad = G*Rn
 *         return self._nodalGrad             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_nodalGrad);
  __pyx_r = __pyx_v_self->_nodalGrad;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1015
 *     @cython.cdivision(True)
 *     @cython.boundscheck(False)
 *     def nodalGrad(self):             # <<<<<<<<<<<<<<
 *         if self._nodalGrad is not None:
 *             return self._nodalGrad
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_22, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_27, 1);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.nodalGrad.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rn);
  __Pyx_XDECREF(__pyx_v_G);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1073
 * 
 *     @cython.boundscheck(False)
 *     def _aveCC2FxStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_17_aveCC2FxStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_17_aveCC2FxStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_aveCC2FxStencil (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_16_aveCC2FxStencil(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_16_aveCC2FxStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_dim;
  int_t __pyx_v_ind;
  Cell *__pyx_v_cell;
  Cell *__pyx_v_next_cell;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_t_8;
  std::vector<Cell *> ::iterator __pyx_t_9;
  std::vector<Cell *>  *__pyx_t_10;
  Cell *__pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  PyObject *__pyx_t_40 = NULL;
  __Pyx_RefNannySetupContext("_aveCC2FxStencil", 0);

  /* "discretize/tree_ext.pyx":1074
 *     @cython.boundscheck(False)
 *     def _aveCC2FxStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFx, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1075
 *     def _aveCC2FxStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFx, dtype=np.float64)
 *         cdef int dim = self._dim
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1076
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFx, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int dim = self._dim
 *         cdef int_t ind
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1077
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFx, dtype=np.float64)
 *         cdef int dim = self._dim             # <<<<<<<<<<<<<<
 *         cdef int_t ind
 * 
 */
  __pyx_t_8 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_8;

  /* "discretize/tree_ext.pyx":1080
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:
 */
  __pyx_t_10 = &__pyx_v_self->tree->cells;
  __pyx_t_9 = __pyx_t_10->begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_t_10->end())) break;
    __pyx_t_11 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_cell = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1081
 * 
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[1]             # <<<<<<<<<<<<<<
 *             if next_cell == NULL:
 *                 continue
 */
    __pyx_v_next_cell = (__pyx_v_cell->neighbors[1]);

    /* "discretize/tree_ext.pyx":1082
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if dim == 2:
 */
    __pyx_t_12 = ((__pyx_v_next_cell == NULL) != 0);
    if (__pyx_t_12) {

      /* "discretize/tree_ext.pyx":1083
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:
 *                 continue             # <<<<<<<<<<<<<<
 *             if dim == 2:
 *                 if next_cell.is_leaf():
 */
      goto __pyx_L3_continue;

      /* "discretize/tree_ext.pyx":1082
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if dim == 2:
 */
    }

    /* "discretize/tree_ext.pyx":1084
 *             if next_cell == NULL:
 *                 continue
 *             if dim == 2:             # <<<<<<<<<<<<<<
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[3].index
 */
    __pyx_t_12 = ((__pyx_v_dim == 2) != 0);
    if (__pyx_t_12) {

      /* "discretize/tree_ext.pyx":1085
 *                 continue
 *             if dim == 2:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.edges[3].index
 *                     I[2*ind    ] = ind
 */
      __pyx_t_12 = (__pyx_v_next_cell->is_leaf() != 0);
      if (__pyx_t_12) {

        /* "discretize/tree_ext.pyx":1086
 *             if dim == 2:
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[3].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_8 = (__pyx_v_cell->edges[3])->index;
        __pyx_v_ind = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1087
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[3].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_13 = (2 * __pyx_v_ind);
        if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1088
 *                     ind = cell.edges[3].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 */
        __pyx_t_14 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1089
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5
 */
        __pyx_t_8 = __pyx_v_cell->index;
        __pyx_t_15 = (2 * __pyx_v_ind);
        if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1090
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5
 */
        __pyx_t_8 = __pyx_v_next_cell->index;
        __pyx_t_16 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1091
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] = 0.5
 *                 else:
 */
        __pyx_t_17 = (2 * __pyx_v_ind);
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1092
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction
 */
        __pyx_t_18 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1085
 *                 continue
 *             if dim == 2:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.edges[3].index
 *                     I[2*ind    ] = ind
 */
        goto __pyx_L7;
      }

      /* "discretize/tree_ext.pyx":1094
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
          __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
        } else {
          __pyx_t_19 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1094, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_20 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1094, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        for (;;) {
          if (likely(!__pyx_t_20)) {
            if (likely(PyList_CheckExact(__pyx_t_5))) {
              if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1094, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            } else {
              if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1094, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            }
          } else {
            __pyx_t_2 = __pyx_t_20(__pyx_t_5);
            if (unlikely(!__pyx_t_2)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1094, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "discretize/tree_ext.pyx":1095
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction
 *                         ind = next_cell.children[2*i].edges[2].index             # <<<<<<<<<<<<<<
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 */
          __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1095, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1095, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_8 = ((__pyx_v_next_cell->children[__pyx_t_21])->edges[2])->index;
          __pyx_v_ind = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1096
 *                     for i in range(2): # two neighbors in +x direction
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 */
          __pyx_t_22 = (2 * __pyx_v_ind);
          if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_22 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1097
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 */
          __pyx_t_23 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_23 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1098
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = 0.5
 */
          __pyx_t_8 = __pyx_v_cell->index;
          __pyx_t_24 = (2 * __pyx_v_ind);
          if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_24 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1099
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index             # <<<<<<<<<<<<<<
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5
 */
          __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1099, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1099, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_8 = (__pyx_v_next_cell->children[__pyx_t_21])->index;
          __pyx_t_25 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_25 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1100
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                         V[2*ind + 1] = 0.5
 *             else:
 */
          __pyx_t_26 = (2 * __pyx_v_ind);
          if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_26 * __pyx_v_V.strides[0]) )) = 0.5;

          /* "discretize/tree_ext.pyx":1101
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 *             else:
 *                 if cell.neighbors[1].is_leaf():
 */
          __pyx_t_27 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_27 * __pyx_v_V.strides[0]) )) = 0.5;

          /* "discretize/tree_ext.pyx":1094
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind
 */
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L7:;

      /* "discretize/tree_ext.pyx":1084
 *             if next_cell == NULL:
 *                 continue
 *             if dim == 2:             # <<<<<<<<<<<<<<
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[3].index
 */
      goto __pyx_L6;
    }

    /* "discretize/tree_ext.pyx":1103
 *                         V[2*ind + 1] = 0.5
 *             else:
 *                 if cell.neighbors[1].is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.faces[1].index
 *                     I[2*ind    ] = ind
 */
    /*else*/ {
      __pyx_t_12 = ((__pyx_v_cell->neighbors[1])->is_leaf() != 0);
      if (__pyx_t_12) {

        /* "discretize/tree_ext.pyx":1104
 *             else:
 *                 if cell.neighbors[1].is_leaf():
 *                     ind = cell.faces[1].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_8 = (__pyx_v_cell->faces[1])->index;
        __pyx_v_ind = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1105
 *                 if cell.neighbors[1].is_leaf():
 *                     ind = cell.faces[1].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_28 = (2 * __pyx_v_ind);
        if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_28 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1106
 *                     ind = cell.faces[1].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 */
        __pyx_t_29 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_29 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1107
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5
 */
        __pyx_t_8 = __pyx_v_cell->index;
        __pyx_t_30 = (2 * __pyx_v_ind);
        if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_30 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1108
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5
 */
        __pyx_t_8 = __pyx_v_next_cell->index;
        __pyx_t_31 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_31 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1109
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] = 0.5
 *                 else:
 */
        __pyx_t_32 = (2 * __pyx_v_ind);
        if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_32 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1110
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction
 */
        __pyx_t_33 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_33 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1103
 *                         V[2*ind + 1] = 0.5
 *             else:
 *                 if cell.neighbors[1].is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.faces[1].index
 *                     I[2*ind    ] = ind
 */
        goto __pyx_L10;
      }

      /* "discretize/tree_ext.pyx":1112
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].faces[0].index
 *                         I[2*ind    ] = ind
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
        } else {
          __pyx_t_19 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_20 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1112, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_20)) {
            if (likely(PyList_CheckExact(__pyx_t_2))) {
              if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_5); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1112, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1112, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_5); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1112, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1112, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_20(__pyx_t_2);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1112, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "discretize/tree_ext.pyx":1113
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction
 *                         ind = next_cell.children[2*i].faces[0].index             # <<<<<<<<<<<<<<
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 */
          __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1113, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1113, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = ((__pyx_v_next_cell->children[__pyx_t_21])->faces[0])->index;
          __pyx_v_ind = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1114
 *                     for i in range(4): # four neighbors in +x direction
 *                         ind = next_cell.children[2*i].faces[0].index
 *                         I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 */
          __pyx_t_34 = (2 * __pyx_v_ind);
          if (__pyx_t_34 < 0) __pyx_t_34 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_34 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1115
 *                         ind = next_cell.children[2*i].faces[0].index
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 */
          __pyx_t_35 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_35 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1116
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = 0.5
 */
          __pyx_t_8 = __pyx_v_cell->index;
          __pyx_t_36 = (2 * __pyx_v_ind);
          if (__pyx_t_36 < 0) __pyx_t_36 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_36 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1117
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index             # <<<<<<<<<<<<<<
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5
 */
          __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1117, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1117, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = (__pyx_v_next_cell->children[__pyx_t_21])->index;
          __pyx_t_37 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_37 < 0) __pyx_t_37 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_37 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1118
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                         V[2*ind + 1] = 0.5
 * 
 */
          __pyx_t_38 = (2 * __pyx_v_ind);
          if (__pyx_t_38 < 0) __pyx_t_38 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_38 * __pyx_v_V.strides[0]) )) = 0.5;

          /* "discretize/tree_ext.pyx":1119
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFx, self.nC))
 */
          __pyx_t_39 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_39 < 0) __pyx_t_39 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_39 * __pyx_v_V.strides[0]) )) = 0.5;

          /* "discretize/tree_ext.pyx":1112
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].faces[0].index
 *                         I[2*ind    ] = ind
 */
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L10:;
    }
    __pyx_L6:;

    /* "discretize/tree_ext.pyx":1080
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:
 */
    __pyx_L3_continue:;
  }

  /* "discretize/tree_ext.pyx":1121
 *                         V[2*ind + 1] = 0.5
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFx, self.nC))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_40 = PyTuple_New(2); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_40, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_40, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_40) < 0) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;
  __pyx_t_40 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_40;
  __pyx_t_40 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1073
 * 
 *     @cython.boundscheck(False)
 *     def _aveCC2FxStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._aveCC2FxStencil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1124
 * 
 *     @cython.boundscheck(False)
 *     def _aveCC2FyStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_19_aveCC2FyStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_19_aveCC2FyStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_aveCC2FyStencil (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_18_aveCC2FyStencil(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_18_aveCC2FyStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_dim;
  int_t __pyx_v_ind;
  Cell *__pyx_v_cell;
  Cell *__pyx_v_next_cell;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_t_8;
  std::vector<Cell *> ::iterator __pyx_t_9;
  std::vector<Cell *>  *__pyx_t_10;
  Cell *__pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  PyObject *__pyx_t_40 = NULL;
  __Pyx_RefNannySetupContext("_aveCC2FyStencil", 0);

  /* "discretize/tree_ext.pyx":1125
 *     @cython.boundscheck(False)
 *     def _aveCC2FyStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFy, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1126
 *     def _aveCC2FyStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFy, dtype=np.float64)
 *         cdef int dim = self._dim
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1127
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFy, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int dim = self._dim
 *         cdef int_t ind
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1128
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFy, dtype=np.float64)
 *         cdef int dim = self._dim             # <<<<<<<<<<<<<<
 *         cdef int_t ind
 * 
 */
  __pyx_t_8 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_8;

  /* "discretize/tree_ext.pyx":1131
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[3]
 *             if next_cell==NULL:
 */
  __pyx_t_10 = &__pyx_v_self->tree->cells;
  __pyx_t_9 = __pyx_t_10->begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_t_10->end())) break;
    __pyx_t_11 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_cell = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1132
 * 
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[3]             # <<<<<<<<<<<<<<
 *             if next_cell==NULL:
 *                 continue
 */
    __pyx_v_next_cell = (__pyx_v_cell->neighbors[3]);

    /* "discretize/tree_ext.pyx":1133
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[3]
 *             if next_cell==NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if dim==2:
 */
    __pyx_t_12 = ((__pyx_v_next_cell == NULL) != 0);
    if (__pyx_t_12) {

      /* "discretize/tree_ext.pyx":1134
 *             next_cell = cell.neighbors[3]
 *             if next_cell==NULL:
 *                 continue             # <<<<<<<<<<<<<<
 *             if dim==2:
 *                 if next_cell.is_leaf():
 */
      goto __pyx_L3_continue;

      /* "discretize/tree_ext.pyx":1133
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[3]
 *             if next_cell==NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if dim==2:
 */
    }

    /* "discretize/tree_ext.pyx":1135
 *             if next_cell==NULL:
 *                 continue
 *             if dim==2:             # <<<<<<<<<<<<<<
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[1].index
 */
    __pyx_t_12 = ((__pyx_v_dim == 2) != 0);
    if (__pyx_t_12) {

      /* "discretize/tree_ext.pyx":1136
 *                 continue
 *             if dim==2:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.edges[1].index
 *                     I[2*ind    ] = ind
 */
      __pyx_t_12 = (__pyx_v_next_cell->is_leaf() != 0);
      if (__pyx_t_12) {

        /* "discretize/tree_ext.pyx":1137
 *             if dim==2:
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[1].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_8 = (__pyx_v_cell->edges[1])->index;
        __pyx_v_ind = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1138
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[1].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_13 = (2 * __pyx_v_ind);
        if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1139
 *                     ind = cell.edges[1].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 */
        __pyx_t_14 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1140
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5
 */
        __pyx_t_8 = __pyx_v_cell->index;
        __pyx_t_15 = (2 * __pyx_v_ind);
        if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1141
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5
 */
        __pyx_t_8 = __pyx_v_next_cell->index;
        __pyx_t_16 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1142
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] = 0.5
 *                 else:
 */
        __pyx_t_17 = (2 * __pyx_v_ind);
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1143
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction
 */
        __pyx_t_18 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1136
 *                 continue
 *             if dim==2:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.edges[1].index
 *                     I[2*ind    ] = ind
 */
        goto __pyx_L7;
      }

      /* "discretize/tree_ext.pyx":1145
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
          __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
        } else {
          __pyx_t_19 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1145, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_20 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1145, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        for (;;) {
          if (likely(!__pyx_t_20)) {
            if (likely(PyList_CheckExact(__pyx_t_5))) {
              if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1145, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            } else {
              if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1145, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            }
          } else {
            __pyx_t_2 = __pyx_t_20(__pyx_t_5);
            if (unlikely(!__pyx_t_2)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1145, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "discretize/tree_ext.pyx":1146
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction
 *                         ind = next_cell.children[i].edges[0].index             # <<<<<<<<<<<<<<
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 */
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1146, __pyx_L1_error)
          __pyx_t_8 = ((__pyx_v_next_cell->children[__pyx_t_21])->edges[0])->index;
          __pyx_v_ind = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1147
 *                     for i in range(2): # two neighbors in +y direction
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 */
          __pyx_t_22 = (2 * __pyx_v_ind);
          if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_22 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1148
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[i].index
 */
          __pyx_t_23 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_23 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1149
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                         J[2*ind + 1] = next_cell.children[i].index
 *                         V[2*ind    ] = 0.5
 */
          __pyx_t_8 = __pyx_v_cell->index;
          __pyx_t_24 = (2 * __pyx_v_ind);
          if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_24 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1150
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[i].index             # <<<<<<<<<<<<<<
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5
 */
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1150, __pyx_L1_error)
          __pyx_t_8 = (__pyx_v_next_cell->children[__pyx_t_21])->index;
          __pyx_t_25 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_25 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1151
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[i].index
 *                         V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                         V[2*ind + 1] = 0.5
 *             else:
 */
          __pyx_t_26 = (2 * __pyx_v_ind);
          if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_26 * __pyx_v_V.strides[0]) )) = 0.5;

          /* "discretize/tree_ext.pyx":1152
 *                         J[2*ind + 1] = next_cell.children[i].index
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 *             else:
 *                 if next_cell.is_leaf():
 */
          __pyx_t_27 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_27 * __pyx_v_V.strides[0]) )) = 0.5;

          /* "discretize/tree_ext.pyx":1145
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind
 */
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L7:;

      /* "discretize/tree_ext.pyx":1135
 *             if next_cell==NULL:
 *                 continue
 *             if dim==2:             # <<<<<<<<<<<<<<
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[1].index
 */
      goto __pyx_L6;
    }

    /* "discretize/tree_ext.pyx":1154
 *                         V[2*ind + 1] = 0.5
 *             else:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.faces[3].index
 *                     I[2*ind    ] = ind
 */
    /*else*/ {
      __pyx_t_12 = (__pyx_v_next_cell->is_leaf() != 0);
      if (__pyx_t_12) {

        /* "discretize/tree_ext.pyx":1155
 *             else:
 *                 if next_cell.is_leaf():
 *                     ind = cell.faces[3].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_8 = (__pyx_v_cell->faces[3])->index;
        __pyx_v_ind = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1156
 *                 if next_cell.is_leaf():
 *                     ind = cell.faces[3].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_28 = (2 * __pyx_v_ind);
        if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_28 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1157
 *                     ind = cell.faces[3].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 */
        __pyx_t_29 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_29 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1158
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5
 */
        __pyx_t_8 = __pyx_v_cell->index;
        __pyx_t_30 = (2 * __pyx_v_ind);
        if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_30 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1159
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5
 */
        __pyx_t_8 = __pyx_v_next_cell->index;
        __pyx_t_31 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_31 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1160
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] = 0.5
 *                 else:
 */
        __pyx_t_32 = (2 * __pyx_v_ind);
        if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_32 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1161
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction
 */
        __pyx_t_33 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_33 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1154
 *                         V[2*ind + 1] = 0.5
 *             else:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.faces[3].index
 *                     I[2*ind    ] = ind
 */
        goto __pyx_L10;
      }

      /* "discretize/tree_ext.pyx":1163
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index
 *                         I[2*ind    ] = ind
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
        } else {
          __pyx_t_19 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1163, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_20 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1163, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_20)) {
            if (likely(PyList_CheckExact(__pyx_t_2))) {
              if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_5); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1163, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1163, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_5); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1163, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1163, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_20(__pyx_t_2);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1163, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "discretize/tree_ext.pyx":1164
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index             # <<<<<<<<<<<<<<
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 */
          __pyx_t_5 = __Pyx_PyInt_RshiftObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1164, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_int_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyInt_RemainderObjC(__pyx_v_i, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1164, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1164, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_8 = ((__pyx_v_next_cell->children[__pyx_t_21])->faces[2])->index;
          __pyx_v_ind = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1165
 *                     for i in range(4): # four neighbors in +y direction
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index
 *                         I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 */
          __pyx_t_34 = (2 * __pyx_v_ind);
          if (__pyx_t_34 < 0) __pyx_t_34 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_34 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1166
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index
 */
          __pyx_t_35 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_35 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1167
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index
 *                         V[2*ind    ] = 0.5
 */
          __pyx_t_8 = __pyx_v_cell->index;
          __pyx_t_36 = (2 * __pyx_v_ind);
          if (__pyx_t_36 < 0) __pyx_t_36 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_36 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1168
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index             # <<<<<<<<<<<<<<
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5
 */
          __pyx_t_1 = __Pyx_PyInt_RshiftObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_int_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyInt_RemainderObjC(__pyx_v_i, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_8 = (__pyx_v_next_cell->children[__pyx_t_21])->index;
          __pyx_t_37 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_37 < 0) __pyx_t_37 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_37 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1169
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index
 *                         V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                         V[2*ind + 1] = 0.5
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFy, self.nC))
 */
          __pyx_t_38 = (2 * __pyx_v_ind);
          if (__pyx_t_38 < 0) __pyx_t_38 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_38 * __pyx_v_V.strides[0]) )) = 0.5;

          /* "discretize/tree_ext.pyx":1170
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFy, self.nC))
 * 
 */
          __pyx_t_39 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_39 < 0) __pyx_t_39 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_39 * __pyx_v_V.strides[0]) )) = 0.5;

          /* "discretize/tree_ext.pyx":1163
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index
 *                         I[2*ind    ] = ind
 */
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L10:;
    }
    __pyx_L6:;

    /* "discretize/tree_ext.pyx":1131
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[3]
 *             if next_cell==NULL:
 */
    __pyx_L3_continue:;
  }

  /* "discretize/tree_ext.pyx":1171
 *                         V[2*ind    ] = 0.5
 *                         V[2*ind + 1] = 0.5
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFy, self.nC))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_40 = PyTuple_New(2); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_40, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_40, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_shape, __pyx_t_40) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;
  __pyx_t_40 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_40;
  __pyx_t_40 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1124
 * 
 *     @cython.boundscheck(False)
 *     def _aveCC2FyStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._aveCC2FyStencil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1174
 * 
 *     @cython.boundscheck(False)
 *     def _aveCC2FzStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_21_aveCC2FzStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_21_aveCC2FzStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_aveCC2FzStencil (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_20_aveCC2FzStencil(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_20_aveCC2FzStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_v_ind;
  Cell *__pyx_v_cell;
  Cell *__pyx_v_next_cell;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_8;
  std::vector<Cell *>  *__pyx_t_9;
  Cell *__pyx_t_10;
  int __pyx_t_11;
  int_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  long __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  PyObject *__pyx_t_26 = NULL;
  __Pyx_RefNannySetupContext("_aveCC2FzStencil", 0);

  /* "discretize/tree_ext.pyx":1175
 *     @cython.boundscheck(False)
 *     def _aveCC2FzStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFz, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1176
 *     def _aveCC2FzStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFz, dtype=np.float64)
 *         cdef int_t ind
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1177
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFz, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int_t ind
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1180
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:
 */
  __pyx_t_9 = &__pyx_v_self->tree->cells;
  __pyx_t_8 = __pyx_t_9->begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_t_9->end())) break;
    __pyx_t_10 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_cell = __pyx_t_10;

    /* "discretize/tree_ext.pyx":1181
 * 
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[5]             # <<<<<<<<<<<<<<
 *             if next_cell==NULL:
 *                 continue
 */
    __pyx_v_next_cell = (__pyx_v_cell->neighbors[5]);

    /* "discretize/tree_ext.pyx":1182
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if next_cell.is_leaf():
 */
    __pyx_t_11 = ((__pyx_v_next_cell == NULL) != 0);
    if (__pyx_t_11) {

      /* "discretize/tree_ext.pyx":1183
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:
 *                 continue             # <<<<<<<<<<<<<<
 *             if next_cell.is_leaf():
 *                 ind = cell.faces[5].index
 */
      goto __pyx_L3_continue;

      /* "discretize/tree_ext.pyx":1182
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if next_cell.is_leaf():
 */
    }

    /* "discretize/tree_ext.pyx":1184
 *             if next_cell==NULL:
 *                 continue
 *             if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                 ind = cell.faces[5].index
 *                 I[2*ind    ] = ind
 */
    __pyx_t_11 = (__pyx_v_next_cell->is_leaf() != 0);
    if (__pyx_t_11) {

      /* "discretize/tree_ext.pyx":1185
 *                 continue
 *             if next_cell.is_leaf():
 *                 ind = cell.faces[5].index             # <<<<<<<<<<<<<<
 *                 I[2*ind    ] = ind
 *                 I[2*ind + 1] = ind
 */
      __pyx_t_12 = (__pyx_v_cell->faces[5])->index;
      __pyx_v_ind = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1186
 *             if next_cell.is_leaf():
 *                 ind = cell.faces[5].index
 *                 I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                 I[2*ind + 1] = ind
 *                 J[2*ind    ] = cell.index
 */
      __pyx_t_13 = (2 * __pyx_v_ind);
      if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

      /* "discretize/tree_ext.pyx":1187
 *                 ind = cell.faces[5].index
 *                 I[2*ind    ] = ind
 *                 I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                 J[2*ind    ] = cell.index
 *                 J[2*ind + 1] = next_cell.index
 */
      __pyx_t_14 = ((2 * __pyx_v_ind) + 1);
      if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

      /* "discretize/tree_ext.pyx":1188
 *                 I[2*ind    ] = ind
 *                 I[2*ind + 1] = ind
 *                 J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                 J[2*ind + 1] = next_cell.index
 *                 V[2*ind    ] = 0.5
 */
      __pyx_t_12 = __pyx_v_cell->index;
      __pyx_t_15 = (2 * __pyx_v_ind);
      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1189
 *                 I[2*ind + 1] = ind
 *                 J[2*ind    ] = cell.index
 *                 J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                 V[2*ind    ] = 0.5
 *                 V[2*ind + 1] = 0.5
 */
      __pyx_t_12 = __pyx_v_next_cell->index;
      __pyx_t_16 = ((2 * __pyx_v_ind) + 1);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1190
 *                 J[2*ind    ] = cell.index
 *                 J[2*ind + 1] = next_cell.index
 *                 V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                 V[2*ind + 1] = 0.5
 *             else:
 */
      __pyx_t_17 = (2 * __pyx_v_ind);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = 0.5;

      /* "discretize/tree_ext.pyx":1191
 *                 J[2*ind + 1] = next_cell.index
 *                 V[2*ind    ] = 0.5
 *                 V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 *             else:
 *                 for i in range(4): # four neighbors in +z direction
 */
      __pyx_t_18 = ((2 * __pyx_v_ind) + 1);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = 0.5;

      /* "discretize/tree_ext.pyx":1184
 *             if next_cell==NULL:
 *                 continue
 *             if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                 ind = cell.faces[5].index
 *                 I[2*ind    ] = ind
 */
      goto __pyx_L6;
    }

    /* "discretize/tree_ext.pyx":1193
 *                 V[2*ind + 1] = 0.5
 *             else:
 *                 for i in range(4): # four neighbors in +z direction             # <<<<<<<<<<<<<<
 *                     ind = next_cell.children[i].faces[4].index
 *                     I[2*ind    ] = ind
 */
    /*else*/ {
      for (__pyx_t_19 = 0; __pyx_t_19 < 4; __pyx_t_19+=1) {
        __pyx_v_i = __pyx_t_19;

        /* "discretize/tree_ext.pyx":1194
 *             else:
 *                 for i in range(4): # four neighbors in +z direction
 *                     ind = next_cell.children[i].faces[4].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_12 = ((__pyx_v_next_cell->children[__pyx_v_i])->faces[4])->index;
        __pyx_v_ind = __pyx_t_12;

        /* "discretize/tree_ext.pyx":1195
 *                 for i in range(4): # four neighbors in +z direction
 *                     ind = next_cell.children[i].faces[4].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_20 = (2 * __pyx_v_ind);
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_20 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1196
 *                     ind = next_cell.children[i].faces[4].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.children[i].index
 */
        __pyx_t_21 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_21 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1197
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.children[i].index
 *                     V[2*ind    ] = 0.5
 */
        __pyx_t_12 = __pyx_v_cell->index;
        __pyx_t_22 = (2 * __pyx_v_ind);
        if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_22 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

        /* "discretize/tree_ext.pyx":1198
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.children[i].index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5
 */
        __pyx_t_12 = (__pyx_v_next_cell->children[__pyx_v_i])->index;
        __pyx_t_23 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_23 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

        /* "discretize/tree_ext.pyx":1199
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.children[i].index
 *                     V[2*ind    ] = 0.5             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] = 0.5
 * 
 */
        __pyx_t_24 = (2 * __pyx_v_ind);
        if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_24 * __pyx_v_V.strides[0]) )) = 0.5;

        /* "discretize/tree_ext.pyx":1200
 *                     J[2*ind + 1] = next_cell.children[i].index
 *                     V[2*ind    ] = 0.5
 *                     V[2*ind + 1] = 0.5             # <<<<<<<<<<<<<<
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFz, self.nC))
 */
        __pyx_t_25 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_25 * __pyx_v_V.strides[0]) )) = 0.5;
      }
    }
    __pyx_L6:;

    /* "discretize/tree_ext.pyx":1180
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:
 */
    __pyx_L3_continue:;
  }

  /* "discretize/tree_ext.pyx":1202
 *                     V[2*ind + 1] = 0.5
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFz, self.nC))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_26 = PyTuple_New(2); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_26, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_26) < 0) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_26;
  __pyx_t_26 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1174
 * 
 *     @cython.boundscheck(False)
 *     def _aveCC2FzStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._aveCC2FzStencil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1205
 * 
 *     @cython.boundscheck(False)
 *     def _cellGradxStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_23_cellGradxStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_23_cellGradxStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cellGradxStencil (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_22_cellGradxStencil(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_22_cellGradxStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_dim;
  int_t __pyx_v_ind;
  Cell *__pyx_v_cell;
  Cell *__pyx_v_next_cell;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_t_8;
  std::vector<Cell *> ::iterator __pyx_t_9;
  std::vector<Cell *>  *__pyx_t_10;
  Cell *__pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  PyObject *__pyx_t_40 = NULL;
  __Pyx_RefNannySetupContext("_cellGradxStencil", 0);

  /* "discretize/tree_ext.pyx":1206
 *     @cython.boundscheck(False)
 *     def _cellGradxStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFx, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1207
 *     def _cellGradxStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFx, dtype=np.float64)
 *         cdef int dim = self._dim
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1208
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFx, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int dim = self._dim
 *         cdef int_t ind
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1209
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFx, dtype=np.float64)
 *         cdef int dim = self._dim             # <<<<<<<<<<<<<<
 *         cdef int_t ind
 * 
 */
  __pyx_t_8 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_8;

  /* "discretize/tree_ext.pyx":1212
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:
 */
  __pyx_t_10 = &__pyx_v_self->tree->cells;
  __pyx_t_9 = __pyx_t_10->begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_t_10->end())) break;
    __pyx_t_11 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_cell = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1213
 * 
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[1]             # <<<<<<<<<<<<<<
 *             if next_cell == NULL:
 *                 continue
 */
    __pyx_v_next_cell = (__pyx_v_cell->neighbors[1]);

    /* "discretize/tree_ext.pyx":1214
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if dim == 2:
 */
    __pyx_t_12 = ((__pyx_v_next_cell == NULL) != 0);
    if (__pyx_t_12) {

      /* "discretize/tree_ext.pyx":1215
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:
 *                 continue             # <<<<<<<<<<<<<<
 *             if dim == 2:
 *                 if next_cell.is_leaf():
 */
      goto __pyx_L3_continue;

      /* "discretize/tree_ext.pyx":1214
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if dim == 2:
 */
    }

    /* "discretize/tree_ext.pyx":1216
 *             if next_cell == NULL:
 *                 continue
 *             if dim == 2:             # <<<<<<<<<<<<<<
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[3].index
 */
    __pyx_t_12 = ((__pyx_v_dim == 2) != 0);
    if (__pyx_t_12) {

      /* "discretize/tree_ext.pyx":1217
 *                 continue
 *             if dim == 2:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.edges[3].index
 *                     I[2*ind    ] = ind
 */
      __pyx_t_12 = (__pyx_v_next_cell->is_leaf() != 0);
      if (__pyx_t_12) {

        /* "discretize/tree_ext.pyx":1218
 *             if dim == 2:
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[3].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_8 = (__pyx_v_cell->edges[3])->index;
        __pyx_v_ind = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1219
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[3].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_13 = (2 * __pyx_v_ind);
        if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1220
 *                     ind = cell.edges[3].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 */
        __pyx_t_14 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1221
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0
 */
        __pyx_t_8 = __pyx_v_cell->index;
        __pyx_t_15 = (2 * __pyx_v_ind);
        if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1222
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0
 */
        __pyx_t_8 = __pyx_v_next_cell->index;
        __pyx_t_16 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1223
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] =  1.0
 *                 else:
 */
        __pyx_t_17 = (2 * __pyx_v_ind);
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = -1.0;

        /* "discretize/tree_ext.pyx":1224
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction
 */
        __pyx_t_18 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = 1.0;

        /* "discretize/tree_ext.pyx":1217
 *                 continue
 *             if dim == 2:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.edges[3].index
 *                     I[2*ind    ] = ind
 */
        goto __pyx_L7;
      }

      /* "discretize/tree_ext.pyx":1226
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1226, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
          __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
        } else {
          __pyx_t_19 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1226, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_20 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1226, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        for (;;) {
          if (likely(!__pyx_t_20)) {
            if (likely(PyList_CheckExact(__pyx_t_5))) {
              if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1226, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1226, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            } else {
              if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1226, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1226, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            }
          } else {
            __pyx_t_2 = __pyx_t_20(__pyx_t_5);
            if (unlikely(!__pyx_t_2)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1226, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "discretize/tree_ext.pyx":1227
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction
 *                         ind = next_cell.children[2*i].edges[2].index             # <<<<<<<<<<<<<<
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 */
          __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1227, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1227, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_8 = ((__pyx_v_next_cell->children[__pyx_t_21])->edges[2])->index;
          __pyx_v_ind = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1228
 *                     for i in range(2): # two neighbors in +x direction
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 */
          __pyx_t_22 = (2 * __pyx_v_ind);
          if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_22 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1229
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 */
          __pyx_t_23 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_23 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1230
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = -1.0
 */
          __pyx_t_8 = __pyx_v_cell->index;
          __pyx_t_24 = (2 * __pyx_v_ind);
          if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_24 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1231
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index             # <<<<<<<<<<<<<<
 *                         V[2*ind    ] = -1.0
 *                         V[2*ind + 1] =  1.0
 */
          __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1231, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1231, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_8 = (__pyx_v_next_cell->children[__pyx_t_21])->index;
          __pyx_t_25 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_25 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1232
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                         V[2*ind + 1] =  1.0
 *             else:
 */
          __pyx_t_26 = (2 * __pyx_v_ind);
          if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_26 * __pyx_v_V.strides[0]) )) = -1.0;

          /* "discretize/tree_ext.pyx":1233
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = -1.0
 *                         V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 *             else:
 *                 if cell.neighbors[1].is_leaf():
 */
          __pyx_t_27 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_27 * __pyx_v_V.strides[0]) )) = 1.0;

          /* "discretize/tree_ext.pyx":1226
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind
 */
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L7:;

      /* "discretize/tree_ext.pyx":1216
 *             if next_cell == NULL:
 *                 continue
 *             if dim == 2:             # <<<<<<<<<<<<<<
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[3].index
 */
      goto __pyx_L6;
    }

    /* "discretize/tree_ext.pyx":1235
 *                         V[2*ind + 1] =  1.0
 *             else:
 *                 if cell.neighbors[1].is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.faces[1].index
 *                     I[2*ind    ] = ind
 */
    /*else*/ {
      __pyx_t_12 = ((__pyx_v_cell->neighbors[1])->is_leaf() != 0);
      if (__pyx_t_12) {

        /* "discretize/tree_ext.pyx":1236
 *             else:
 *                 if cell.neighbors[1].is_leaf():
 *                     ind = cell.faces[1].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_8 = (__pyx_v_cell->faces[1])->index;
        __pyx_v_ind = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1237
 *                 if cell.neighbors[1].is_leaf():
 *                     ind = cell.faces[1].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_28 = (2 * __pyx_v_ind);
        if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_28 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1238
 *                     ind = cell.faces[1].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 */
        __pyx_t_29 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_29 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1239
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0
 */
        __pyx_t_8 = __pyx_v_cell->index;
        __pyx_t_30 = (2 * __pyx_v_ind);
        if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_30 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1240
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0
 */
        __pyx_t_8 = __pyx_v_next_cell->index;
        __pyx_t_31 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_31 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1241
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] =  1.0
 *                 else:
 */
        __pyx_t_32 = (2 * __pyx_v_ind);
        if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_32 * __pyx_v_V.strides[0]) )) = -1.0;

        /* "discretize/tree_ext.pyx":1242
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction
 */
        __pyx_t_33 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_33 * __pyx_v_V.strides[0]) )) = 1.0;

        /* "discretize/tree_ext.pyx":1235
 *                         V[2*ind + 1] =  1.0
 *             else:
 *                 if cell.neighbors[1].is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.faces[1].index
 *                     I[2*ind    ] = ind
 */
        goto __pyx_L10;
      }

      /* "discretize/tree_ext.pyx":1244
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].faces[0].index #0 2 4 6
 *                         I[2*ind    ] = ind
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
        } else {
          __pyx_t_19 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1244, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_20 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1244, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_20)) {
            if (likely(PyList_CheckExact(__pyx_t_2))) {
              if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_5); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1244, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1244, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_5); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1244, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1244, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_20(__pyx_t_2);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1244, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "discretize/tree_ext.pyx":1245
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction
 *                         ind = next_cell.children[2*i].faces[0].index #0 2 4 6             # <<<<<<<<<<<<<<
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 */
          __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1245, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1245, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = ((__pyx_v_next_cell->children[__pyx_t_21])->faces[0])->index;
          __pyx_v_ind = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1246
 *                     for i in range(4): # four neighbors in +x direction
 *                         ind = next_cell.children[2*i].faces[0].index #0 2 4 6
 *                         I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 */
          __pyx_t_34 = (2 * __pyx_v_ind);
          if (__pyx_t_34 < 0) __pyx_t_34 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_34 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1247
 *                         ind = next_cell.children[2*i].faces[0].index #0 2 4 6
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 */
          __pyx_t_35 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_35 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1248
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = -1.0
 */
          __pyx_t_8 = __pyx_v_cell->index;
          __pyx_t_36 = (2 * __pyx_v_ind);
          if (__pyx_t_36 < 0) __pyx_t_36 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_36 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1249
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index             # <<<<<<<<<<<<<<
 *                         V[2*ind    ] = -1.0
 *                         V[2*ind + 1] =  1.0
 */
          __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1249, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1249, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_8 = (__pyx_v_next_cell->children[__pyx_t_21])->index;
          __pyx_t_37 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_37 < 0) __pyx_t_37 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_37 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1250
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                         V[2*ind + 1] =  1.0
 * 
 */
          __pyx_t_38 = (2 * __pyx_v_ind);
          if (__pyx_t_38 < 0) __pyx_t_38 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_38 * __pyx_v_V.strides[0]) )) = -1.0;

          /* "discretize/tree_ext.pyx":1251
 *                         J[2*ind + 1] = next_cell.children[2*i].index
 *                         V[2*ind    ] = -1.0
 *                         V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFx, self.nC))
 */
          __pyx_t_39 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_39 < 0) __pyx_t_39 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_39 * __pyx_v_V.strides[0]) )) = 1.0;

          /* "discretize/tree_ext.pyx":1244
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].faces[0].index #0 2 4 6
 *                         I[2*ind    ] = ind
 */
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L10:;
    }
    __pyx_L6:;

    /* "discretize/tree_ext.pyx":1212
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[1]
 *             if next_cell == NULL:
 */
    __pyx_L3_continue:;
  }

  /* "discretize/tree_ext.pyx":1253
 *                         V[2*ind + 1] =  1.0
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFx, self.nC))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_40 = PyTuple_New(2); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_40, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_40, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_40) < 0) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;
  __pyx_t_40 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_40;
  __pyx_t_40 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1205
 * 
 *     @cython.boundscheck(False)
 *     def _cellGradxStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFx, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._cellGradxStencil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1256
 * 
 *     @cython.boundscheck(False)
 *     def _cellGradyStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_25_cellGradyStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_25_cellGradyStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cellGradyStencil (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_24_cellGradyStencil(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_24_cellGradyStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_dim;
  int_t __pyx_v_ind;
  Cell *__pyx_v_cell;
  Cell *__pyx_v_next_cell;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_t_8;
  std::vector<Cell *> ::iterator __pyx_t_9;
  std::vector<Cell *>  *__pyx_t_10;
  Cell *__pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  PyObject *__pyx_t_40 = NULL;
  __Pyx_RefNannySetupContext("_cellGradyStencil", 0);

  /* "discretize/tree_ext.pyx":1257
 *     @cython.boundscheck(False)
 *     def _cellGradyStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFy, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1258
 *     def _cellGradyStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFy, dtype=np.float64)
 *         cdef int dim = self._dim
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1259
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFy, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int dim = self._dim
 *         cdef int_t ind
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1260
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFy, dtype=np.float64)
 *         cdef int dim = self._dim             # <<<<<<<<<<<<<<
 *         cdef int_t ind
 * 
 */
  __pyx_t_8 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_8;

  /* "discretize/tree_ext.pyx":1263
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[3]
 *             if next_cell == NULL:
 */
  __pyx_t_10 = &__pyx_v_self->tree->cells;
  __pyx_t_9 = __pyx_t_10->begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_t_10->end())) break;
    __pyx_t_11 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_cell = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1264
 * 
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[3]             # <<<<<<<<<<<<<<
 *             if next_cell == NULL:
 *                 continue
 */
    __pyx_v_next_cell = (__pyx_v_cell->neighbors[3]);

    /* "discretize/tree_ext.pyx":1265
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[3]
 *             if next_cell == NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if dim==2:
 */
    __pyx_t_12 = ((__pyx_v_next_cell == NULL) != 0);
    if (__pyx_t_12) {

      /* "discretize/tree_ext.pyx":1266
 *             next_cell = cell.neighbors[3]
 *             if next_cell == NULL:
 *                 continue             # <<<<<<<<<<<<<<
 *             if dim==2:
 *                 if next_cell.is_leaf():
 */
      goto __pyx_L3_continue;

      /* "discretize/tree_ext.pyx":1265
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[3]
 *             if next_cell == NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if dim==2:
 */
    }

    /* "discretize/tree_ext.pyx":1267
 *             if next_cell == NULL:
 *                 continue
 *             if dim==2:             # <<<<<<<<<<<<<<
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[1].index
 */
    __pyx_t_12 = ((__pyx_v_dim == 2) != 0);
    if (__pyx_t_12) {

      /* "discretize/tree_ext.pyx":1268
 *                 continue
 *             if dim==2:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.edges[1].index
 *                     I[2*ind    ] = ind
 */
      __pyx_t_12 = (__pyx_v_next_cell->is_leaf() != 0);
      if (__pyx_t_12) {

        /* "discretize/tree_ext.pyx":1269
 *             if dim==2:
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[1].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_8 = (__pyx_v_cell->edges[1])->index;
        __pyx_v_ind = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1270
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[1].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_13 = (2 * __pyx_v_ind);
        if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1271
 *                     ind = cell.edges[1].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 */
        __pyx_t_14 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1272
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0
 */
        __pyx_t_8 = __pyx_v_cell->index;
        __pyx_t_15 = (2 * __pyx_v_ind);
        if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1273
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0
 */
        __pyx_t_8 = __pyx_v_next_cell->index;
        __pyx_t_16 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1274
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] =  1.0
 *                 else:
 */
        __pyx_t_17 = (2 * __pyx_v_ind);
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = -1.0;

        /* "discretize/tree_ext.pyx":1275
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction
 */
        __pyx_t_18 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = 1.0;

        /* "discretize/tree_ext.pyx":1268
 *                 continue
 *             if dim==2:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.edges[1].index
 *                     I[2*ind    ] = ind
 */
        goto __pyx_L7;
      }

      /* "discretize/tree_ext.pyx":1277
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
          __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
        } else {
          __pyx_t_19 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1277, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_20 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1277, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        for (;;) {
          if (likely(!__pyx_t_20)) {
            if (likely(PyList_CheckExact(__pyx_t_5))) {
              if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1277, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            } else {
              if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_19); __Pyx_INCREF(__pyx_t_2); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1277, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            }
          } else {
            __pyx_t_2 = __pyx_t_20(__pyx_t_5);
            if (unlikely(!__pyx_t_2)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1277, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "discretize/tree_ext.pyx":1278
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction
 *                         ind = next_cell.children[i].edges[0].index             # <<<<<<<<<<<<<<
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 */
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1278, __pyx_L1_error)
          __pyx_t_8 = ((__pyx_v_next_cell->children[__pyx_t_21])->edges[0])->index;
          __pyx_v_ind = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1279
 *                     for i in range(2): # two neighbors in +y direction
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 */
          __pyx_t_22 = (2 * __pyx_v_ind);
          if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_22 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1280
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[i].index
 */
          __pyx_t_23 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_23 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1281
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                         J[2*ind + 1] = next_cell.children[i].index
 *                         V[2*ind    ] = -1.0
 */
          __pyx_t_8 = __pyx_v_cell->index;
          __pyx_t_24 = (2 * __pyx_v_ind);
          if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_24 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1282
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[i].index             # <<<<<<<<<<<<<<
 *                         V[2*ind    ] = -1.0
 *                         V[2*ind + 1] =  1.0
 */
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1282, __pyx_L1_error)
          __pyx_t_8 = (__pyx_v_next_cell->children[__pyx_t_21])->index;
          __pyx_t_25 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_25 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1283
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[i].index
 *                         V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                         V[2*ind + 1] =  1.0
 *             else:
 */
          __pyx_t_26 = (2 * __pyx_v_ind);
          if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_26 * __pyx_v_V.strides[0]) )) = -1.0;

          /* "discretize/tree_ext.pyx":1284
 *                         J[2*ind + 1] = next_cell.children[i].index
 *                         V[2*ind    ] = -1.0
 *                         V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 *             else:
 *                 if next_cell.is_leaf():
 */
          __pyx_t_27 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_27 * __pyx_v_V.strides[0]) )) = 1.0;

          /* "discretize/tree_ext.pyx":1277
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind
 */
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L7:;

      /* "discretize/tree_ext.pyx":1267
 *             if next_cell == NULL:
 *                 continue
 *             if dim==2:             # <<<<<<<<<<<<<<
 *                 if next_cell.is_leaf():
 *                     ind = cell.edges[1].index
 */
      goto __pyx_L6;
    }

    /* "discretize/tree_ext.pyx":1286
 *                         V[2*ind + 1] =  1.0
 *             else:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.faces[3].index
 *                     I[2*ind    ] = ind
 */
    /*else*/ {
      __pyx_t_12 = (__pyx_v_next_cell->is_leaf() != 0);
      if (__pyx_t_12) {

        /* "discretize/tree_ext.pyx":1287
 *             else:
 *                 if next_cell.is_leaf():
 *                     ind = cell.faces[3].index             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_8 = (__pyx_v_cell->faces[3])->index;
        __pyx_v_ind = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1288
 *                 if next_cell.is_leaf():
 *                     ind = cell.faces[3].index
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_28 = (2 * __pyx_v_ind);
        if (__pyx_t_28 < 0) __pyx_t_28 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_28 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1289
 *                     ind = cell.faces[3].index
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 */
        __pyx_t_29 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_29 < 0) __pyx_t_29 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_29 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1290
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0
 */
        __pyx_t_8 = __pyx_v_cell->index;
        __pyx_t_30 = (2 * __pyx_v_ind);
        if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_30 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1291
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0
 */
        __pyx_t_8 = __pyx_v_next_cell->index;
        __pyx_t_31 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_31 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

        /* "discretize/tree_ext.pyx":1292
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] =  1.0
 *                 else:
 */
        __pyx_t_32 = (2 * __pyx_v_ind);
        if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_32 * __pyx_v_V.strides[0]) )) = -1.0;

        /* "discretize/tree_ext.pyx":1293
 *                     J[2*ind + 1] = next_cell.index
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction
 */
        __pyx_t_33 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_33 < 0) __pyx_t_33 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_33 * __pyx_v_V.strides[0]) )) = 1.0;

        /* "discretize/tree_ext.pyx":1286
 *                         V[2*ind + 1] =  1.0
 *             else:
 *                 if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                     ind = cell.faces[3].index
 *                     I[2*ind    ] = ind
 */
        goto __pyx_L10;
      }

      /* "discretize/tree_ext.pyx":1295
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index #0, 1, 4, 5
 *                         I[2*ind    ] = ind
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
        } else {
          __pyx_t_19 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_20 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1295, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_20)) {
            if (likely(PyList_CheckExact(__pyx_t_2))) {
              if (__pyx_t_19 >= PyList_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_5); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1295, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_19 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_5); __pyx_t_19++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1295, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_20(__pyx_t_2);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1295, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "discretize/tree_ext.pyx":1296
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index #0, 1, 4, 5             # <<<<<<<<<<<<<<
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 */
          __pyx_t_5 = __Pyx_PyInt_RshiftObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_int_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyInt_RemainderObjC(__pyx_v_i, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1296, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_8 = ((__pyx_v_next_cell->children[__pyx_t_21])->faces[2])->index;
          __pyx_v_ind = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1297
 *                     for i in range(4): # four neighbors in +y direction
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index #0, 1, 4, 5
 *                         I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 */
          __pyx_t_34 = (2 * __pyx_v_ind);
          if (__pyx_t_34 < 0) __pyx_t_34 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_34 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1298
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index #0, 1, 4, 5
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index
 */
          __pyx_t_35 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_35 < 0) __pyx_t_35 += __pyx_v_I.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_35 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

          /* "discretize/tree_ext.pyx":1299
 *                         I[2*ind    ] = ind
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index
 *                         V[2*ind    ] = -1.0
 */
          __pyx_t_8 = __pyx_v_cell->index;
          __pyx_t_36 = (2 * __pyx_v_ind);
          if (__pyx_t_36 < 0) __pyx_t_36 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_36 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1300
 *                         I[2*ind + 1] = ind
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index             # <<<<<<<<<<<<<<
 *                         V[2*ind    ] = -1.0
 *                         V[2*ind + 1] = 1.0
 */
          __pyx_t_1 = __Pyx_PyInt_RshiftObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_int_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyInt_RemainderObjC(__pyx_v_i, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_21 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_21 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_8 = (__pyx_v_next_cell->children[__pyx_t_21])->index;
          __pyx_t_37 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_37 < 0) __pyx_t_37 += __pyx_v_J.shape[0];
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_37 * __pyx_v_J.strides[0]) )) = __pyx_t_8;

          /* "discretize/tree_ext.pyx":1301
 *                         J[2*ind    ] = cell.index
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index
 *                         V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                         V[2*ind + 1] = 1.0
 * 
 */
          __pyx_t_38 = (2 * __pyx_v_ind);
          if (__pyx_t_38 < 0) __pyx_t_38 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_38 * __pyx_v_V.strides[0]) )) = -1.0;

          /* "discretize/tree_ext.pyx":1302
 *                         J[2*ind + 1] = next_cell.children[(i>>1)*4 + i%2].index
 *                         V[2*ind    ] = -1.0
 *                         V[2*ind + 1] = 1.0             # <<<<<<<<<<<<<<
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFy, self.nC))
 */
          __pyx_t_39 = ((2 * __pyx_v_ind) + 1);
          if (__pyx_t_39 < 0) __pyx_t_39 += __pyx_v_V.shape[0];
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_39 * __pyx_v_V.strides[0]) )) = 1.0;

          /* "discretize/tree_ext.pyx":1295
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index #0, 1, 4, 5
 *                         I[2*ind    ] = ind
 */
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L10:;
    }
    __pyx_L6:;

    /* "discretize/tree_ext.pyx":1263
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[3]
 *             if next_cell == NULL:
 */
    __pyx_L3_continue:;
  }

  /* "discretize/tree_ext.pyx":1304
 *                         V[2*ind + 1] = 1.0
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFy, self.nC))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_40 = PyTuple_New(2); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_40, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_40, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_shape, __pyx_t_40) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;
  __pyx_t_40 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_40;
  __pyx_t_40 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1256
 * 
 *     @cython.boundscheck(False)
 *     def _cellGradyStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFy, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._cellGradyStencil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1307
 * 
 *     @cython.boundscheck(False)
 *     def _cellGradzStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_27_cellGradzStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_27_cellGradzStencil(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cellGradzStencil (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_26_cellGradzStencil(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_26_cellGradzStencil(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_v_ind;
  Cell *__pyx_v_cell;
  Cell *__pyx_v_next_cell;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_8;
  std::vector<Cell *>  *__pyx_t_9;
  Cell *__pyx_t_10;
  int __pyx_t_11;
  int_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  long __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  PyObject *__pyx_t_26 = NULL;
  __Pyx_RefNannySetupContext("_cellGradzStencil", 0);

  /* "discretize/tree_ext.pyx":1308
 *     @cython.boundscheck(False)
 *     def _cellGradzStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFz, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1309
 *     def _cellGradzStencil(self):
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFz, dtype=np.float64)
 *         cdef int_t ind
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1310
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.zeros(2*self.ntFz, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int_t ind
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1313
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:
 */
  __pyx_t_9 = &__pyx_v_self->tree->cells;
  __pyx_t_8 = __pyx_t_9->begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_t_9->end())) break;
    __pyx_t_10 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_cell = __pyx_t_10;

    /* "discretize/tree_ext.pyx":1314
 * 
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[5]             # <<<<<<<<<<<<<<
 *             if next_cell==NULL:
 *                 continue
 */
    __pyx_v_next_cell = (__pyx_v_cell->neighbors[5]);

    /* "discretize/tree_ext.pyx":1315
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if next_cell.is_leaf():
 */
    __pyx_t_11 = ((__pyx_v_next_cell == NULL) != 0);
    if (__pyx_t_11) {

      /* "discretize/tree_ext.pyx":1316
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:
 *                 continue             # <<<<<<<<<<<<<<
 *             if next_cell.is_leaf():
 *                 ind = cell.faces[5].index
 */
      goto __pyx_L3_continue;

      /* "discretize/tree_ext.pyx":1315
 *         for cell in self.tree.cells :
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             if next_cell.is_leaf():
 */
    }

    /* "discretize/tree_ext.pyx":1317
 *             if next_cell==NULL:
 *                 continue
 *             if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                 ind = cell.faces[5].index
 *                 I[2*ind    ] = ind
 */
    __pyx_t_11 = (__pyx_v_next_cell->is_leaf() != 0);
    if (__pyx_t_11) {

      /* "discretize/tree_ext.pyx":1318
 *                 continue
 *             if next_cell.is_leaf():
 *                 ind = cell.faces[5].index             # <<<<<<<<<<<<<<
 *                 I[2*ind    ] = ind
 *                 I[2*ind + 1] = ind
 */
      __pyx_t_12 = (__pyx_v_cell->faces[5])->index;
      __pyx_v_ind = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1319
 *             if next_cell.is_leaf():
 *                 ind = cell.faces[5].index
 *                 I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                 I[2*ind + 1] = ind
 *                 J[2*ind    ] = cell.index
 */
      __pyx_t_13 = (2 * __pyx_v_ind);
      if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

      /* "discretize/tree_ext.pyx":1320
 *                 ind = cell.faces[5].index
 *                 I[2*ind    ] = ind
 *                 I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                 J[2*ind    ] = cell.index
 *                 J[2*ind + 1] = next_cell.index
 */
      __pyx_t_14 = ((2 * __pyx_v_ind) + 1);
      if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

      /* "discretize/tree_ext.pyx":1321
 *                 I[2*ind    ] = ind
 *                 I[2*ind + 1] = ind
 *                 J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                 J[2*ind + 1] = next_cell.index
 *                 V[2*ind    ] = -1.0
 */
      __pyx_t_12 = __pyx_v_cell->index;
      __pyx_t_15 = (2 * __pyx_v_ind);
      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1322
 *                 I[2*ind + 1] = ind
 *                 J[2*ind    ] = cell.index
 *                 J[2*ind + 1] = next_cell.index             # <<<<<<<<<<<<<<
 *                 V[2*ind    ] = -1.0
 *                 V[2*ind + 1] =  1.0
 */
      __pyx_t_12 = __pyx_v_next_cell->index;
      __pyx_t_16 = ((2 * __pyx_v_ind) + 1);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1323
 *                 J[2*ind    ] = cell.index
 *                 J[2*ind + 1] = next_cell.index
 *                 V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                 V[2*ind + 1] =  1.0
 *             else:
 */
      __pyx_t_17 = (2 * __pyx_v_ind);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = -1.0;

      /* "discretize/tree_ext.pyx":1324
 *                 J[2*ind + 1] = next_cell.index
 *                 V[2*ind    ] = -1.0
 *                 V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 *             else:
 *                 for i in range(4): # four neighbors in +z direction
 */
      __pyx_t_18 = ((2 * __pyx_v_ind) + 1);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = 1.0;

      /* "discretize/tree_ext.pyx":1317
 *             if next_cell==NULL:
 *                 continue
 *             if next_cell.is_leaf():             # <<<<<<<<<<<<<<
 *                 ind = cell.faces[5].index
 *                 I[2*ind    ] = ind
 */
      goto __pyx_L6;
    }

    /* "discretize/tree_ext.pyx":1326
 *                 V[2*ind + 1] =  1.0
 *             else:
 *                 for i in range(4): # four neighbors in +z direction             # <<<<<<<<<<<<<<
 *                     ind = next_cell.children[i].faces[4].index #0, 1, 2, 3
 *                     I[2*ind    ] = ind
 */
    /*else*/ {
      for (__pyx_t_19 = 0; __pyx_t_19 < 4; __pyx_t_19+=1) {
        __pyx_v_i = __pyx_t_19;

        /* "discretize/tree_ext.pyx":1327
 *             else:
 *                 for i in range(4): # four neighbors in +z direction
 *                     ind = next_cell.children[i].faces[4].index #0, 1, 2, 3             # <<<<<<<<<<<<<<
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 */
        __pyx_t_12 = ((__pyx_v_next_cell->children[__pyx_v_i])->faces[4])->index;
        __pyx_v_ind = __pyx_t_12;

        /* "discretize/tree_ext.pyx":1328
 *                 for i in range(4): # four neighbors in +z direction
 *                     ind = next_cell.children[i].faces[4].index #0, 1, 2, 3
 *                     I[2*ind    ] = ind             # <<<<<<<<<<<<<<
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 */
        __pyx_t_20 = (2 * __pyx_v_ind);
        if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_20 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1329
 *                     ind = next_cell.children[i].faces[4].index #0, 1, 2, 3
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind             # <<<<<<<<<<<<<<
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.children[i].index
 */
        __pyx_t_21 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_21 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

        /* "discretize/tree_ext.pyx":1330
 *                     I[2*ind    ] = ind
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index             # <<<<<<<<<<<<<<
 *                     J[2*ind + 1] = next_cell.children[i].index
 *                     V[2*ind    ] = -1.0
 */
        __pyx_t_12 = __pyx_v_cell->index;
        __pyx_t_22 = (2 * __pyx_v_ind);
        if (__pyx_t_22 < 0) __pyx_t_22 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_22 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

        /* "discretize/tree_ext.pyx":1331
 *                     I[2*ind + 1] = ind
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.children[i].index             # <<<<<<<<<<<<<<
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0
 */
        __pyx_t_12 = (__pyx_v_next_cell->children[__pyx_v_i])->index;
        __pyx_t_23 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_23 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

        /* "discretize/tree_ext.pyx":1332
 *                     J[2*ind    ] = cell.index
 *                     J[2*ind + 1] = next_cell.children[i].index
 *                     V[2*ind    ] = -1.0             # <<<<<<<<<<<<<<
 *                     V[2*ind + 1] =  1.0
 * 
 */
        __pyx_t_24 = (2 * __pyx_v_ind);
        if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_24 * __pyx_v_V.strides[0]) )) = -1.0;

        /* "discretize/tree_ext.pyx":1333
 *                     J[2*ind + 1] = next_cell.children[i].index
 *                     V[2*ind    ] = -1.0
 *                     V[2*ind + 1] =  1.0             # <<<<<<<<<<<<<<
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFz, self.nC))
 */
        __pyx_t_25 = ((2 * __pyx_v_ind) + 1);
        if (__pyx_t_25 < 0) __pyx_t_25 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_25 * __pyx_v_V.strides[0]) )) = 1.0;
      }
    }
    __pyx_L6:;

    /* "discretize/tree_ext.pyx":1313
 *         cdef int_t ind
 * 
 *         for cell in self.tree.cells :             # <<<<<<<<<<<<<<
 *             next_cell = cell.neighbors[5]
 *             if next_cell==NULL:
 */
    __pyx_L3_continue:;
  }

  /* "discretize/tree_ext.pyx":1335
 *                     V[2*ind + 1] =  1.0
 * 
 *         return sp.csr_matrix((V, (I,J)), shape=(self.ntFz, self.nC))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_26 = PyTuple_New(2); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_26, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_26) < 0) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_26;
  __pyx_t_26 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1307
 * 
 *     @cython.boundscheck(False)
 *     def _cellGradzStencil(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.zeros(2*self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.zeros(2*self.ntFz, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._cellGradzStencil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1338
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_edges_x(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_29_deflate_edges_x(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_29_deflate_edges_x(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_edges_x (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_28_deflate_edges_x(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_28_deflate_edges_x(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_v_Rh = NULL;
  PyObject *__pyx_v_last_ind = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Edge *> ::iterator __pyx_t_8;
  edge_map_t *__pyx_t_9;
  std::pair<int_t,Edge *>  __pyx_t_10;
  Edge *__pyx_t_11;
  int_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  int __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  __Pyx_RefNannySetupContext("_deflate_edges_x", 0);

  /* "discretize/tree_ext.pyx":1341
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEx, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEx, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1342
 *         #J is input index (without hanging)
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEx, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEx, dtype=np.float64)
 *         cdef Edge *edge
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1343
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEx, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef Edge *edge
 *         cdef np.int64_t ii
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1347
 *         cdef np.int64_t ii
 *         #x edges:
 *         for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             ii = edge.index
 */
  __pyx_t_9 = &__pyx_v_self->tree->edges_x;
  __pyx_t_8 = __pyx_t_9->begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_t_9->end())) break;
    __pyx_t_10 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_it = __pyx_t_10;

    /* "discretize/tree_ext.pyx":1348
 *         #x edges:
 *         for it in self.tree.edges_x:
 *             edge = it.second             # <<<<<<<<<<<<<<
 *             ii = edge.index
 *             I[2*ii    ] = ii
 */
    __pyx_t_11 = __pyx_v_it.second;
    __pyx_v_edge = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1349
 *         for it in self.tree.edges_x:
 *             edge = it.second
 *             ii = edge.index             # <<<<<<<<<<<<<<
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 */
    __pyx_t_12 = __pyx_v_edge->index;
    __pyx_v_ii = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1350
 *             edge = it.second
 *             ii = edge.index
 *             I[2*ii    ] = ii             # <<<<<<<<<<<<<<
 *             I[2*ii + 1] = ii
 *             if edge.hanging:
 */
    __pyx_t_13 = (2 * __pyx_v_ii);
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1351
 *             ii = edge.index
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii             # <<<<<<<<<<<<<<
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index
 */
    __pyx_t_14 = ((2 * __pyx_v_ii) + 1);
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1352
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 *             if edge.hanging:             # <<<<<<<<<<<<<<
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index
 */
    __pyx_t_15 = (__pyx_v_edge->hanging != 0);
    if (__pyx_t_15) {

      /* "discretize/tree_ext.pyx":1353
 *             I[2*ii + 1] = ii
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index             # <<<<<<<<<<<<<<
 *                 J[2*ii + 1] = edge.parents[1].index
 *             else:
 */
      __pyx_t_12 = (__pyx_v_edge->parents[0])->index;
      __pyx_t_16 = (2 * __pyx_v_ii);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1354
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index             # <<<<<<<<<<<<<<
 *             else:
 *                 J[2*ii    ] = ii
 */
      __pyx_t_12 = (__pyx_v_edge->parents[1])->index;
      __pyx_t_17 = ((2 * __pyx_v_ii) + 1);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1352
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 *             if edge.hanging:             # <<<<<<<<<<<<<<
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":1356
 *                 J[2*ii + 1] = edge.parents[1].index
 *             else:
 *                 J[2*ii    ] = ii             # <<<<<<<<<<<<<<
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5
 */
    /*else*/ {
      __pyx_t_18 = (2 * __pyx_v_ii);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_18 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;

      /* "discretize/tree_ext.pyx":1357
 *             else:
 *                 J[2*ii    ] = ii
 *                 J[2*ii + 1] = ii             # <<<<<<<<<<<<<<
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5
 */
      __pyx_t_19 = ((2 * __pyx_v_ii) + 1);
      if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_19 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;
    }
    __pyx_L5:;

    /* "discretize/tree_ext.pyx":1358
 *                 J[2*ii    ] = ii
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5             # <<<<<<<<<<<<<<
 *             V[2*ii + 1] = 0.5
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEx, self.ntEx))
 */
    __pyx_t_20 = (2 * __pyx_v_ii);
    if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_20 * __pyx_v_V.strides[0]) )) = 0.5;

    /* "discretize/tree_ext.pyx":1359
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5             # <<<<<<<<<<<<<<
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEx, self.ntEx))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 */
    __pyx_t_21 = ((2 * __pyx_v_ii) + 1);
    if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_21 * __pyx_v_V.strides[0]) )) = 0.5;

    /* "discretize/tree_ext.pyx":1347
 *         cdef np.int64_t ii
 *         #x edges:
 *         for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             ii = edge.index
 */
  }

  /* "discretize/tree_ext.pyx":1360
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEx, self.ntEx))             # <<<<<<<<<<<<<<
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_22) < 0) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Rh = __pyx_t_22;
  __pyx_t_22 = 0;

  /* "discretize/tree_ext.pyx":1362
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEx, self.ntEx))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)             # <<<<<<<<<<<<<<
 *         while(last_ind > self.nEx):
 *             Rh = Rh*Rh
 */
  __pyx_t_22 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_Rh, __pyx_n_s_getnnz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1362, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1362, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_22, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_15) {
    __Pyx_INCREF(__pyx_t_22);
    __pyx_t_5 = __pyx_t_22;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = __pyx_t_1;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __pyx_t_5;
  __Pyx_INCREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_last_ind = __pyx_t_22;
  __pyx_t_22 = 0;

  /* "discretize/tree_ext.pyx":1363
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)
 *         while(last_ind > self.nEx):             # <<<<<<<<<<<<<<
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)
 */
  while (1) {
    __pyx_t_22 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_last_ind, __pyx_t_22, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_15) break;

    /* "discretize/tree_ext.pyx":1364
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)
 *         while(last_ind > self.nEx):
 *             Rh = Rh*Rh             # <<<<<<<<<<<<<<
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)
 *         Rh = Rh[:, : last_ind]
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_Rh, __pyx_v_Rh); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_Rh, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1365
 *         while(last_ind > self.nEx):
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)             # <<<<<<<<<<<<<<
 *         Rh = Rh[:, : last_ind]
 *         return Rh
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Rh, __pyx_n_s_getnnz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_22 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1365, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_22);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
        __pyx_t_22 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1365, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
        __pyx_t_22 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1365, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1365, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1365, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_22, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_22 = __Pyx_GetItemInt(__pyx_t_2, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_22, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_15) {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_2 = __pyx_t_5;
    } else {
      __Pyx_INCREF(__pyx_t_22);
      __pyx_t_2 = __pyx_t_22;
    }
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_2;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_last_ind, __pyx_t_5);
    __pyx_t_5 = 0;
  }

  /* "discretize/tree_ext.pyx":1366
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)
 *         Rh = Rh[:, : last_ind]             # <<<<<<<<<<<<<<
 *         return Rh
 * 
 */
  __pyx_t_5 = PySlice_New(Py_None, __pyx_v_last_ind, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_slice__25);
  __Pyx_GIVEREF(__pyx_slice__25);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_slice__25);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_GetItem(__pyx_v_Rh, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_Rh, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":1367
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)
 *         Rh = Rh[:, : last_ind]
 *         return Rh             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Rh);
  __pyx_r = __pyx_v_Rh;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1338
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_edges_x(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_edges_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rh);
  __Pyx_XDECREF(__pyx_v_last_ind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1370
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_edges_y(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_31_deflate_edges_y(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_31_deflate_edges_y(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_edges_y (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_30_deflate_edges_y(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_30_deflate_edges_y(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  CYTHON_UNUSED int_t __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_v_Rh = NULL;
  PyObject *__pyx_v_last_ind = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Edge *> ::iterator __pyx_t_9;
  edge_map_t *__pyx_t_10;
  std::pair<int_t,Edge *>  __pyx_t_11;
  Edge *__pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  int __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  __Pyx_RefNannySetupContext("_deflate_edges_y", 0);

  /* "discretize/tree_ext.pyx":1373
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 *         cdef int_t dim = self._dim             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEy, dtype=np.int64)
 */
  __pyx_t_1 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_1;

  /* "discretize/tree_ext.pyx":1374
 *         #J is input index (without hanging)
 *         cdef int_t dim = self._dim
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEy, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEy, dtype=np.float64)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_2, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_I = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1375
 *         cdef int_t dim = self._dim
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEy, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEy, dtype=np.float64)
 *         cdef Edge *edge
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_J = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1376
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEy, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef Edge *edge
 *         cdef np.int64_t ii
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_3);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_V = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1380
 *         cdef np.int64_t ii
 *         #x edges:
 *         for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             ii = edge.index
 */
  __pyx_t_10 = &__pyx_v_self->tree->edges_y;
  __pyx_t_9 = __pyx_t_10->begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_t_10->end())) break;
    __pyx_t_11 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_it = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1381
 *         #x edges:
 *         for it in self.tree.edges_y:
 *             edge = it.second             # <<<<<<<<<<<<<<
 *             ii = edge.index
 *             I[2*ii    ] = ii
 */
    __pyx_t_12 = __pyx_v_it.second;
    __pyx_v_edge = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1382
 *         for it in self.tree.edges_y:
 *             edge = it.second
 *             ii = edge.index             # <<<<<<<<<<<<<<
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 */
    __pyx_t_1 = __pyx_v_edge->index;
    __pyx_v_ii = __pyx_t_1;

    /* "discretize/tree_ext.pyx":1383
 *             edge = it.second
 *             ii = edge.index
 *             I[2*ii    ] = ii             # <<<<<<<<<<<<<<
 *             I[2*ii + 1] = ii
 *             if edge.hanging:
 */
    __pyx_t_13 = (2 * __pyx_v_ii);
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1384
 *             ii = edge.index
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii             # <<<<<<<<<<<<<<
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index
 */
    __pyx_t_14 = ((2 * __pyx_v_ii) + 1);
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1385
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 *             if edge.hanging:             # <<<<<<<<<<<<<<
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index
 */
    __pyx_t_15 = (__pyx_v_edge->hanging != 0);
    if (__pyx_t_15) {

      /* "discretize/tree_ext.pyx":1386
 *             I[2*ii + 1] = ii
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index             # <<<<<<<<<<<<<<
 *                 J[2*ii + 1] = edge.parents[1].index
 *             else:
 */
      __pyx_t_1 = (__pyx_v_edge->parents[0])->index;
      __pyx_t_16 = (2 * __pyx_v_ii);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_1;

      /* "discretize/tree_ext.pyx":1387
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index             # <<<<<<<<<<<<<<
 *             else:
 *                 J[2*ii    ] = ii
 */
      __pyx_t_1 = (__pyx_v_edge->parents[1])->index;
      __pyx_t_17 = ((2 * __pyx_v_ii) + 1);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_1;

      /* "discretize/tree_ext.pyx":1385
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 *             if edge.hanging:             # <<<<<<<<<<<<<<
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":1389
 *                 J[2*ii + 1] = edge.parents[1].index
 *             else:
 *                 J[2*ii    ] = ii             # <<<<<<<<<<<<<<
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5
 */
    /*else*/ {
      __pyx_t_18 = (2 * __pyx_v_ii);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_18 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;

      /* "discretize/tree_ext.pyx":1390
 *             else:
 *                 J[2*ii    ] = ii
 *                 J[2*ii + 1] = ii             # <<<<<<<<<<<<<<
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5
 */
      __pyx_t_19 = ((2 * __pyx_v_ii) + 1);
      if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_19 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;
    }
    __pyx_L5:;

    /* "discretize/tree_ext.pyx":1391
 *                 J[2*ii    ] = ii
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5             # <<<<<<<<<<<<<<
 *             V[2*ii + 1] = 0.5
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEy, self.ntEy))
 */
    __pyx_t_20 = (2 * __pyx_v_ii);
    if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_20 * __pyx_v_V.strides[0]) )) = 0.5;

    /* "discretize/tree_ext.pyx":1392
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5             # <<<<<<<<<<<<<<
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEy, self.ntEy))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 */
    __pyx_t_21 = ((2 * __pyx_v_ii) + 1);
    if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_21 * __pyx_v_V.strides[0]) )) = 0.5;

    /* "discretize/tree_ext.pyx":1380
 *         cdef np.int64_t ii
 *         #x edges:
 *         for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             ii = edge.index
 */
  }

  /* "discretize/tree_ext.pyx":1393
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEy, self.ntEy))             # <<<<<<<<<<<<<<
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_shape, __pyx_t_22) < 0) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Rh = __pyx_t_22;
  __pyx_t_22 = 0;

  /* "discretize/tree_ext.pyx":1395
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEy, self.ntEy))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)             # <<<<<<<<<<<<<<
 *         while(last_ind > self.nEy):
 *             Rh = Rh*Rh
 */
  __pyx_t_22 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_Rh, __pyx_n_s_getnnz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_22, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_15) {
    __Pyx_INCREF(__pyx_t_22);
    __pyx_t_6 = __pyx_t_22;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __pyx_t_6;
  __Pyx_INCREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_last_ind = __pyx_t_22;
  __pyx_t_22 = 0;

  /* "discretize/tree_ext.pyx":1396
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)
 *         while(last_ind > self.nEy):             # <<<<<<<<<<<<<<
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)
 */
  while (1) {
    __pyx_t_22 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_last_ind, __pyx_t_22, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_15) break;

    /* "discretize/tree_ext.pyx":1397
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)
 *         while(last_ind > self.nEy):
 *             Rh = Rh*Rh             # <<<<<<<<<<<<<<
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)
 *         Rh = Rh[:, : last_ind]
 */
    __pyx_t_6 = PyNumber_Multiply(__pyx_v_Rh, __pyx_v_Rh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_Rh, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "discretize/tree_ext.pyx":1398
 *         while(last_ind > self.nEy):
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)             # <<<<<<<<<<<<<<
 *         Rh = Rh[:, : last_ind]
 *         return Rh
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Rh, __pyx_n_s_getnnz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_22 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1398, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_22);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_22 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1398, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_22 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1398, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_22, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_22 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_t_22, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1398, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_15) {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_3 = __pyx_t_6;
    } else {
      __Pyx_INCREF(__pyx_t_22);
      __pyx_t_3 = __pyx_t_22;
    }
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_last_ind, __pyx_t_6);
    __pyx_t_6 = 0;
  }

  /* "discretize/tree_ext.pyx":1399
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)
 *         Rh = Rh[:, : last_ind]             # <<<<<<<<<<<<<<
 *         return Rh
 * 
 */
  __pyx_t_6 = PySlice_New(Py_None, __pyx_v_last_ind, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_slice__28);
  __Pyx_GIVEREF(__pyx_slice__28);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_slice__28);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_GetItem(__pyx_v_Rh, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_Rh, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":1400
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)
 *         Rh = Rh[:, : last_ind]
 *         return Rh             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Rh);
  __pyx_r = __pyx_v_Rh;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1370
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_edges_y(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_edges_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rh);
  __Pyx_XDECREF(__pyx_v_last_ind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1403
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_edges_z(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_33_deflate_edges_z(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_33_deflate_edges_z(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_edges_z (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_32_deflate_edges_z(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_32_deflate_edges_z(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  CYTHON_UNUSED int_t __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Edge *__pyx_v_edge;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_v_Rh = NULL;
  PyObject *__pyx_v_last_ind = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Edge *> ::iterator __pyx_t_9;
  edge_map_t *__pyx_t_10;
  std::pair<int_t,Edge *>  __pyx_t_11;
  Edge *__pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  int __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  __Pyx_RefNannySetupContext("_deflate_edges_z", 0);

  /* "discretize/tree_ext.pyx":1406
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 *         cdef int_t dim = self._dim             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEz, dtype=np.int64)
 */
  __pyx_t_1 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_1;

  /* "discretize/tree_ext.pyx":1407
 *         #J is input index (without hanging)
 *         cdef int_t dim = self._dim
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEz, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEz, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEz, dtype=np.float64)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_2, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_I = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1408
 *         cdef int_t dim = self._dim
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEz, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEz, dtype=np.float64)
 *         cdef Edge *edge
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_J = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1409
 *         cdef np.int64_t[:] I = np.empty(2*self.ntEz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(2*self.ntEz, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(2*self.ntEz, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef Edge *edge
 *         cdef np.int64_t ii
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_3);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_V = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1413
 *         cdef np.int64_t ii
 *         #x edges:
 *         for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             ii = edge.index
 */
  __pyx_t_10 = &__pyx_v_self->tree->edges_z;
  __pyx_t_9 = __pyx_t_10->begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_t_10->end())) break;
    __pyx_t_11 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_it = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1414
 *         #x edges:
 *         for it in self.tree.edges_z:
 *             edge = it.second             # <<<<<<<<<<<<<<
 *             ii = edge.index
 *             I[2*ii    ] = ii
 */
    __pyx_t_12 = __pyx_v_it.second;
    __pyx_v_edge = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1415
 *         for it in self.tree.edges_z:
 *             edge = it.second
 *             ii = edge.index             # <<<<<<<<<<<<<<
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 */
    __pyx_t_1 = __pyx_v_edge->index;
    __pyx_v_ii = __pyx_t_1;

    /* "discretize/tree_ext.pyx":1416
 *             edge = it.second
 *             ii = edge.index
 *             I[2*ii    ] = ii             # <<<<<<<<<<<<<<
 *             I[2*ii + 1] = ii
 *             if edge.hanging:
 */
    __pyx_t_13 = (2 * __pyx_v_ii);
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1417
 *             ii = edge.index
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii             # <<<<<<<<<<<<<<
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index
 */
    __pyx_t_14 = ((2 * __pyx_v_ii) + 1);
    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_14 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1418
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 *             if edge.hanging:             # <<<<<<<<<<<<<<
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index
 */
    __pyx_t_15 = (__pyx_v_edge->hanging != 0);
    if (__pyx_t_15) {

      /* "discretize/tree_ext.pyx":1419
 *             I[2*ii + 1] = ii
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index             # <<<<<<<<<<<<<<
 *                 J[2*ii + 1] = edge.parents[1].index
 *             else:
 */
      __pyx_t_1 = (__pyx_v_edge->parents[0])->index;
      __pyx_t_16 = (2 * __pyx_v_ii);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_1;

      /* "discretize/tree_ext.pyx":1420
 *             if edge.hanging:
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index             # <<<<<<<<<<<<<<
 *             else:
 *                 J[2*ii    ] = ii
 */
      __pyx_t_1 = (__pyx_v_edge->parents[1])->index;
      __pyx_t_17 = ((2 * __pyx_v_ii) + 1);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_1;

      /* "discretize/tree_ext.pyx":1418
 *             I[2*ii    ] = ii
 *             I[2*ii + 1] = ii
 *             if edge.hanging:             # <<<<<<<<<<<<<<
 *                 J[2*ii    ] = edge.parents[0].index
 *                 J[2*ii + 1] = edge.parents[1].index
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":1422
 *                 J[2*ii + 1] = edge.parents[1].index
 *             else:
 *                 J[2*ii    ] = ii             # <<<<<<<<<<<<<<
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5
 */
    /*else*/ {
      __pyx_t_18 = (2 * __pyx_v_ii);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_18 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;

      /* "discretize/tree_ext.pyx":1423
 *             else:
 *                 J[2*ii    ] = ii
 *                 J[2*ii + 1] = ii             # <<<<<<<<<<<<<<
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5
 */
      __pyx_t_19 = ((2 * __pyx_v_ii) + 1);
      if (__pyx_t_19 < 0) __pyx_t_19 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_19 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;
    }
    __pyx_L5:;

    /* "discretize/tree_ext.pyx":1424
 *                 J[2*ii    ] = ii
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5             # <<<<<<<<<<<<<<
 *             V[2*ii + 1] = 0.5
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEz, self.ntEz))
 */
    __pyx_t_20 = (2 * __pyx_v_ii);
    if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_20 * __pyx_v_V.strides[0]) )) = 0.5;

    /* "discretize/tree_ext.pyx":1425
 *                 J[2*ii + 1] = ii
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5             # <<<<<<<<<<<<<<
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEz, self.ntEz))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 */
    __pyx_t_21 = ((2 * __pyx_v_ii) + 1);
    if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_21 * __pyx_v_V.strides[0]) )) = 0.5;

    /* "discretize/tree_ext.pyx":1413
 *         cdef np.int64_t ii
 *         #x edges:
 *         for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *             edge = it.second
 *             ii = edge.index
 */
  }

  /* "discretize/tree_ext.pyx":1426
 *             V[2*ii    ] = 0.5
 *             V[2*ii + 1] = 0.5
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEz, self.ntEz))             # <<<<<<<<<<<<<<
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_shape, __pyx_t_22) < 0) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Rh = __pyx_t_22;
  __pyx_t_22 = 0;

  /* "discretize/tree_ext.pyx":1428
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEz, self.ntEz))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)             # <<<<<<<<<<<<<<
 *         while(last_ind > self.nEz):
 *             Rh = Rh*Rh
 */
  __pyx_t_22 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEz); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_Rh, __pyx_n_s_getnnz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1428, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1428, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1428, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_22, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_15) {
    __Pyx_INCREF(__pyx_t_22);
    __pyx_t_6 = __pyx_t_22;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __pyx_t_6;
  __Pyx_INCREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_last_ind = __pyx_t_22;
  __pyx_t_22 = 0;

  /* "discretize/tree_ext.pyx":1429
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)
 *         while(last_ind > self.nEz):             # <<<<<<<<<<<<<<
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)
 */
  while (1) {
    __pyx_t_22 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEz); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_last_ind, __pyx_t_22, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_15) break;

    /* "discretize/tree_ext.pyx":1430
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)
 *         while(last_ind > self.nEz):
 *             Rh = Rh*Rh             # <<<<<<<<<<<<<<
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)
 *         Rh = Rh[:, : last_ind]
 */
    __pyx_t_6 = PyNumber_Multiply(__pyx_v_Rh, __pyx_v_Rh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_Rh, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "discretize/tree_ext.pyx":1431
 *         while(last_ind > self.nEz):
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)             # <<<<<<<<<<<<<<
 *         Rh = Rh[:, : last_ind]
 *         return Rh
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_Rh, __pyx_n_s_getnnz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_22 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1431, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_22);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_22 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1431, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_22 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1431, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1431, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1431, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_22, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_22 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_t_22, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_15) {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_3 = __pyx_t_6;
    } else {
      __Pyx_INCREF(__pyx_t_22);
      __pyx_t_3 = __pyx_t_22;
    }
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_last_ind, __pyx_t_6);
    __pyx_t_6 = 0;
  }

  /* "discretize/tree_ext.pyx":1432
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)
 *         Rh = Rh[:, : last_ind]             # <<<<<<<<<<<<<<
 *         return Rh
 * 
 */
  __pyx_t_6 = PySlice_New(Py_None, __pyx_v_last_ind, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_slice__31);
  __Pyx_GIVEREF(__pyx_slice__31);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_slice__31);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_GetItem(__pyx_v_Rh, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_Rh, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":1433
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)
 *         Rh = Rh[:, : last_ind]
 *         return Rh             # <<<<<<<<<<<<<<
 * 
 *     def _deflate_edges(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Rh);
  __pyx_r = __pyx_v_Rh;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1403
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_edges_z(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_edges_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rh);
  __Pyx_XDECREF(__pyx_v_last_ind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1435
 *         return Rh
 * 
 *     def _deflate_edges(self):             # <<<<<<<<<<<<<<
 *         Rx = self._deflate_edges_x()
 *         Ry = self._deflate_edges_y()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_35_deflate_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_35_deflate_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_edges (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_34_deflate_edges(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_34_deflate_edges(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_Rx = NULL;
  PyObject *__pyx_v_Ry = NULL;
  PyObject *__pyx_v_Rz = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_deflate_edges", 0);

  /* "discretize/tree_ext.pyx":1436
 * 
 *     def _deflate_edges(self):
 *         Rx = self._deflate_edges_x()             # <<<<<<<<<<<<<<
 *         Ry = self._deflate_edges_y()
 *         Rz = self._deflate_edges_z()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1436, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Rx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":1437
 *     def _deflate_edges(self):
 *         Rx = self._deflate_edges_x()
 *         Ry = self._deflate_edges_y()             # <<<<<<<<<<<<<<
 *         Rz = self._deflate_edges_z()
 *         return sp.block_diag((Rx, Ry, Rz))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges_y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1437, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Ry = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":1438
 *         Rx = self._deflate_edges_x()
 *         Ry = self._deflate_edges_y()
 *         Rz = self._deflate_edges_z()             # <<<<<<<<<<<<<<
 *         return sp.block_diag((Rx, Ry, Rz))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1438, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_Rz = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":1439
 *         Ry = self._deflate_edges_y()
 *         Rz = self._deflate_edges_z()
 *         return sp.block_diag((Rx, Ry, Rz))             # <<<<<<<<<<<<<<
 * 
 *     def _deflate_faces(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_block_diag); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_Rx);
  __Pyx_GIVEREF(__pyx_v_Rx);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_Rx);
  __Pyx_INCREF(__pyx_v_Ry);
  __Pyx_GIVEREF(__pyx_v_Ry);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_Ry);
  __Pyx_INCREF(__pyx_v_Rz);
  __Pyx_GIVEREF(__pyx_v_Rz);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_Rz);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1439, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1439, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1435
 *         return Rh
 * 
 *     def _deflate_edges(self):             # <<<<<<<<<<<<<<
 *         Rx = self._deflate_edges_x()
 *         Ry = self._deflate_edges_y()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Rx);
  __Pyx_XDECREF(__pyx_v_Ry);
  __Pyx_XDECREF(__pyx_v_Rz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1441
 *         return sp.block_diag((Rx, Ry, Rz))
 * 
 *     def _deflate_faces(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2):
 *             Rx = self._deflate_edges_x()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_37_deflate_faces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_37_deflate_faces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_faces (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_36_deflate_faces(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_36_deflate_faces(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_Rx = NULL;
  PyObject *__pyx_v_Ry = NULL;
  PyObject *__pyx_v_Rz = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_deflate_faces", 0);

  /* "discretize/tree_ext.pyx":1442
 * 
 *     def _deflate_faces(self):
 *         if(self._dim == 2):             # <<<<<<<<<<<<<<
 *             Rx = self._deflate_edges_x()
 *             Ry = self._deflate_edges_y()
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":1443
 *     def _deflate_faces(self):
 *         if(self._dim == 2):
 *             Rx = self._deflate_edges_x()             # <<<<<<<<<<<<<<
 *             Ry = self._deflate_edges_y()
 *             return sp.block_diag((Ry, Rx))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1443, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1443, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Rx = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1444
 *         if(self._dim == 2):
 *             Rx = self._deflate_edges_x()
 *             Ry = self._deflate_edges_y()             # <<<<<<<<<<<<<<
 *             return sp.block_diag((Ry, Rx))
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Ry = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1445
 *             Rx = self._deflate_edges_x()
 *             Ry = self._deflate_edges_y()
 *             return sp.block_diag((Ry, Rx))             # <<<<<<<<<<<<<<
 *         else:
 *             Rx = self._deflate_faces_x()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_block_diag); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_Ry);
    __Pyx_GIVEREF(__pyx_v_Ry);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_Ry);
    __Pyx_INCREF(__pyx_v_Rx);
    __Pyx_GIVEREF(__pyx_v_Rx);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_Rx);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1445, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1442
 * 
 *     def _deflate_faces(self):
 *         if(self._dim == 2):             # <<<<<<<<<<<<<<
 *             Rx = self._deflate_edges_x()
 *             Ry = self._deflate_edges_y()
 */
  }

  /* "discretize/tree_ext.pyx":1447
 *             return sp.block_diag((Ry, Rx))
 *         else:
 *             Rx = self._deflate_faces_x()             # <<<<<<<<<<<<<<
 *             Ry = self._deflate_faces_y()
 *             Rz = self._deflate_faces_z()
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_faces_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1447, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_Rx = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1448
 *         else:
 *             Rx = self._deflate_faces_x()
 *             Ry = self._deflate_faces_y()             # <<<<<<<<<<<<<<
 *             Rz = self._deflate_faces_z()
 *             return sp.block_diag((Rx, Ry, Rz))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_faces_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1448, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1448, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_Ry = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1449
 *             Rx = self._deflate_faces_x()
 *             Ry = self._deflate_faces_y()
 *             Rz = self._deflate_faces_z()             # <<<<<<<<<<<<<<
 *             return sp.block_diag((Rx, Ry, Rz))
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_faces_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1449, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1449, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_Rz = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1450
 *             Ry = self._deflate_faces_y()
 *             Rz = self._deflate_faces_z()
 *             return sp.block_diag((Rx, Ry, Rz))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_block_diag); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_Rx);
    __Pyx_GIVEREF(__pyx_v_Rx);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_Rx);
    __Pyx_INCREF(__pyx_v_Ry);
    __Pyx_GIVEREF(__pyx_v_Ry);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_Ry);
    __Pyx_INCREF(__pyx_v_Rz);
    __Pyx_GIVEREF(__pyx_v_Rz);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_Rz);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1450, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1450, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "discretize/tree_ext.pyx":1441
 *         return sp.block_diag((Rx, Ry, Rz))
 * 
 *     def _deflate_faces(self):             # <<<<<<<<<<<<<<
 *         if(self._dim == 2):
 *             Rx = self._deflate_edges_x()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_faces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Rx);
  __Pyx_XDECREF(__pyx_v_Ry);
  __Pyx_XDECREF(__pyx_v_Rz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1453
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_faces_x(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_39_deflate_faces_x(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_39_deflate_faces_x(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_faces_x (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_38_deflate_faces_x(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_38_deflate_faces_x(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  std::pair<int_t,Face *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Face *> ::iterator __pyx_t_8;
  face_map_t *__pyx_t_9;
  std::pair<int_t,Face *>  __pyx_t_10;
  Face *__pyx_t_11;
  int_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("_deflate_faces_x", 0);

  /* "discretize/tree_ext.pyx":1456
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 *         cdef np.int64_t[:] I = np.empty(self.ntFx, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.empty(self.ntFx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(self.ntFx, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1457
 *         #J is input index (without hanging)
 *         cdef np.int64_t[:] I = np.empty(self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.ntFx, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.empty(self.ntFx, dtype=np.float64)
 *         cdef Face *face
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1458
 *         cdef np.int64_t[:] I = np.empty(self.ntFx, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.ntFx, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(self.ntFx, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef Face *face
 *         cdef np.int64_t ii;
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1462
 *         cdef np.int64_t ii;
 * 
 *         for it in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             ii = face.index
 */
  __pyx_t_9 = &__pyx_v_self->tree->faces_x;
  __pyx_t_8 = __pyx_t_9->begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_t_9->end())) break;
    __pyx_t_10 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_it = __pyx_t_10;

    /* "discretize/tree_ext.pyx":1463
 * 
 *         for it in self.tree.faces_x:
 *             face = it.second             # <<<<<<<<<<<<<<
 *             ii = face.index
 *             I[ii] = ii
 */
    __pyx_t_11 = __pyx_v_it.second;
    __pyx_v_face = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1464
 *         for it in self.tree.faces_x:
 *             face = it.second
 *             ii = face.index             # <<<<<<<<<<<<<<
 *             I[ii] = ii
 *             if face.hanging:
 */
    __pyx_t_12 = __pyx_v_face->index;
    __pyx_v_ii = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1465
 *             face = it.second
 *             ii = face.index
 *             I[ii] = ii             # <<<<<<<<<<<<<<
 *             if face.hanging:
 *                 J[ii] = face.parent.index
 */
    __pyx_t_13 = __pyx_v_ii;
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1466
 *             ii = face.index
 *             I[ii] = ii
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 J[ii] = face.parent.index
 *             else:
 */
    __pyx_t_14 = (__pyx_v_face->hanging != 0);
    if (__pyx_t_14) {

      /* "discretize/tree_ext.pyx":1467
 *             I[ii] = ii
 *             if face.hanging:
 *                 J[ii] = face.parent.index             # <<<<<<<<<<<<<<
 *             else:
 *                 J[ii] = ii
 */
      __pyx_t_12 = __pyx_v_face->parent->index;
      __pyx_t_15 = __pyx_v_ii;
      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1466
 *             ii = face.index
 *             I[ii] = ii
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 J[ii] = face.parent.index
 *             else:
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":1469
 *                 J[ii] = face.parent.index
 *             else:
 *                 J[ii] = ii             # <<<<<<<<<<<<<<
 *             V[ii] = 1.0
 *         return sp.csr_matrix((V, (I, J)))
 */
    /*else*/ {
      __pyx_t_16 = __pyx_v_ii;
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;
    }
    __pyx_L5:;

    /* "discretize/tree_ext.pyx":1470
 *             else:
 *                 J[ii] = ii
 *             V[ii] = 1.0             # <<<<<<<<<<<<<<
 *         return sp.csr_matrix((V, (I, J)))
 * 
 */
    __pyx_t_17 = __pyx_v_ii;
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = 1.0;

    /* "discretize/tree_ext.pyx":1462
 *         cdef np.int64_t ii;
 * 
 *         for it in self.tree.faces_x:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             ii = face.index
 */
  }

  /* "discretize/tree_ext.pyx":1471
 *                 J[ii] = ii
 *             V[ii] = 1.0
 *         return sp.csr_matrix((V, (I, J)))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_18);
  __pyx_t_4 = 0;
  __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_18) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_18); __pyx_t_18 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1453
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_faces_x(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_faces_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1474
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_faces_y(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_41_deflate_faces_y(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_41_deflate_faces_y(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_faces_y (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_40_deflate_faces_y(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_40_deflate_faces_y(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  std::pair<int_t,Face *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Face *> ::iterator __pyx_t_8;
  face_map_t *__pyx_t_9;
  std::pair<int_t,Face *>  __pyx_t_10;
  Face *__pyx_t_11;
  int_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("_deflate_faces_y", 0);

  /* "discretize/tree_ext.pyx":1477
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 *         cdef np.int64_t[:] I = np.empty(self.ntFy, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.empty(self.ntFy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(self.ntFy, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1478
 *         #J is input index (without hanging)
 *         cdef np.int64_t[:] I = np.empty(self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.ntFy, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.empty(self.ntFy, dtype=np.float64)
 *         cdef Face *face
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1479
 *         cdef np.int64_t[:] I = np.empty(self.ntFy, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.ntFy, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(self.ntFy, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef Face *face
 *         cdef np.int64_t ii;
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1483
 *         cdef np.int64_t ii;
 * 
 *         for it in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             ii = face.index
 */
  __pyx_t_9 = &__pyx_v_self->tree->faces_y;
  __pyx_t_8 = __pyx_t_9->begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_t_9->end())) break;
    __pyx_t_10 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_it = __pyx_t_10;

    /* "discretize/tree_ext.pyx":1484
 * 
 *         for it in self.tree.faces_y:
 *             face = it.second             # <<<<<<<<<<<<<<
 *             ii = face.index
 *             I[ii] = ii
 */
    __pyx_t_11 = __pyx_v_it.second;
    __pyx_v_face = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1485
 *         for it in self.tree.faces_y:
 *             face = it.second
 *             ii = face.index             # <<<<<<<<<<<<<<
 *             I[ii] = ii
 *             if face.hanging:
 */
    __pyx_t_12 = __pyx_v_face->index;
    __pyx_v_ii = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1486
 *             face = it.second
 *             ii = face.index
 *             I[ii] = ii             # <<<<<<<<<<<<<<
 *             if face.hanging:
 *                 J[ii] = face.parent.index
 */
    __pyx_t_13 = __pyx_v_ii;
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1487
 *             ii = face.index
 *             I[ii] = ii
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 J[ii] = face.parent.index
 *             else:
 */
    __pyx_t_14 = (__pyx_v_face->hanging != 0);
    if (__pyx_t_14) {

      /* "discretize/tree_ext.pyx":1488
 *             I[ii] = ii
 *             if face.hanging:
 *                 J[ii] = face.parent.index             # <<<<<<<<<<<<<<
 *             else:
 *                 J[ii] = ii
 */
      __pyx_t_12 = __pyx_v_face->parent->index;
      __pyx_t_15 = __pyx_v_ii;
      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1487
 *             ii = face.index
 *             I[ii] = ii
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 J[ii] = face.parent.index
 *             else:
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":1490
 *                 J[ii] = face.parent.index
 *             else:
 *                 J[ii] = ii             # <<<<<<<<<<<<<<
 *             V[ii] = 1.0
 *         return sp.csr_matrix((V, (I, J)))
 */
    /*else*/ {
      __pyx_t_16 = __pyx_v_ii;
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;
    }
    __pyx_L5:;

    /* "discretize/tree_ext.pyx":1491
 *             else:
 *                 J[ii] = ii
 *             V[ii] = 1.0             # <<<<<<<<<<<<<<
 *         return sp.csr_matrix((V, (I, J)))
 * 
 */
    __pyx_t_17 = __pyx_v_ii;
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = 1.0;

    /* "discretize/tree_ext.pyx":1483
 *         cdef np.int64_t ii;
 * 
 *         for it in self.tree.faces_y:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             ii = face.index
 */
  }

  /* "discretize/tree_ext.pyx":1492
 *                 J[ii] = ii
 *             V[ii] = 1.0
 *         return sp.csr_matrix((V, (I, J)))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_18);
  __pyx_t_4 = 0;
  __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_18) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1492, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1492, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1492, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_18); __pyx_t_18 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1492, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1474
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_faces_y(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_faces_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1495
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_faces_z(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_43_deflate_faces_z(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_43_deflate_faces_z(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_faces_z (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_42_deflate_faces_z(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_42_deflate_faces_z(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  std::pair<int_t,Face *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::map<int_t,Face *> ::iterator __pyx_t_8;
  face_map_t *__pyx_t_9;
  std::pair<int_t,Face *>  __pyx_t_10;
  Face *__pyx_t_11;
  int_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("_deflate_faces_z", 0);

  /* "discretize/tree_ext.pyx":1498
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 *         cdef np.int64_t[:] I = np.empty(self.ntFz, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.empty(self.ntFz, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(self.ntFz, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1499
 *         #J is input index (without hanging)
 *         cdef np.int64_t[:] I = np.empty(self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.ntFz, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.empty(self.ntFz, dtype=np.float64)
 *         cdef Face *face
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1500
 *         cdef np.int64_t[:] I = np.empty(self.ntFz, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(self.ntFz, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(self.ntFz, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef Face *face
 *         cdef np.int64_t ii;
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1504
 *         cdef np.int64_t ii;
 * 
 *         for it in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             ii = face.index
 */
  __pyx_t_9 = &__pyx_v_self->tree->faces_z;
  __pyx_t_8 = __pyx_t_9->begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_t_9->end())) break;
    __pyx_t_10 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_it = __pyx_t_10;

    /* "discretize/tree_ext.pyx":1505
 * 
 *         for it in self.tree.faces_z:
 *             face = it.second             # <<<<<<<<<<<<<<
 *             ii = face.index
 *             I[ii] = ii
 */
    __pyx_t_11 = __pyx_v_it.second;
    __pyx_v_face = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1506
 *         for it in self.tree.faces_z:
 *             face = it.second
 *             ii = face.index             # <<<<<<<<<<<<<<
 *             I[ii] = ii
 *             if face.hanging:
 */
    __pyx_t_12 = __pyx_v_face->index;
    __pyx_v_ii = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1507
 *             face = it.second
 *             ii = face.index
 *             I[ii] = ii             # <<<<<<<<<<<<<<
 *             if face.hanging:
 *                 J[ii] = face.parent.index
 */
    __pyx_t_13 = __pyx_v_ii;
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_I.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_13 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

    /* "discretize/tree_ext.pyx":1508
 *             ii = face.index
 *             I[ii] = ii
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 J[ii] = face.parent.index
 *             else:
 */
    __pyx_t_14 = (__pyx_v_face->hanging != 0);
    if (__pyx_t_14) {

      /* "discretize/tree_ext.pyx":1509
 *             I[ii] = ii
 *             if face.hanging:
 *                 J[ii] = face.parent.index             # <<<<<<<<<<<<<<
 *             else:
 *                 J[ii] = ii
 */
      __pyx_t_12 = __pyx_v_face->parent->index;
      __pyx_t_15 = __pyx_v_ii;
      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1508
 *             ii = face.index
 *             I[ii] = ii
 *             if face.hanging:             # <<<<<<<<<<<<<<
 *                 J[ii] = face.parent.index
 *             else:
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":1511
 *                 J[ii] = face.parent.index
 *             else:
 *                 J[ii] = ii             # <<<<<<<<<<<<<<
 *             V[ii] = 1.0
 *         return sp.csr_matrix((V, (I, J)))
 */
    /*else*/ {
      __pyx_t_16 = __pyx_v_ii;
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_v_ii;
    }
    __pyx_L5:;

    /* "discretize/tree_ext.pyx":1512
 *             else:
 *                 J[ii] = ii
 *             V[ii] = 1.0             # <<<<<<<<<<<<<<
 *         return sp.csr_matrix((V, (I, J)))
 * 
 */
    __pyx_t_17 = __pyx_v_ii;
    if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_V.shape[0];
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_17 * __pyx_v_V.strides[0]) )) = 1.0;

    /* "discretize/tree_ext.pyx":1504
 *         cdef np.int64_t ii;
 * 
 *         for it in self.tree.faces_z:             # <<<<<<<<<<<<<<
 *             face = it.second
 *             ii = face.index
 */
  }

  /* "discretize/tree_ext.pyx":1513
 *                 J[ii] = ii
 *             V[ii] = 1.0
 *         return sp.csr_matrix((V, (I, J)))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_18);
  __pyx_t_4 = 0;
  __pyx_t_18 = 0;
  __pyx_t_18 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_18) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1513, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1513, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1513, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1513, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_18); __pyx_t_18 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1513, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1495
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_faces_z(self):             # <<<<<<<<<<<<<<
 *         #I is output index (with hanging)
 *         #J is input index (without hanging)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_faces_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1516
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.empty(4*self.ntN, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(4*self.ntN, dtype=np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_45_deflate_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_45_deflate_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_deflate_nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_44_deflate_nodes(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_44_deflate_nodes(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Node *__pyx_v_node;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  CYTHON_UNUSED __pyx_t_5numpy_int64_t __pyx_v_offset;
  std::pair<int_t,Node *>  __pyx_v_it;
  PyObject *__pyx_v_Rh = NULL;
  PyObject *__pyx_v_last_ind = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_t_8;
  std::map<int_t,Node *> ::iterator __pyx_t_9;
  node_map_t *__pyx_t_10;
  std::pair<int_t,Node *>  __pyx_t_11;
  Node *__pyx_t_12;
  int_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __Pyx_memviewslice __pyx_t_19 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("_deflate_nodes", 0);

  /* "discretize/tree_ext.pyx":1517
 *     @cython.boundscheck(False)
 *     def _deflate_nodes(self):
 *         cdef np.int64_t[:] I = np.empty(4*self.ntN, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] J = np.empty(4*self.ntN, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(4*self.ntN, dtype=np.float64)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_I = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1518
 *     def _deflate_nodes(self):
 *         cdef np.int64_t[:] I = np.empty(4*self.ntN, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(4*self.ntN, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] V = np.empty(4*self.ntN, dtype=np.float64)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntN); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_J = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1519
 *         cdef np.int64_t[:] I = np.empty(4*self.ntN, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(4*self.ntN, dtype=np.int64)
 *         cdef np.float64_t[:] V = np.empty(4*self.ntN, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         # I is output index
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_int_4, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1525
 *         cdef Node *node
 *         cdef np.int64_t ii, i, offset
 *         offset = self.nN             # <<<<<<<<<<<<<<
 *         cdef double[4] weights
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyInt_As_npy_int64(__pyx_t_2); if (unlikely((__pyx_t_8 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_offset = __pyx_t_8;

  /* "discretize/tree_ext.pyx":1528
 *         cdef double[4] weights
 * 
 *         for it in self.tree.nodes:             # <<<<<<<<<<<<<<
 *             node = it.second
 *             ii = node.index
 */
  __pyx_t_10 = &__pyx_v_self->tree->nodes;
  __pyx_t_9 = __pyx_t_10->begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_t_10->end())) break;
    __pyx_t_11 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_it = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1529
 * 
 *         for it in self.tree.nodes:
 *             node = it.second             # <<<<<<<<<<<<<<
 *             ii = node.index
 *             I[4*ii:4*ii + 4] = ii
 */
    __pyx_t_12 = __pyx_v_it.second;
    __pyx_v_node = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1530
 *         for it in self.tree.nodes:
 *             node = it.second
 *             ii = node.index             # <<<<<<<<<<<<<<
 *             I[4*ii:4*ii + 4] = ii
 *             if node.hanging:
 */
    __pyx_t_13 = __pyx_v_node->index;
    __pyx_v_ii = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1531
 *             node = it.second
 *             ii = node.index
 *             I[4*ii:4*ii + 4] = ii             # <<<<<<<<<<<<<<
 *             if node.hanging:
 *                 J[4*ii    ] = node.parents[0].index
 */
    __pyx_t_6.data = __pyx_v_I.data;
    __pyx_t_6.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_6, 0);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_6,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (4 * __pyx_v_ii),
    ((4 * __pyx_v_ii) + 4),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1531, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_6.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_6.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_6.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
    __pyx_t_6.memview = NULL;
    __pyx_t_6.data = NULL;

    /* "discretize/tree_ext.pyx":1532
 *             ii = node.index
 *             I[4*ii:4*ii + 4] = ii
 *             if node.hanging:             # <<<<<<<<<<<<<<
 *                 J[4*ii    ] = node.parents[0].index
 *                 J[4*ii + 1] = node.parents[1].index
 */
    __pyx_t_15 = (__pyx_v_node->hanging != 0);
    if (__pyx_t_15) {

      /* "discretize/tree_ext.pyx":1533
 *             I[4*ii:4*ii + 4] = ii
 *             if node.hanging:
 *                 J[4*ii    ] = node.parents[0].index             # <<<<<<<<<<<<<<
 *                 J[4*ii + 1] = node.parents[1].index
 *                 J[4*ii + 2] = node.parents[2].index
 */
      __pyx_t_13 = (__pyx_v_node->parents[0])->index;
      __pyx_t_8 = (4 * __pyx_v_ii);
      if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_8 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":1534
 *             if node.hanging:
 *                 J[4*ii    ] = node.parents[0].index
 *                 J[4*ii + 1] = node.parents[1].index             # <<<<<<<<<<<<<<
 *                 J[4*ii + 2] = node.parents[2].index
 *                 J[4*ii + 3] = node.parents[3].index
 */
      __pyx_t_13 = (__pyx_v_node->parents[1])->index;
      __pyx_t_16 = ((4 * __pyx_v_ii) + 1);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":1535
 *                 J[4*ii    ] = node.parents[0].index
 *                 J[4*ii + 1] = node.parents[1].index
 *                 J[4*ii + 2] = node.parents[2].index             # <<<<<<<<<<<<<<
 *                 J[4*ii + 3] = node.parents[3].index
 *             else:
 */
      __pyx_t_13 = (__pyx_v_node->parents[2])->index;
      __pyx_t_17 = ((4 * __pyx_v_ii) + 2);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":1536
 *                 J[4*ii + 1] = node.parents[1].index
 *                 J[4*ii + 2] = node.parents[2].index
 *                 J[4*ii + 3] = node.parents[3].index             # <<<<<<<<<<<<<<
 *             else:
 *                 J[4*ii : 4*ii + 4] = ii
 */
      __pyx_t_13 = (__pyx_v_node->parents[3])->index;
      __pyx_t_18 = ((4 * __pyx_v_ii) + 3);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_18 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":1532
 *             ii = node.index
 *             I[4*ii:4*ii + 4] = ii
 *             if node.hanging:             # <<<<<<<<<<<<<<
 *                 J[4*ii    ] = node.parents[0].index
 *                 J[4*ii + 1] = node.parents[1].index
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":1538
 *                 J[4*ii + 3] = node.parents[3].index
 *             else:
 *                 J[4*ii : 4*ii + 4] = ii             # <<<<<<<<<<<<<<
 *             V[4*ii : 4*ii + 4] = 0.25;
 * 
 */
    /*else*/ {
      __pyx_t_19.data = __pyx_v_J.data;
      __pyx_t_19.memview = __pyx_v_J.memview;
      __PYX_INC_MEMVIEW(&__pyx_t_19, 0);
      __pyx_t_14 = -1;
      if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_19,
    __pyx_v_J.shape[0], __pyx_v_J.strides[0], __pyx_v_J.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (4 * __pyx_v_ii),
    ((4 * __pyx_v_ii) + 4),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1538, __pyx_L1_error)
}

{
          __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
          {
              Py_ssize_t __pyx_temp_extent_0 = __pyx_t_19.shape[0];
              Py_ssize_t __pyx_temp_stride_0 = __pyx_t_19.strides[0];
              char *__pyx_temp_pointer_0;
              Py_ssize_t __pyx_temp_idx_0;
              __pyx_temp_pointer_0 = __pyx_t_19.data;
              for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
                *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
                __pyx_temp_pointer_0 += __pyx_temp_stride_0;
              }
          }
      }
      __PYX_XDEC_MEMVIEW(&__pyx_t_19, 1);
      __pyx_t_19.memview = NULL;
      __pyx_t_19.data = NULL;
    }
    __pyx_L5:;

    /* "discretize/tree_ext.pyx":1539
 *             else:
 *                 J[4*ii : 4*ii + 4] = ii
 *             V[4*ii : 4*ii + 4] = 0.25;             # <<<<<<<<<<<<<<
 * 
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntN, self.ntN))
 */
    __pyx_t_7.data = __pyx_v_V.data;
    __pyx_t_7.memview = __pyx_v_V.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_7, 0);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_7,
    __pyx_v_V.shape[0], __pyx_v_V.strides[0], __pyx_v_V.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (4 * __pyx_v_ii),
    ((4 * __pyx_v_ii) + 4),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1539, __pyx_L1_error)
}

{
        __pyx_t_5numpy_float64_t __pyx_temp_scalar = 0.25;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_7.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_7.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_7.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_float64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;

    /* "discretize/tree_ext.pyx":1528
 *         cdef double[4] weights
 * 
 *         for it in self.tree.nodes:             # <<<<<<<<<<<<<<
 *             node = it.second
 *             ii = node.index
 */
  }

  /* "discretize/tree_ext.pyx":1541
 *             V[4*ii : 4*ii + 4] = 0.25;
 * 
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntN, self.ntN))             # <<<<<<<<<<<<<<
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_20) < 0) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Rh = __pyx_t_20;
  __pyx_t_20 = 0;

  /* "discretize/tree_ext.pyx":1543
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntN, self.ntN))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)             # <<<<<<<<<<<<<<
 *         while(last_ind > self.nN):
 *             Rh = Rh*Rh
 */
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nN); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_Rh, __pyx_n_s_getnnz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_20, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_15) {
    __Pyx_INCREF(__pyx_t_20);
    __pyx_t_5 = __pyx_t_20;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = __pyx_t_1;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __pyx_t_5;
  __Pyx_INCREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_last_ind = __pyx_t_20;
  __pyx_t_20 = 0;

  /* "discretize/tree_ext.pyx":1544
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)
 *         while(last_ind > self.nN):             # <<<<<<<<<<<<<<
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)
 */
  while (1) {
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nN); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_last_ind, __pyx_t_20, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_15) break;

    /* "discretize/tree_ext.pyx":1545
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)
 *         while(last_ind > self.nN):
 *             Rh = Rh*Rh             # <<<<<<<<<<<<<<
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)
 *         Rh = Rh[:, : last_ind]
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_Rh, __pyx_v_Rh); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_Rh, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1546
 *         while(last_ind > self.nN):
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)             # <<<<<<<<<<<<<<
 *         Rh = Rh[:, : last_ind]
 *         return Rh
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nN); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Rh, __pyx_n_s_getnnz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_20 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_20);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
        __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1546, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
        __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1546, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_20, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_20 = __Pyx_GetItemInt(__pyx_t_2, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_20, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1546, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_15) {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_2 = __pyx_t_5;
    } else {
      __Pyx_INCREF(__pyx_t_20);
      __pyx_t_2 = __pyx_t_20;
    }
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_2;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_last_ind, __pyx_t_5);
    __pyx_t_5 = 0;
  }

  /* "discretize/tree_ext.pyx":1547
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)
 *         Rh = Rh[:, : last_ind]             # <<<<<<<<<<<<<<
 *         return Rh
 * 
 */
  __pyx_t_5 = PySlice_New(Py_None, __pyx_v_last_ind, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_slice__34);
  __Pyx_GIVEREF(__pyx_slice__34);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_slice__34);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_GetItem(__pyx_v_Rh, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_Rh, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":1548
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)
 *         Rh = Rh[:, : last_ind]
 *         return Rh             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Rh);
  __pyx_r = __pyx_v_Rh;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1516
 * 
 *     @cython.boundscheck(False)
 *     def _deflate_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I = np.empty(4*self.ntN, dtype=np.int64)
 *         cdef np.int64_t[:] J = np.empty(4*self.ntN, dtype=np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_19, 1);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._deflate_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rh);
  __Pyx_XDECREF(__pyx_v_last_ind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1552
 *     @property
 *     @cython.boundscheck(False)
 *     def aveEx2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveEx2CC is not None:
 *             return self._aveEx2CC
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEx2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEx2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEx2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEx2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_n_epc;
  double __pyx_v_scale;
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_Rex = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  int_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1553
 *     @cython.boundscheck(False)
 *     def aveEx2CC(self):
 *         if self._aveEx2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveEx2CC
 *         cdef np.int64_t[:] I,J
 */
  __pyx_t_1 = (__pyx_v_self->_aveEx2CC != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1554
 *     def aveEx2CC(self):
 *         if self._aveEx2CC is not None:
 *             return self._aveEx2CC             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I,J
 *         cdef np.float64_t[:] V
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_aveEx2CC);
    __pyx_r = __pyx_v_self->_aveEx2CC;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1553
 *     @cython.boundscheck(False)
 *     def aveEx2CC(self):
 *         if self._aveEx2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveEx2CC
 *         cdef np.int64_t[:] I,J
 */
  }

  /* "discretize/tree_ext.pyx":1560
 *         cdef double scale
 * 
 *         n_epc = 2*(self._dim-1)             # <<<<<<<<<<<<<<
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 */
  __pyx_v_n_epc = (2 * (__pyx_v_self->_dim - 1));

  /* "discretize/tree_ext.pyx":1561
 * 
 *         n_epc = 2*(self._dim-1)
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_I = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1562
 *         n_epc = 2*(self._dim-1)
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_3);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_J = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1563
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_V = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":1564
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc             # <<<<<<<<<<<<<<
 *         for cell in self.tree.cells:
 *             ind = cell.index
 */
  if (unlikely(__pyx_v_n_epc == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1564, __pyx_L1_error)
  }
  __pyx_v_scale = (1.0 / __pyx_v_n_epc);

  /* "discretize/tree_ext.pyx":1565
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             for ii in range(n_epc):
 */
  __pyx_t_11 = &__pyx_v_self->tree->cells;
  __pyx_t_10 = __pyx_t_11->begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_t_11->end())) break;
    __pyx_t_12 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_cell = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1566
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:
 *             ind = cell.index             # <<<<<<<<<<<<<<
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind
 */
    __pyx_t_13 = __pyx_v_cell->index;
    __pyx_v_ind = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1567
 *         for cell in self.tree.cells:
 *             ind = cell.index
 *             for ii in range(n_epc):             # <<<<<<<<<<<<<<
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[ii].index
 */
    __pyx_t_14 = __pyx_v_n_epc;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_ii = __pyx_t_15;

      /* "discretize/tree_ext.pyx":1568
 *             ind = cell.index
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind             # <<<<<<<<<<<<<<
 *                 J[ind*n_epc + ii] = cell.edges[ii].index
 *                 V[ind*n_epc + ii] = scale
 */
      __pyx_t_16 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_I.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_16 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

      /* "discretize/tree_ext.pyx":1569
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[ii].index             # <<<<<<<<<<<<<<
 *                 V[ind*n_epc + ii] = scale
 * 
 */
      __pyx_t_13 = (__pyx_v_cell->edges[__pyx_v_ii])->index;
      __pyx_t_17 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":1570
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[ii].index
 *                 V[ind*n_epc + ii] = scale             # <<<<<<<<<<<<<<
 * 
 *         Rex = self._deflate_edges_x()
 */
      __pyx_t_18 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = __pyx_v_scale;
    }

    /* "discretize/tree_ext.pyx":1565
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             for ii in range(n_epc):
 */
  }

  /* "discretize/tree_ext.pyx":1572
 *                 V[ind*n_epc + ii] = scale
 * 
 *         Rex = self._deflate_edges_x()             # <<<<<<<<<<<<<<
 *         self._aveEx2CC = sp.csr_matrix((V, (I, J)))*Rex
 *         return self._aveEx2CC
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1572, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_Rex = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "discretize/tree_ext.pyx":1573
 * 
 *         Rex = self._deflate_edges_x()
 *         self._aveEx2CC = sp.csr_matrix((V, (I, J)))*Rex             # <<<<<<<<<<<<<<
 *         return self._aveEx2CC
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_19);
  __pyx_t_6 = 0;
  __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_19) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1573, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_19, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_19, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_19); __pyx_t_19 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_v_Rex); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_aveEx2CC);
  __Pyx_DECREF(__pyx_v_self->_aveEx2CC);
  __pyx_v_self->_aveEx2CC = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":1574
 *         Rex = self._deflate_edges_x()
 *         self._aveEx2CC = sp.csr_matrix((V, (I, J)))*Rex
 *         return self._aveEx2CC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveEx2CC);
  __pyx_r = __pyx_v_self->_aveEx2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1552
 *     @property
 *     @cython.boundscheck(False)
 *     def aveEx2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveEx2CC is not None:
 *             return self._aveEx2CC
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveEx2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rex);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1578
 *     @property
 *     @cython.boundscheck(False)
 *     def aveEy2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveEy2CC is not None:
 *             return self._aveEy2CC
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEy2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEy2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEy2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEy2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_n_epc;
  double __pyx_v_scale;
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_Rey = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  int_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1579
 *     @cython.boundscheck(False)
 *     def aveEy2CC(self):
 *         if self._aveEy2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveEy2CC
 *         cdef np.int64_t[:] I,J
 */
  __pyx_t_1 = (__pyx_v_self->_aveEy2CC != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1580
 *     def aveEy2CC(self):
 *         if self._aveEy2CC is not None:
 *             return self._aveEy2CC             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I,J
 *         cdef np.float64_t[:] V
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_aveEy2CC);
    __pyx_r = __pyx_v_self->_aveEy2CC;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1579
 *     @cython.boundscheck(False)
 *     def aveEy2CC(self):
 *         if self._aveEy2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveEy2CC
 *         cdef np.int64_t[:] I,J
 */
  }

  /* "discretize/tree_ext.pyx":1586
 *         cdef double scale
 * 
 *         n_epc = 2*(self._dim-1)             # <<<<<<<<<<<<<<
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 */
  __pyx_v_n_epc = (2 * (__pyx_v_self->_dim - 1));

  /* "discretize/tree_ext.pyx":1587
 * 
 *         n_epc = 2*(self._dim-1)
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_I = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1588
 *         n_epc = 2*(self._dim-1)
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_3);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_J = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1589
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_V = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":1590
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc             # <<<<<<<<<<<<<<
 *         for cell in self.tree.cells:
 *             ind = cell.index
 */
  if (unlikely(__pyx_v_n_epc == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1590, __pyx_L1_error)
  }
  __pyx_v_scale = (1.0 / __pyx_v_n_epc);

  /* "discretize/tree_ext.pyx":1591
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             for ii in range(n_epc):
 */
  __pyx_t_11 = &__pyx_v_self->tree->cells;
  __pyx_t_10 = __pyx_t_11->begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_t_11->end())) break;
    __pyx_t_12 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_cell = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1592
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:
 *             ind = cell.index             # <<<<<<<<<<<<<<
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind
 */
    __pyx_t_13 = __pyx_v_cell->index;
    __pyx_v_ind = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1593
 *         for cell in self.tree.cells:
 *             ind = cell.index
 *             for ii in range(n_epc):             # <<<<<<<<<<<<<<
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[n_epc + ii].index #y edges
 */
    __pyx_t_14 = __pyx_v_n_epc;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_ii = __pyx_t_15;

      /* "discretize/tree_ext.pyx":1594
 *             ind = cell.index
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind             # <<<<<<<<<<<<<<
 *                 J[ind*n_epc + ii] = cell.edges[n_epc + ii].index #y edges
 *                 V[ind*n_epc + ii] = scale
 */
      __pyx_t_16 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_I.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_16 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

      /* "discretize/tree_ext.pyx":1595
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[n_epc + ii].index #y edges             # <<<<<<<<<<<<<<
 *                 V[ind*n_epc + ii] = scale
 * 
 */
      __pyx_t_13 = (__pyx_v_cell->edges[(__pyx_v_n_epc + __pyx_v_ii)])->index;
      __pyx_t_17 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":1596
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[n_epc + ii].index #y edges
 *                 V[ind*n_epc + ii] = scale             # <<<<<<<<<<<<<<
 * 
 *         Rey = self._deflate_edges_y()
 */
      __pyx_t_18 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = __pyx_v_scale;
    }

    /* "discretize/tree_ext.pyx":1591
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             for ii in range(n_epc):
 */
  }

  /* "discretize/tree_ext.pyx":1598
 *                 V[ind*n_epc + ii] = scale
 * 
 *         Rey = self._deflate_edges_y()             # <<<<<<<<<<<<<<
 *         self._aveEy2CC = sp.csr_matrix((V, (I, J)))*Rey
 *         return self._aveEy2CC
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges_y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_Rey = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "discretize/tree_ext.pyx":1599
 * 
 *         Rey = self._deflate_edges_y()
 *         self._aveEy2CC = sp.csr_matrix((V, (I, J)))*Rey             # <<<<<<<<<<<<<<
 *         return self._aveEy2CC
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_19);
  __pyx_t_6 = 0;
  __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_19) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1599, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_19, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1599, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_19, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1599, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_19); __pyx_t_19 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_v_Rey); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_aveEy2CC);
  __Pyx_DECREF(__pyx_v_self->_aveEy2CC);
  __pyx_v_self->_aveEy2CC = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":1600
 *         Rey = self._deflate_edges_y()
 *         self._aveEy2CC = sp.csr_matrix((V, (I, J)))*Rey
 *         return self._aveEy2CC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveEy2CC);
  __pyx_r = __pyx_v_self->_aveEy2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1578
 *     @property
 *     @cython.boundscheck(False)
 *     def aveEy2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveEy2CC is not None:
 *             return self._aveEy2CC
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveEy2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rey);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1604
 *     @property
 *     @cython.boundscheck(False)
 *     def aveEz2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveEz2CC is not None:
 *             return self._aveEz2CC
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEz2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEz2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEz2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveEz2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_v_ind;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_n_epc;
  double __pyx_v_scale;
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_Rez = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  int_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1605
 *     @cython.boundscheck(False)
 *     def aveEz2CC(self):
 *         if self._aveEz2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveEz2CC
 *         if self._dim == 2:
 */
  __pyx_t_1 = (__pyx_v_self->_aveEz2CC != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1606
 *     def aveEz2CC(self):
 *         if self._aveEz2CC is not None:
 *             return self._aveEz2CC             # <<<<<<<<<<<<<<
 *         if self._dim == 2:
 *             raise Exception('There are no z-edges in 2D')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_aveEz2CC);
    __pyx_r = __pyx_v_self->_aveEz2CC;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1605
 *     @cython.boundscheck(False)
 *     def aveEz2CC(self):
 *         if self._aveEz2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveEz2CC
 *         if self._dim == 2:
 */
  }

  /* "discretize/tree_ext.pyx":1607
 *         if self._aveEz2CC is not None:
 *             return self._aveEz2CC
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             raise Exception('There are no z-edges in 2D')
 *         cdef np.int64_t[:] I,J
 */
  __pyx_t_2 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1608
 *             return self._aveEz2CC
 *         if self._dim == 2:
 *             raise Exception('There are no z-edges in 2D')             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I,J
 *         cdef np.float64_t[:] V
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1608, __pyx_L1_error)

    /* "discretize/tree_ext.pyx":1607
 *         if self._aveEz2CC is not None:
 *             return self._aveEz2CC
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             raise Exception('There are no z-edges in 2D')
 *         cdef np.int64_t[:] I,J
 */
  }

  /* "discretize/tree_ext.pyx":1614
 *         cdef double scale
 * 
 *         n_epc = 2*(self._dim-1)             # <<<<<<<<<<<<<<
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 */
  __pyx_v_n_epc = (2 * (__pyx_v_self->_dim - 1));

  /* "discretize/tree_ext.pyx":1615
 * 
 *         n_epc = 2*(self._dim-1)
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_I = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1616
 *         n_epc = 2*(self._dim-1)
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_3);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_J = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1617
 *         I = np.empty(self.nC*n_epc, dtype=np.int64)
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_epc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_V = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":1618
 *         J = np.empty(self.nC*n_epc, dtype=np.int64)
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc             # <<<<<<<<<<<<<<
 *         for cell in self.tree.cells:
 *             ind = cell.index
 */
  if (unlikely(__pyx_v_n_epc == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1618, __pyx_L1_error)
  }
  __pyx_v_scale = (1.0 / __pyx_v_n_epc);

  /* "discretize/tree_ext.pyx":1619
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             for ii in range(n_epc):
 */
  __pyx_t_11 = &__pyx_v_self->tree->cells;
  __pyx_t_10 = __pyx_t_11->begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_t_11->end())) break;
    __pyx_t_12 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_cell = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1620
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:
 *             ind = cell.index             # <<<<<<<<<<<<<<
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind
 */
    __pyx_t_13 = __pyx_v_cell->index;
    __pyx_v_ind = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1621
 *         for cell in self.tree.cells:
 *             ind = cell.index
 *             for ii in range(n_epc):             # <<<<<<<<<<<<<<
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[ii + 2*n_epc].index
 */
    __pyx_t_14 = __pyx_v_n_epc;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_ii = __pyx_t_15;

      /* "discretize/tree_ext.pyx":1622
 *             ind = cell.index
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind             # <<<<<<<<<<<<<<
 *                 J[ind*n_epc + ii] = cell.edges[ii + 2*n_epc].index
 *                 V[ind*n_epc + ii] = scale
 */
      __pyx_t_16 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_I.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_16 * __pyx_v_I.strides[0]) )) = __pyx_v_ind;

      /* "discretize/tree_ext.pyx":1623
 *             for ii in range(n_epc):
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[ii + 2*n_epc].index             # <<<<<<<<<<<<<<
 *                 V[ind*n_epc + ii] = scale
 * 
 */
      __pyx_t_13 = (__pyx_v_cell->edges[(__pyx_v_ii + (2 * __pyx_v_n_epc))])->index;
      __pyx_t_17 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

      /* "discretize/tree_ext.pyx":1624
 *                 I[ind*n_epc + ii] = ind
 *                 J[ind*n_epc + ii] = cell.edges[ii + 2*n_epc].index
 *                 V[ind*n_epc + ii] = scale             # <<<<<<<<<<<<<<
 * 
 *         Rez = self._deflate_edges_z()
 */
      __pyx_t_18 = ((__pyx_v_ind * __pyx_v_n_epc) + __pyx_v_ii);
      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = __pyx_v_scale;
    }

    /* "discretize/tree_ext.pyx":1619
 *         V = np.empty(self.nC*n_epc, dtype=np.float64)
 *         scale = 1.0/n_epc
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             for ii in range(n_epc):
 */
  }

  /* "discretize/tree_ext.pyx":1626
 *                 V[ind*n_epc + ii] = scale
 * 
 *         Rez = self._deflate_edges_z()             # <<<<<<<<<<<<<<
 *         self._aveEz2CC = sp.csr_matrix((V, (I, J)))*Rez
 *         return self._aveEz2CC
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges_z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1626, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_Rez = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "discretize/tree_ext.pyx":1627
 * 
 *         Rez = self._deflate_edges_z()
 *         self._aveEz2CC = sp.csr_matrix((V, (I, J)))*Rez             # <<<<<<<<<<<<<<
 *         return self._aveEz2CC
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_19);
  __pyx_t_6 = 0;
  __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_19) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_19, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_19, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_19); __pyx_t_19 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_v_Rez); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_aveEz2CC);
  __Pyx_DECREF(__pyx_v_self->_aveEz2CC);
  __pyx_v_self->_aveEz2CC = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":1628
 *         Rez = self._deflate_edges_z()
 *         self._aveEz2CC = sp.csr_matrix((V, (I, J)))*Rez
 *         return self._aveEz2CC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveEz2CC);
  __pyx_r = __pyx_v_self->_aveEz2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1604
 *     @property
 *     @cython.boundscheck(False)
 *     def aveEz2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveEz2CC is not None:
 *             return self._aveEz2CC
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveEz2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rez);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1631
 * 
 *     @property
 *     def aveE2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveE2CC is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveE2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveE2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveE2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveE2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_stacks = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1632
 *     @property
 *     def aveE2CC(self):
 *         if self._aveE2CC is None:             # <<<<<<<<<<<<<<
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:
 */
  __pyx_t_1 = (__pyx_v_self->_aveE2CC == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1633
 *     def aveE2CC(self):
 *         if self._aveE2CC is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]             # <<<<<<<<<<<<<<
 *             if self._dim == 3:
 *                 stacks += [self.aveEz2CC]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveEx2CC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveEy2CC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_v_stacks = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1634
 *         if self._aveE2CC is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:             # <<<<<<<<<<<<<<
 *                 stacks += [self.aveEz2CC]
 *             self._aveE2CC = 1.0/self._dim * sp.hstack(stacks).tocsr()
 */
    __pyx_t_2 = ((__pyx_v_self->_dim == 3) != 0);
    if (__pyx_t_2) {

      /* "discretize/tree_ext.pyx":1635
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:
 *                 stacks += [self.aveEz2CC]             # <<<<<<<<<<<<<<
 *             self._aveE2CC = 1.0/self._dim * sp.hstack(stacks).tocsr()
 *         return self._aveE2CC
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveEz2CC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_stacks, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1635, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_stacks, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "discretize/tree_ext.pyx":1634
 *         if self._aveE2CC is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:             # <<<<<<<<<<<<<<
 *                 stacks += [self.aveEz2CC]
 *             self._aveE2CC = 1.0/self._dim * sp.hstack(stacks).tocsr()
 */
    }

    /* "discretize/tree_ext.pyx":1636
 *             if self._dim == 3:
 *                 stacks += [self.aveEz2CC]
 *             self._aveE2CC = 1.0/self._dim * sp.hstack(stacks).tocsr()             # <<<<<<<<<<<<<<
 *         return self._aveE2CC
 * 
 */
    if (unlikely(__pyx_v_self->_dim == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1636, __pyx_L1_error)
    }
    __pyx_t_5 = PyFloat_FromDouble((1.0 / __pyx_v_self->_dim)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_hstack); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_stacks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_stacks};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1636, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_stacks};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1636, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1636, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_stacks);
        __Pyx_GIVEREF(__pyx_v_stacks);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_stacks);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1636, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tocsr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1636, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1636, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->_aveE2CC);
    __Pyx_DECREF(__pyx_v_self->_aveE2CC);
    __pyx_v_self->_aveE2CC = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":1632
 *     @property
 *     def aveE2CC(self):
 *         if self._aveE2CC is None:             # <<<<<<<<<<<<<<
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:
 */
  }

  /* "discretize/tree_ext.pyx":1637
 *                 stacks += [self.aveEz2CC]
 *             self._aveE2CC = 1.0/self._dim * sp.hstack(stacks).tocsr()
 *         return self._aveE2CC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveE2CC);
  __pyx_r = __pyx_v_self->_aveE2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1631
 * 
 *     @property
 *     def aveE2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveE2CC is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveE2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stacks);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1640
 * 
 *     @property
 *     def aveE2CCV(self):             # <<<<<<<<<<<<<<
 *         if self._aveE2CCV is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveE2CCV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveE2CCV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveE2CCV___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveE2CCV___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_stacks = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1641
 *     @property
 *     def aveE2CCV(self):
 *         if self._aveE2CCV is None:             # <<<<<<<<<<<<<<
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:
 */
  __pyx_t_1 = (__pyx_v_self->_aveE2CCV == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1642
 *     def aveE2CCV(self):
 *         if self._aveE2CCV is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]             # <<<<<<<<<<<<<<
 *             if self._dim == 3:
 *                 stacks += [self.aveEz2CC]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveEx2CC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveEy2CC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_v_stacks = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1643
 *         if self._aveE2CCV is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:             # <<<<<<<<<<<<<<
 *                 stacks += [self.aveEz2CC]
 *             self._aveE2CCV = sp.block_diag(stacks).tocsr()
 */
    __pyx_t_2 = ((__pyx_v_self->_dim == 3) != 0);
    if (__pyx_t_2) {

      /* "discretize/tree_ext.pyx":1644
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:
 *                 stacks += [self.aveEz2CC]             # <<<<<<<<<<<<<<
 *             self._aveE2CCV = sp.block_diag(stacks).tocsr()
 *         return self._aveE2CCV
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveEz2CC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_stacks, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1644, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_stacks, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "discretize/tree_ext.pyx":1643
 *         if self._aveE2CCV is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:             # <<<<<<<<<<<<<<
 *                 stacks += [self.aveEz2CC]
 *             self._aveE2CCV = sp.block_diag(stacks).tocsr()
 */
    }

    /* "discretize/tree_ext.pyx":1645
 *             if self._dim == 3:
 *                 stacks += [self.aveEz2CC]
 *             self._aveE2CCV = sp.block_diag(stacks).tocsr()             # <<<<<<<<<<<<<<
 *         return self._aveE2CCV
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_block_diag); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_stacks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_stacks};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_stacks};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1645, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_stacks);
        __Pyx_GIVEREF(__pyx_v_stacks);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_stacks);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tocsr); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1645, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1645, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->_aveE2CCV);
    __Pyx_DECREF(__pyx_v_self->_aveE2CCV);
    __pyx_v_self->_aveE2CCV = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1641
 *     @property
 *     def aveE2CCV(self):
 *         if self._aveE2CCV is None:             # <<<<<<<<<<<<<<
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 *             if self._dim == 3:
 */
  }

  /* "discretize/tree_ext.pyx":1646
 *                 stacks += [self.aveEz2CC]
 *             self._aveE2CCV = sp.block_diag(stacks).tocsr()
 *         return self._aveE2CCV             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveE2CCV);
  __pyx_r = __pyx_v_self->_aveE2CCV;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1640
 * 
 *     @property
 *     def aveE2CCV(self):             # <<<<<<<<<<<<<<
 *         if self._aveE2CCV is None:
 *             stacks = [self.aveEx2CC, self.aveEy2CC]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveE2CCV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stacks);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1650
 *     @property
 *     @cython.boundscheck(False)
 *     def aveFx2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveFx2CC is not None:
 *             return self._aveFx2CC
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFx2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFx2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFx2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFx2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face1;
  Face *__pyx_v_face2;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_Rfx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  int_t __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1651
 *     @cython.boundscheck(False)
 *     def aveFx2CC(self):
 *         if self._aveFx2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveFx2CC
 *         if self._dim == 2:
 */
  __pyx_t_1 = (__pyx_v_self->_aveFx2CC != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1652
 *     def aveFx2CC(self):
 *         if self._aveFx2CC is not None:
 *             return self._aveFx2CC             # <<<<<<<<<<<<<<
 *         if self._dim == 2:
 *             return self.aveEy2CC
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_aveFx2CC);
    __pyx_r = __pyx_v_self->_aveFx2CC;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1651
 *     @cython.boundscheck(False)
 *     def aveFx2CC(self):
 *         if self._aveFx2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveFx2CC
 *         if self._dim == 2:
 */
  }

  /* "discretize/tree_ext.pyx":1653
 *         if self._aveFx2CC is not None:
 *             return self._aveFx2CC
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             return self.aveEy2CC
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1654
 *             return self._aveFx2CC
 *         if self._dim == 2:
 *             return self.aveEy2CC             # <<<<<<<<<<<<<<
 * 
 *         cdef np.int64_t[:] I,J
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveEy2CC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1653
 *         if self._aveFx2CC is not None:
 *             return self._aveFx2CC
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             return self.aveEy2CC
 * 
 */
  }

  /* "discretize/tree_ext.pyx":1661
 *         cdef Face *face2
 *         cdef np.int64_t ii
 *         I = np.empty(self.nC*2, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         J = np.empty(self.nC*2, dtype=np.int64)
 *         V = np.empty(self.nC*2, dtype=np.float64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_I = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1662
 *         cdef np.int64_t ii
 *         I = np.empty(self.nC*2, dtype=np.int64)
 *         J = np.empty(self.nC*2, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_7, __pyx_int_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_J = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1663
 *         I = np.empty(self.nC*2, dtype=np.int64)
 *         J = np.empty(self.nC*2, dtype=np.int64)
 *         V = np.empty(self.nC*2, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         for cell in self.tree.cells:
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_6, __pyx_int_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1663, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_V = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":1665
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             face1 = cell.faces[0] #y edge/ x face
 *             face2 = cell.faces[1] #y edge/ x face
 */
  __pyx_t_11 = &__pyx_v_self->tree->cells;
  __pyx_t_10 = __pyx_t_11->begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_t_11->end())) break;
    __pyx_t_12 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_cell = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1666
 * 
 *         for cell in self.tree.cells:
 *             face1 = cell.faces[0] #y edge/ x face             # <<<<<<<<<<<<<<
 *             face2 = cell.faces[1] #y edge/ x face
 *             ii = cell.index
 */
    __pyx_v_face1 = (__pyx_v_cell->faces[0]);

    /* "discretize/tree_ext.pyx":1667
 *         for cell in self.tree.cells:
 *             face1 = cell.faces[0] #y edge/ x face
 *             face2 = cell.faces[1] #y edge/ x face             # <<<<<<<<<<<<<<
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii
 */
    __pyx_v_face2 = (__pyx_v_cell->faces[1]);

    /* "discretize/tree_ext.pyx":1668
 *             face1 = cell.faces[0] #y edge/ x face
 *             face2 = cell.faces[1] #y edge/ x face
 *             ii = cell.index             # <<<<<<<<<<<<<<
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index
 */
    __pyx_t_13 = __pyx_v_cell->index;
    __pyx_v_ii = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1669
 *             face2 = cell.faces[1] #y edge/ x face
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii             # <<<<<<<<<<<<<<
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index
 */
    __pyx_t_8.data = __pyx_v_I.data;
    __pyx_t_8.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_8, 0);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_8,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1669, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_8.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_8.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_8.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "discretize/tree_ext.pyx":1670
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index             # <<<<<<<<<<<<<<
 *             J[ii*2 + 1] = face2.index
 *             V[ii*2 : ii*2 + 2] = 0.5
 */
    __pyx_t_13 = __pyx_v_face1->index;
    __pyx_t_15 = (__pyx_v_ii * 2);
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1671
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index             # <<<<<<<<<<<<<<
 *             V[ii*2 : ii*2 + 2] = 0.5
 * 
 */
    __pyx_t_13 = __pyx_v_face2->index;
    __pyx_t_16 = ((__pyx_v_ii * 2) + 1);
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1672
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index
 *             V[ii*2 : ii*2 + 2] = 0.5             # <<<<<<<<<<<<<<
 * 
 *         Rfx = self._deflate_faces_x()
 */
    __pyx_t_9.data = __pyx_v_V.data;
    __pyx_t_9.memview = __pyx_v_V.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_9, 0);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_9,
    __pyx_v_V.shape[0], __pyx_v_V.strides[0], __pyx_v_V.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1672, __pyx_L1_error)
}

{
        __pyx_t_5numpy_float64_t __pyx_temp_scalar = 0.5;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_9.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_9.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_9.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_float64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":1665
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             face1 = cell.faces[0] #y edge/ x face
 *             face2 = cell.faces[1] #y edge/ x face
 */
  }

  /* "discretize/tree_ext.pyx":1674
 *             V[ii*2 : ii*2 + 2] = 0.5
 * 
 *         Rfx = self._deflate_faces_x()             # <<<<<<<<<<<<<<
 *         self._aveFx2CC = sp.csr_matrix((V, (I, J)))*Rfx
 *         return self._aveFx2CC
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_faces_x); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1674, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1674, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_Rfx = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1675
 * 
 *         Rfx = self._deflate_faces_x()
 *         self._aveFx2CC = sp.csr_matrix((V, (I, J)))*Rfx             # <<<<<<<<<<<<<<
 *         return self._aveFx2CC
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_17);
  __pyx_t_7 = 0;
  __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_17) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_17); __pyx_t_17 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_v_Rfx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_aveFx2CC);
  __Pyx_DECREF(__pyx_v_self->_aveFx2CC);
  __pyx_v_self->_aveFx2CC = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":1676
 *         Rfx = self._deflate_faces_x()
 *         self._aveFx2CC = sp.csr_matrix((V, (I, J)))*Rfx
 *         return self._aveFx2CC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveFx2CC);
  __pyx_r = __pyx_v_self->_aveFx2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1650
 *     @property
 *     @cython.boundscheck(False)
 *     def aveFx2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveFx2CC is not None:
 *             return self._aveFx2CC
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveFx2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rfx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1680
 *     @property
 *     @cython.boundscheck(False)
 *     def aveFy2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveFy2CC is not None:
 *             return self._aveFy2CC
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFy2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFy2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFy2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFy2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face1;
  Face *__pyx_v_face2;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_Rfy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  int_t __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1681
 *     @cython.boundscheck(False)
 *     def aveFy2CC(self):
 *         if self._aveFy2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveFy2CC
 *         if self._dim == 2:
 */
  __pyx_t_1 = (__pyx_v_self->_aveFy2CC != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1682
 *     def aveFy2CC(self):
 *         if self._aveFy2CC is not None:
 *             return self._aveFy2CC             # <<<<<<<<<<<<<<
 *         if self._dim == 2:
 *             return self.aveEx2CC
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_aveFy2CC);
    __pyx_r = __pyx_v_self->_aveFy2CC;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1681
 *     @cython.boundscheck(False)
 *     def aveFy2CC(self):
 *         if self._aveFy2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveFy2CC
 *         if self._dim == 2:
 */
  }

  /* "discretize/tree_ext.pyx":1683
 *         if self._aveFy2CC is not None:
 *             return self._aveFy2CC
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             return self.aveEx2CC
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1684
 *             return self._aveFy2CC
 *         if self._dim == 2:
 *             return self.aveEx2CC             # <<<<<<<<<<<<<<
 * 
 *         cdef np.int64_t[:] I,J
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveEx2CC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1683
 *         if self._aveFy2CC is not None:
 *             return self._aveFy2CC
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             return self.aveEx2CC
 * 
 */
  }

  /* "discretize/tree_ext.pyx":1691
 *         cdef Face *face2
 *         cdef np.int64_t ii
 *         I = np.empty(self.nC*2, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         J = np.empty(self.nC*2, dtype=np.int64)
 *         V = np.empty(self.nC*2, dtype=np.float64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_I = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1692
 *         cdef np.int64_t ii
 *         I = np.empty(self.nC*2, dtype=np.int64)
 *         J = np.empty(self.nC*2, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_7, __pyx_int_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_J = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1693
 *         I = np.empty(self.nC*2, dtype=np.int64)
 *         J = np.empty(self.nC*2, dtype=np.int64)
 *         V = np.empty(self.nC*2, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         for cell in self.tree.cells:
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_6, __pyx_int_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_V = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":1695
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             face1 = cell.faces[2] #x edge/ y face
 *             face2 = cell.faces[3] #x edge/ y face
 */
  __pyx_t_11 = &__pyx_v_self->tree->cells;
  __pyx_t_10 = __pyx_t_11->begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_t_11->end())) break;
    __pyx_t_12 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_cell = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1696
 * 
 *         for cell in self.tree.cells:
 *             face1 = cell.faces[2] #x edge/ y face             # <<<<<<<<<<<<<<
 *             face2 = cell.faces[3] #x edge/ y face
 *             ii = cell.index
 */
    __pyx_v_face1 = (__pyx_v_cell->faces[2]);

    /* "discretize/tree_ext.pyx":1697
 *         for cell in self.tree.cells:
 *             face1 = cell.faces[2] #x edge/ y face
 *             face2 = cell.faces[3] #x edge/ y face             # <<<<<<<<<<<<<<
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii
 */
    __pyx_v_face2 = (__pyx_v_cell->faces[3]);

    /* "discretize/tree_ext.pyx":1698
 *             face1 = cell.faces[2] #x edge/ y face
 *             face2 = cell.faces[3] #x edge/ y face
 *             ii = cell.index             # <<<<<<<<<<<<<<
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index
 */
    __pyx_t_13 = __pyx_v_cell->index;
    __pyx_v_ii = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1699
 *             face2 = cell.faces[3] #x edge/ y face
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii             # <<<<<<<<<<<<<<
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index
 */
    __pyx_t_8.data = __pyx_v_I.data;
    __pyx_t_8.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_8, 0);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_8,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1699, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_8.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_8.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_8.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "discretize/tree_ext.pyx":1700
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index             # <<<<<<<<<<<<<<
 *             J[ii*2 + 1] = face2.index
 *             V[ii*2 : ii*2 + 2] = 0.5
 */
    __pyx_t_13 = __pyx_v_face1->index;
    __pyx_t_15 = (__pyx_v_ii * 2);
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1701
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index             # <<<<<<<<<<<<<<
 *             V[ii*2 : ii*2 + 2] = 0.5
 * 
 */
    __pyx_t_13 = __pyx_v_face2->index;
    __pyx_t_16 = ((__pyx_v_ii * 2) + 1);
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1702
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index
 *             V[ii*2 : ii*2 + 2] = 0.5             # <<<<<<<<<<<<<<
 * 
 *         Rfy = self._deflate_faces_y()
 */
    __pyx_t_9.data = __pyx_v_V.data;
    __pyx_t_9.memview = __pyx_v_V.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_9, 0);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_9,
    __pyx_v_V.shape[0], __pyx_v_V.strides[0], __pyx_v_V.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1702, __pyx_L1_error)
}

{
        __pyx_t_5numpy_float64_t __pyx_temp_scalar = 0.5;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_9.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_9.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_9.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_float64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":1695
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             face1 = cell.faces[2] #x edge/ y face
 *             face2 = cell.faces[3] #x edge/ y face
 */
  }

  /* "discretize/tree_ext.pyx":1704
 *             V[ii*2 : ii*2 + 2] = 0.5
 * 
 *         Rfy = self._deflate_faces_y()             # <<<<<<<<<<<<<<
 *         self._aveFy2CC = sp.csr_matrix((V, (I, J)))*Rfy
 *         return self._aveFy2CC
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_faces_y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1704, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1704, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_Rfy = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1705
 * 
 *         Rfy = self._deflate_faces_y()
 *         self._aveFy2CC = sp.csr_matrix((V, (I, J)))*Rfy             # <<<<<<<<<<<<<<
 *         return self._aveFy2CC
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_17);
  __pyx_t_7 = 0;
  __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_17) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1705, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1705, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1705, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_17); __pyx_t_17 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_v_Rfy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_aveFy2CC);
  __Pyx_DECREF(__pyx_v_self->_aveFy2CC);
  __pyx_v_self->_aveFy2CC = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":1706
 *         Rfy = self._deflate_faces_y()
 *         self._aveFy2CC = sp.csr_matrix((V, (I, J)))*Rfy
 *         return self._aveFy2CC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveFy2CC);
  __pyx_r = __pyx_v_self->_aveFy2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1680
 *     @property
 *     @cython.boundscheck(False)
 *     def aveFy2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveFy2CC is not None:
 *             return self._aveFy2CC
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveFy2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rfy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1710
 *     @property
 *     @cython.boundscheck(False)
 *     def aveFz2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveFz2CC is not None:
 *             return self._aveFz2CC
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFz2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFz2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFz2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveFz2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  Face *__pyx_v_face1;
  Face *__pyx_v_face2;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_Rfy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  int_t __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1711
 *     @cython.boundscheck(False)
 *     def aveFz2CC(self):
 *         if self._aveFz2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveFz2CC
 *         if self._dim == 2:
 */
  __pyx_t_1 = (__pyx_v_self->_aveFz2CC != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1712
 *     def aveFz2CC(self):
 *         if self._aveFz2CC is not None:
 *             return self._aveFz2CC             # <<<<<<<<<<<<<<
 *         if self._dim == 2:
 *             raise Exception('There are no z-faces in 2D')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_aveFz2CC);
    __pyx_r = __pyx_v_self->_aveFz2CC;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":1711
 *     @cython.boundscheck(False)
 *     def aveFz2CC(self):
 *         if self._aveFz2CC is not None:             # <<<<<<<<<<<<<<
 *             return self._aveFz2CC
 *         if self._dim == 2:
 */
  }

  /* "discretize/tree_ext.pyx":1713
 *         if self._aveFz2CC is not None:
 *             return self._aveFz2CC
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             raise Exception('There are no z-faces in 2D')
 *         cdef np.int64_t[:] I,J
 */
  __pyx_t_2 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1714
 *             return self._aveFz2CC
 *         if self._dim == 2:
 *             raise Exception('There are no z-faces in 2D')             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I,J
 *         cdef np.float64_t[:] V
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1714, __pyx_L1_error)

    /* "discretize/tree_ext.pyx":1713
 *         if self._aveFz2CC is not None:
 *             return self._aveFz2CC
 *         if self._dim == 2:             # <<<<<<<<<<<<<<
 *             raise Exception('There are no z-faces in 2D')
 *         cdef np.int64_t[:] I,J
 */
  }

  /* "discretize/tree_ext.pyx":1720
 *         cdef Face *face2
 *         cdef np.int64_t ii
 *         I = np.empty(self.nC*2, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         J = np.empty(self.nC*2, dtype=np.int64)
 *         V = np.empty(self.nC*2, dtype=np.float64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_I = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1721
 *         cdef np.int64_t ii
 *         I = np.empty(self.nC*2, dtype=np.int64)
 *         J = np.empty(self.nC*2, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_7, __pyx_int_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_J = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":1722
 *         I = np.empty(self.nC*2, dtype=np.int64)
 *         J = np.empty(self.nC*2, dtype=np.int64)
 *         V = np.empty(self.nC*2, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         for cell in self.tree.cells:
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_6, __pyx_int_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_V = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":1724
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             face1 = cell.faces[4]
 *             face2 = cell.faces[5]
 */
  __pyx_t_11 = &__pyx_v_self->tree->cells;
  __pyx_t_10 = __pyx_t_11->begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_t_11->end())) break;
    __pyx_t_12 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_cell = __pyx_t_12;

    /* "discretize/tree_ext.pyx":1725
 * 
 *         for cell in self.tree.cells:
 *             face1 = cell.faces[4]             # <<<<<<<<<<<<<<
 *             face2 = cell.faces[5]
 *             ii = cell.index
 */
    __pyx_v_face1 = (__pyx_v_cell->faces[4]);

    /* "discretize/tree_ext.pyx":1726
 *         for cell in self.tree.cells:
 *             face1 = cell.faces[4]
 *             face2 = cell.faces[5]             # <<<<<<<<<<<<<<
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii
 */
    __pyx_v_face2 = (__pyx_v_cell->faces[5]);

    /* "discretize/tree_ext.pyx":1727
 *             face1 = cell.faces[4]
 *             face2 = cell.faces[5]
 *             ii = cell.index             # <<<<<<<<<<<<<<
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index
 */
    __pyx_t_13 = __pyx_v_cell->index;
    __pyx_v_ii = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1728
 *             face2 = cell.faces[5]
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii             # <<<<<<<<<<<<<<
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index
 */
    __pyx_t_8.data = __pyx_v_I.data;
    __pyx_t_8.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_8, 0);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_8,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1728, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_ii;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_8.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_8.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_8.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "discretize/tree_ext.pyx":1729
 *             ii = cell.index
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index             # <<<<<<<<<<<<<<
 *             J[ii*2 + 1] = face2.index
 *             V[ii*2 : ii*2 + 2] = 0.5
 */
    __pyx_t_13 = __pyx_v_face1->index;
    __pyx_t_15 = (__pyx_v_ii * 2);
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_15 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1730
 *             I[ii*2 : ii*2 + 2] = ii
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index             # <<<<<<<<<<<<<<
 *             V[ii*2 : ii*2 + 2] = 0.5
 * 
 */
    __pyx_t_13 = __pyx_v_face2->index;
    __pyx_t_16 = ((__pyx_v_ii * 2) + 1);
    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_J.shape[0];
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_16 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1731
 *             J[ii*2    ] = face1.index
 *             J[ii*2 + 1] = face2.index
 *             V[ii*2 : ii*2 + 2] = 0.5             # <<<<<<<<<<<<<<
 * 
 *         Rfy = self._deflate_faces_z()
 */
    __pyx_t_9.data = __pyx_v_V.data;
    __pyx_t_9.memview = __pyx_v_V.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_9, 0);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_9,
    __pyx_v_V.shape[0], __pyx_v_V.strides[0], __pyx_v_V.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    (__pyx_v_ii * 2),
    ((__pyx_v_ii * 2) + 2),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1731, __pyx_L1_error)
}

{
        __pyx_t_5numpy_float64_t __pyx_temp_scalar = 0.5;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_9.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_9.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_9.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_float64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":1724
 *         V = np.empty(self.nC*2, dtype=np.float64)
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             face1 = cell.faces[4]
 *             face2 = cell.faces[5]
 */
  }

  /* "discretize/tree_ext.pyx":1733
 *             V[ii*2 : ii*2 + 2] = 0.5
 * 
 *         Rfy = self._deflate_faces_z()             # <<<<<<<<<<<<<<
 *         self._aveFz2CC = sp.csr_matrix((V, (I, J)))*Rfy
 *         return self._aveFz2CC
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_faces_z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1733, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_Rfy = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1734
 * 
 *         Rfy = self._deflate_faces_z()
 *         self._aveFz2CC = sp.csr_matrix((V, (I, J)))*Rfy             # <<<<<<<<<<<<<<
 *         return self._aveFz2CC
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_17);
  __pyx_t_7 = 0;
  __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_17) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_17); __pyx_t_17 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_v_Rfy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_aveFz2CC);
  __Pyx_DECREF(__pyx_v_self->_aveFz2CC);
  __pyx_v_self->_aveFz2CC = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":1735
 *         Rfy = self._deflate_faces_z()
 *         self._aveFz2CC = sp.csr_matrix((V, (I, J)))*Rfy
 *         return self._aveFz2CC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveFz2CC);
  __pyx_r = __pyx_v_self->_aveFz2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1710
 *     @property
 *     @cython.boundscheck(False)
 *     def aveFz2CC(self):             # <<<<<<<<<<<<<<
 *         if self._aveFz2CC is not None:
 *             return self._aveFz2CC
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveFz2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rfy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1738
 * 
 *     @property
 *     def aveF2CC(self):             # <<<<<<<<<<<<<<
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CC is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveF2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveF2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveF2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveF2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_stacks = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1740
 *     def aveF2CC(self):
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CC is None:             # <<<<<<<<<<<<<<
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:
 */
  __pyx_t_1 = (__pyx_v_self->_aveF2CC == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1741
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CC is None:
 *             stacks = [self.aveFx2CC, self.aveFy2CC]             # <<<<<<<<<<<<<<
 *             if self._dim == 3:
 *                 stacks += [self.aveFz2CC]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveFx2CC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveFy2CC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_v_stacks = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1742
 *         if self._aveF2CC is None:
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:             # <<<<<<<<<<<<<<
 *                 stacks += [self.aveFz2CC]
 *             self._aveF2CC = 1./self._dim*sp.hstack(stacks).tocsr()
 */
    __pyx_t_2 = ((__pyx_v_self->_dim == 3) != 0);
    if (__pyx_t_2) {

      /* "discretize/tree_ext.pyx":1743
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:
 *                 stacks += [self.aveFz2CC]             # <<<<<<<<<<<<<<
 *             self._aveF2CC = 1./self._dim*sp.hstack(stacks).tocsr()
 *         return self._aveF2CC
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveFz2CC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1743, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1743, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_stacks, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1743, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_stacks, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "discretize/tree_ext.pyx":1742
 *         if self._aveF2CC is None:
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:             # <<<<<<<<<<<<<<
 *                 stacks += [self.aveFz2CC]
 *             self._aveF2CC = 1./self._dim*sp.hstack(stacks).tocsr()
 */
    }

    /* "discretize/tree_ext.pyx":1744
 *             if self._dim == 3:
 *                 stacks += [self.aveFz2CC]
 *             self._aveF2CC = 1./self._dim*sp.hstack(stacks).tocsr()             # <<<<<<<<<<<<<<
 *         return self._aveF2CC
 * 
 */
    if (unlikely(__pyx_v_self->_dim == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1744, __pyx_L1_error)
    }
    __pyx_t_5 = PyFloat_FromDouble((1. / __pyx_v_self->_dim)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_hstack); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_stacks); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_stacks};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_stacks};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_stacks);
        __Pyx_GIVEREF(__pyx_v_stacks);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_stacks);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tocsr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1744, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1744, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->_aveF2CC);
    __Pyx_DECREF(__pyx_v_self->_aveF2CC);
    __pyx_v_self->_aveF2CC = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":1740
 *     def aveF2CC(self):
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CC is None:             # <<<<<<<<<<<<<<
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:
 */
  }

  /* "discretize/tree_ext.pyx":1745
 *                 stacks += [self.aveFz2CC]
 *             self._aveF2CC = 1./self._dim*sp.hstack(stacks).tocsr()
 *         return self._aveF2CC             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveF2CC);
  __pyx_r = __pyx_v_self->_aveF2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1738
 * 
 *     @property
 *     def aveF2CC(self):             # <<<<<<<<<<<<<<
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CC is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveF2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stacks);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1748
 * 
 *     @property
 *     def aveF2CCV(self):             # <<<<<<<<<<<<<<
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CCV is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveF2CCV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveF2CCV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveF2CCV___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_8aveF2CCV___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_stacks = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1750
 *     def aveF2CCV(self):
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CCV is None:             # <<<<<<<<<<<<<<
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:
 */
  __pyx_t_1 = (__pyx_v_self->_aveF2CCV == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1751
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CCV is None:
 *             stacks = [self.aveFx2CC, self.aveFy2CC]             # <<<<<<<<<<<<<<
 *             if self._dim == 3:
 *                 stacks += [self.aveFz2CC]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveFx2CC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveFy2CC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_v_stacks = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1752
 *         if self._aveF2CCV is None:
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:             # <<<<<<<<<<<<<<
 *                 stacks += [self.aveFz2CC]
 *             self._aveF2CCV = sp.block_diag(stacks).tocsr()
 */
    __pyx_t_2 = ((__pyx_v_self->_dim == 3) != 0);
    if (__pyx_t_2) {

      /* "discretize/tree_ext.pyx":1753
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:
 *                 stacks += [self.aveFz2CC]             # <<<<<<<<<<<<<<
 *             self._aveF2CCV = sp.block_diag(stacks).tocsr()
 *         return self._aveF2CCV
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_aveFz2CC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_stacks, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_stacks, ((PyObject*)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "discretize/tree_ext.pyx":1752
 *         if self._aveF2CCV is None:
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:             # <<<<<<<<<<<<<<
 *                 stacks += [self.aveFz2CC]
 *             self._aveF2CCV = sp.block_diag(stacks).tocsr()
 */
    }

    /* "discretize/tree_ext.pyx":1754
 *             if self._dim == 3:
 *                 stacks += [self.aveFz2CC]
 *             self._aveF2CCV = sp.block_diag(stacks).tocsr()             # <<<<<<<<<<<<<<
 *         return self._aveF2CCV
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_block_diag); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_stacks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_stacks};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1754, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_stacks};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1754, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_stacks);
        __Pyx_GIVEREF(__pyx_v_stacks);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_stacks);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_tocsr); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1754, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1754, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->_aveF2CCV);
    __Pyx_DECREF(__pyx_v_self->_aveF2CCV);
    __pyx_v_self->_aveF2CCV = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1750
 *     def aveF2CCV(self):
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CCV is None:             # <<<<<<<<<<<<<<
 *             stacks = [self.aveFx2CC, self.aveFy2CC]
 *             if self._dim == 3:
 */
  }

  /* "discretize/tree_ext.pyx":1755
 *                 stacks += [self.aveFz2CC]
 *             self._aveF2CCV = sp.block_diag(stacks).tocsr()
 *         return self._aveF2CCV             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveF2CCV);
  __pyx_r = __pyx_v_self->_aveF2CCV;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1748
 * 
 *     @property
 *     def aveF2CCV(self):             # <<<<<<<<<<<<<<
 *         "Construct the averaging operator on cell faces to cell centers."
 *         if self._aveF2CCV is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveF2CCV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stacks);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1759
 *     @property
 *     @cython.boundscheck(False)
 *     def aveN2CC(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I, J
 *         cdef np.float64_t[:] V
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveN2CC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveN2CC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveN2CC___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_7aveN2CC___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_id;
  __pyx_t_5numpy_int64_t __pyx_v_n_ppc;
  double __pyx_v_scale;
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_Rn = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  int_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":1764
 *         cdef np.int64_t ii, id, n_ppc
 *         cdef double scale
 *         if self._aveN2CC is None:             # <<<<<<<<<<<<<<
 *             n_ppc = 1<<self._dim
 *             scale = 1.0/n_ppc
 */
  __pyx_t_1 = (__pyx_v_self->_aveN2CC == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":1765
 *         cdef double scale
 *         if self._aveN2CC is None:
 *             n_ppc = 1<<self._dim             # <<<<<<<<<<<<<<
 *             scale = 1.0/n_ppc
 *             I = np.empty(self.nC*n_ppc, dtype=np.int64)
 */
    __pyx_v_n_ppc = (1 << __pyx_v_self->_dim);

    /* "discretize/tree_ext.pyx":1766
 *         if self._aveN2CC is None:
 *             n_ppc = 1<<self._dim
 *             scale = 1.0/n_ppc             # <<<<<<<<<<<<<<
 *             I = np.empty(self.nC*n_ppc, dtype=np.int64)
 *             J = np.empty(self.nC*n_ppc, dtype=np.int64)
 */
    if (unlikely(__pyx_v_n_ppc == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1766, __pyx_L1_error)
    }
    __pyx_v_scale = (1.0 / __pyx_v_n_ppc);

    /* "discretize/tree_ext.pyx":1767
 *             n_ppc = 1<<self._dim
 *             scale = 1.0/n_ppc
 *             I = np.empty(self.nC*n_ppc, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             J = np.empty(self.nC*n_ppc, dtype=np.int64)
 *             V = np.empty(self.nC*n_ppc, dtype=np.float64)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_ppc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
    if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_I = __pyx_t_8;
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "discretize/tree_ext.pyx":1768
 *             scale = 1.0/n_ppc
 *             I = np.empty(self.nC*n_ppc, dtype=np.int64)
 *             J = np.empty(self.nC*n_ppc, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             V = np.empty(self.nC*n_ppc, dtype=np.float64)
 * 
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_ppc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_3);
    if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_J = __pyx_t_8;
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "discretize/tree_ext.pyx":1769
 *             I = np.empty(self.nC*n_ppc, dtype=np.int64)
 *             J = np.empty(self.nC*n_ppc, dtype=np.int64)
 *             V = np.empty(self.nC*n_ppc, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *             for cell in self.tree.cells:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_ppc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_7);
    if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_V = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;

    /* "discretize/tree_ext.pyx":1771
 *             V = np.empty(self.nC*n_ppc, dtype=np.float64)
 * 
 *             for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *                 ii = cell.index
 *                 for id in range(n_ppc):
 */
    __pyx_t_11 = &__pyx_v_self->tree->cells;
    __pyx_t_10 = __pyx_t_11->begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_t_11->end())) break;
      __pyx_t_12 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_v_cell = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1772
 * 
 *             for cell in self.tree.cells:
 *                 ii = cell.index             # <<<<<<<<<<<<<<
 *                 for id in range(n_ppc):
 *                     I[ii*n_ppc + id] = ii
 */
      __pyx_t_13 = __pyx_v_cell->index;
      __pyx_v_ii = __pyx_t_13;

      /* "discretize/tree_ext.pyx":1773
 *             for cell in self.tree.cells:
 *                 ii = cell.index
 *                 for id in range(n_ppc):             # <<<<<<<<<<<<<<
 *                     I[ii*n_ppc + id] = ii
 *                     J[ii*n_ppc + id] = cell.points[id].index
 */
      __pyx_t_14 = __pyx_v_n_ppc;
      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_id = __pyx_t_15;

        /* "discretize/tree_ext.pyx":1774
 *                 ii = cell.index
 *                 for id in range(n_ppc):
 *                     I[ii*n_ppc + id] = ii             # <<<<<<<<<<<<<<
 *                     J[ii*n_ppc + id] = cell.points[id].index
 *                     V[ii*n_ppc + id] = scale
 */
        __pyx_t_16 = ((__pyx_v_ii * __pyx_v_n_ppc) + __pyx_v_id);
        if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_v_I.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_I.data + __pyx_t_16 * __pyx_v_I.strides[0]) )) = __pyx_v_ii;

        /* "discretize/tree_ext.pyx":1775
 *                 for id in range(n_ppc):
 *                     I[ii*n_ppc + id] = ii
 *                     J[ii*n_ppc + id] = cell.points[id].index             # <<<<<<<<<<<<<<
 *                     V[ii*n_ppc + id] = scale
 * 
 */
        __pyx_t_13 = (__pyx_v_cell->points[__pyx_v_id])->index;
        __pyx_t_17 = ((__pyx_v_ii * __pyx_v_n_ppc) + __pyx_v_id);
        if (__pyx_t_17 < 0) __pyx_t_17 += __pyx_v_J.shape[0];
        *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_17 * __pyx_v_J.strides[0]) )) = __pyx_t_13;

        /* "discretize/tree_ext.pyx":1776
 *                     I[ii*n_ppc + id] = ii
 *                     J[ii*n_ppc + id] = cell.points[id].index
 *                     V[ii*n_ppc + id] = scale             # <<<<<<<<<<<<<<
 * 
 *             Rn = self._deflate_nodes()
 */
        __pyx_t_18 = ((__pyx_v_ii * __pyx_v_n_ppc) + __pyx_v_id);
        if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_V.shape[0];
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_18 * __pyx_v_V.strides[0]) )) = __pyx_v_scale;
      }

      /* "discretize/tree_ext.pyx":1771
 *             V = np.empty(self.nC*n_ppc, dtype=np.float64)
 * 
 *             for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *                 ii = cell.index
 *                 for id in range(n_ppc):
 */
    }

    /* "discretize/tree_ext.pyx":1778
 *                     V[ii*n_ppc + id] = scale
 * 
 *             Rn = self._deflate_nodes()             # <<<<<<<<<<<<<<
 *             self._aveN2CC = sp.csr_matrix((V, (I, J)))*Rn
 *         return self._aveN2CC
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_nodes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1778, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1778, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_Rn = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":1779
 * 
 *             Rn = self._deflate_nodes()
 *             self._aveN2CC = sp.csr_matrix((V, (I, J)))*Rn             # <<<<<<<<<<<<<<
 *         return self._aveN2CC
 * 
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_19);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_19);
    __pyx_t_6 = 0;
    __pyx_t_19 = 0;
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_19) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1779, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_19, __pyx_t_3};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1779, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_19, __pyx_t_3};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1779, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1779, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_19); __pyx_t_19 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1779, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_v_Rn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->_aveN2CC);
    __Pyx_DECREF(__pyx_v_self->_aveN2CC);
    __pyx_v_self->_aveN2CC = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":1764
 *         cdef np.int64_t ii, id, n_ppc
 *         cdef double scale
 *         if self._aveN2CC is None:             # <<<<<<<<<<<<<<
 *             n_ppc = 1<<self._dim
 *             scale = 1.0/n_ppc
 */
  }

  /* "discretize/tree_ext.pyx":1780
 *             Rn = self._deflate_nodes()
 *             self._aveN2CC = sp.csr_matrix((V, (I, J)))*Rn
 *         return self._aveN2CC             # <<<<<<<<<<<<<<
 * 
 *     def _get_containing_cell_index(self, loc):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_aveN2CC);
  __pyx_r = __pyx_v_self->_aveN2CC;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1759
 *     @property
 *     @cython.boundscheck(False)
 *     def aveN2CC(self):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I, J
 *         cdef np.float64_t[:] V
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.aveN2CC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1782
 *         return self._aveN2CC
 * 
 *     def _get_containing_cell_index(self, loc):             # <<<<<<<<<<<<<<
 *         cdef double x, y, z
 *         x = loc[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_47_get_containing_cell_index(PyObject *__pyx_v_self, PyObject *__pyx_v_loc); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_47_get_containing_cell_index(PyObject *__pyx_v_self, PyObject *__pyx_v_loc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_containing_cell_index (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_46_get_containing_cell_index(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), ((PyObject *)__pyx_v_loc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_46_get_containing_cell_index(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_loc) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("_get_containing_cell_index", 0);

  /* "discretize/tree_ext.pyx":1784
 *     def _get_containing_cell_index(self, loc):
 *         cdef double x, y, z
 *         x = loc[0]             # <<<<<<<<<<<<<<
 *         y = loc[1]
 *         if self._dim == 3:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_loc, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_x = __pyx_t_2;

  /* "discretize/tree_ext.pyx":1785
 *         cdef double x, y, z
 *         x = loc[0]
 *         y = loc[1]             # <<<<<<<<<<<<<<
 *         if self._dim == 3:
 *             z = loc[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_loc, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;

  /* "discretize/tree_ext.pyx":1786
 *         x = loc[0]
 *         y = loc[1]
 *         if self._dim == 3:             # <<<<<<<<<<<<<<
 *             z = loc[2]
 *         else:
 */
  __pyx_t_3 = ((__pyx_v_self->_dim == 3) != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":1787
 *         y = loc[1]
 *         if self._dim == 3:
 *             z = loc[2]             # <<<<<<<<<<<<<<
 *         else:
 *             z = 0
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_loc, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1787, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_z = __pyx_t_2;

    /* "discretize/tree_ext.pyx":1786
 *         x = loc[0]
 *         y = loc[1]
 *         if self._dim == 3:             # <<<<<<<<<<<<<<
 *             z = loc[2]
 *         else:
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":1789
 *             z = loc[2]
 *         else:
 *             z = 0             # <<<<<<<<<<<<<<
 *         return self.tree.containing_cell(x, y, z).index
 * 
 */
  /*else*/ {
    __pyx_v_z = 0.0;
  }
  __pyx_L3:;

  /* "discretize/tree_ext.pyx":1790
 *         else:
 *             z = 0
 *         return self.tree.containing_cell(x, y, z).index             # <<<<<<<<<<<<<<
 * 
 *     def _getFaceP(self, xFace, yFace, zFace):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int_t(__pyx_v_self->tree->containing_cell(__pyx_v_x, __pyx_v_y, __pyx_v_z)->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1782
 *         return self._aveN2CC
 * 
 *     def _get_containing_cell_index(self, loc):             # <<<<<<<<<<<<<<
 *         cdef double x, y, z
 *         x = loc[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._get_containing_cell_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1792
 *         return self.tree.containing_cell(x, y, z).index
 * 
 *     def _getFaceP(self, xFace, yFace, zFace):             # <<<<<<<<<<<<<<
 *         cdef int dim = self._dim
 *         cdef int_t ind, id
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_49_getFaceP(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_49_getFaceP(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xFace = 0;
  PyObject *__pyx_v_yFace = 0;
  PyObject *__pyx_v_zFace = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getFaceP (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xFace,&__pyx_n_s_yFace,&__pyx_n_s_zFace,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xFace)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yFace)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getFaceP", 1, 3, 3, 1); __PYX_ERR(0, 1792, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zFace)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getFaceP", 1, 3, 3, 2); __PYX_ERR(0, 1792, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getFaceP") < 0)) __PYX_ERR(0, 1792, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xFace = values[0];
    __pyx_v_yFace = values[1];
    __pyx_v_zFace = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getFaceP", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1792, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getFaceP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_48_getFaceP(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_xFace, __pyx_v_yFace, __pyx_v_zFace);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_48_getFaceP(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_xFace, PyObject *__pyx_v_yFace, PyObject *__pyx_v_zFace) {
  int __pyx_v_dim;
  int_t __pyx_v_ind;
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_faces[3];
  __Pyx_memviewslice __pyx_v_offsets = { 0, 0, { 0 }, { 0 }, { 0 } };
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_P = NULL;
  PyObject *__pyx_v_Rf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  __pyx_t_5numpy_int64_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  std::vector<Cell *> ::iterator __pyx_t_16;
  std::vector<Cell *>  *__pyx_t_17;
  Cell *__pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  __Pyx_memviewslice __pyx_t_27 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_28 = NULL;
  __Pyx_RefNannySetupContext("_getFaceP", 0);

  /* "discretize/tree_ext.pyx":1793
 * 
 *     def _getFaceP(self, xFace, yFace, zFace):
 *         cdef int dim = self._dim             # <<<<<<<<<<<<<<
 *         cdef int_t ind, id
 * 
 */
  __pyx_t_1 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_1;

  /* "discretize/tree_ext.pyx":1799
 *         cdef np.float64_t[:] V
 * 
 *         J1 = np.empty(self.nC, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         J2 = np.empty(self.nC, dtype=np.int64)
 *         if dim==3:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_J1 = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1800
 * 
 *         J1 = np.empty(self.nC, dtype=np.int64)
 *         J2 = np.empty(self.nC, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         if dim==3:
 *             J3 = np.empty(self.nC, dtype=np.int64)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_J2 = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1801
 *         J1 = np.empty(self.nC, dtype=np.int64)
 *         J2 = np.empty(self.nC, dtype=np.int64)
 *         if dim==3:             # <<<<<<<<<<<<<<
 *             J3 = np.empty(self.nC, dtype=np.int64)
 * 
 */
  __pyx_t_8 = ((__pyx_v_dim == 3) != 0);
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":1802
 *         J2 = np.empty(self.nC, dtype=np.int64)
 *         if dim==3:
 *             J3 = np.empty(self.nC, dtype=np.int64)             # <<<<<<<<<<<<<<
 * 
 *         cdef int[3] faces
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_3);
    if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1802, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_J3 = __pyx_t_7;
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;

    /* "discretize/tree_ext.pyx":1801
 *         J1 = np.empty(self.nC, dtype=np.int64)
 *         J2 = np.empty(self.nC, dtype=np.int64)
 *         if dim==3:             # <<<<<<<<<<<<<<
 *             J3 = np.empty(self.nC, dtype=np.int64)
 * 
 */
  }

  /* "discretize/tree_ext.pyx":1805
 * 
 *         cdef int[3] faces
 *         cdef np.int64_t[:] offsets = np.empty(self._dim, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         faces[0] = (xFace == 'fXp')
 *         faces[1] = (yFace == 'fYp')
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int_t(__pyx_v_self->_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_offsets = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1806
 *         cdef int[3] faces
 *         cdef np.int64_t[:] offsets = np.empty(self._dim, dtype=np.int64)
 *         faces[0] = (xFace == 'fXp')             # <<<<<<<<<<<<<<
 *         faces[1] = (yFace == 'fYp')
 *         if dim == 3:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_xFace, __pyx_n_s_fXp, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_faces[0]) = __pyx_t_9;

  /* "discretize/tree_ext.pyx":1807
 *         cdef np.int64_t[:] offsets = np.empty(self._dim, dtype=np.int64)
 *         faces[0] = (xFace == 'fXp')
 *         faces[1] = (yFace == 'fYp')             # <<<<<<<<<<<<<<
 *         if dim == 3:
 *             faces[2] = (zFace == 'fZp')
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_yFace, __pyx_n_s_fYp, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1807, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_faces[1]) = __pyx_t_9;

  /* "discretize/tree_ext.pyx":1808
 *         faces[0] = (xFace == 'fXp')
 *         faces[1] = (yFace == 'fYp')
 *         if dim == 3:             # <<<<<<<<<<<<<<
 *             faces[2] = (zFace == 'fZp')
 * 
 */
  __pyx_t_8 = ((__pyx_v_dim == 3) != 0);
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":1809
 *         faces[1] = (yFace == 'fYp')
 *         if dim == 3:
 *             faces[2] = (zFace == 'fZp')             # <<<<<<<<<<<<<<
 * 
 *         if dim == 2:
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_zFace, __pyx_n_s_fZp, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_faces[2]) = __pyx_t_9;

    /* "discretize/tree_ext.pyx":1808
 *         faces[0] = (xFace == 'fXp')
 *         faces[1] = (yFace == 'fYp')
 *         if dim == 3:             # <<<<<<<<<<<<<<
 *             faces[2] = (zFace == 'fZp')
 * 
 */
  }

  /* "discretize/tree_ext.pyx":1811
 *             faces[2] = (zFace == 'fZp')
 * 
 *         if dim == 2:             # <<<<<<<<<<<<<<
 *             offsets[0] = 0
 *             offsets[1] = self.ntFx
 */
  __pyx_t_8 = ((__pyx_v_dim == 2) != 0);
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":1812
 * 
 *         if dim == 2:
 *             offsets[0] = 0             # <<<<<<<<<<<<<<
 *             offsets[1] = self.ntFx
 *         else:
 */
    __pyx_t_10 = 0;
    __pyx_t_9 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_offsets.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_offsets.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1812, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_10 * __pyx_v_offsets.strides[0]) )) = 0;

    /* "discretize/tree_ext.pyx":1813
 *         if dim == 2:
 *             offsets[0] = 0
 *             offsets[1] = self.ntFx             # <<<<<<<<<<<<<<
 *         else:
 *             offsets[0] = 0
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyInt_As_npy_int64(__pyx_t_2); if (unlikely((__pyx_t_11 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1813, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = 1;
    __pyx_t_9 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_offsets.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_offsets.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1813, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_12 * __pyx_v_offsets.strides[0]) )) = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1811
 *             faces[2] = (zFace == 'fZp')
 * 
 *         if dim == 2:             # <<<<<<<<<<<<<<
 *             offsets[0] = 0
 *             offsets[1] = self.ntFx
 */
    goto __pyx_L5;
  }

  /* "discretize/tree_ext.pyx":1815
 *             offsets[1] = self.ntFx
 *         else:
 *             offsets[0] = 0             # <<<<<<<<<<<<<<
 *             offsets[1] = self.ntFx
 *             offsets[2] = self.ntFx + self.ntFy
 */
  /*else*/ {
    __pyx_t_13 = 0;
    __pyx_t_9 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_offsets.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_offsets.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1815, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_13 * __pyx_v_offsets.strides[0]) )) = 0;

    /* "discretize/tree_ext.pyx":1816
 *         else:
 *             offsets[0] = 0
 *             offsets[1] = self.ntFx             # <<<<<<<<<<<<<<
 *             offsets[2] = self.ntFx + self.ntFy
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyInt_As_npy_int64(__pyx_t_2); if (unlikely((__pyx_t_11 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_14 = 1;
    __pyx_t_9 = -1;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_v_offsets.shape[0];
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_14 >= __pyx_v_offsets.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1816, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_14 * __pyx_v_offsets.strides[0]) )) = __pyx_t_11;

    /* "discretize/tree_ext.pyx":1817
 *             offsets[0] = 0
 *             offsets[1] = self.ntFx
 *             offsets[2] = self.ntFx + self.ntFy             # <<<<<<<<<<<<<<
 * 
 *         for cell in self.tree.cells:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntFy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_11 = __Pyx_PyInt_As_npy_int64(__pyx_t_4); if (unlikely((__pyx_t_11 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_15 = 2;
    __pyx_t_9 = -1;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_v_offsets.shape[0];
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_15 >= __pyx_v_offsets.shape[0])) __pyx_t_9 = 0;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1817, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_15 * __pyx_v_offsets.strides[0]) )) = __pyx_t_11;
  }
  __pyx_L5:;

  /* "discretize/tree_ext.pyx":1819
 *             offsets[2] = self.ntFx + self.ntFy
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             if dim==2:
 */
  __pyx_t_17 = &__pyx_v_self->tree->cells;
  __pyx_t_16 = __pyx_t_17->begin();
  for (;;) {
    if (!(__pyx_t_16 != __pyx_t_17->end())) break;
    __pyx_t_18 = *__pyx_t_16;
    ++__pyx_t_16;
    __pyx_v_cell = __pyx_t_18;

    /* "discretize/tree_ext.pyx":1820
 * 
 *         for cell in self.tree.cells:
 *             ind = cell.index             # <<<<<<<<<<<<<<
 *             if dim==2:
 *                 J1[ind] = cell.edges[2 + faces[0]].index
 */
    __pyx_t_1 = __pyx_v_cell->index;
    __pyx_v_ind = __pyx_t_1;

    /* "discretize/tree_ext.pyx":1821
 *         for cell in self.tree.cells:
 *             ind = cell.index
 *             if dim==2:             # <<<<<<<<<<<<<<
 *                 J1[ind] = cell.edges[2 + faces[0]].index
 *                 J2[ind] = cell.edges[    faces[1]].index + offsets[1]
 */
    __pyx_t_8 = ((__pyx_v_dim == 2) != 0);
    if (__pyx_t_8) {

      /* "discretize/tree_ext.pyx":1822
 *             ind = cell.index
 *             if dim==2:
 *                 J1[ind] = cell.edges[2 + faces[0]].index             # <<<<<<<<<<<<<<
 *                 J2[ind] = cell.edges[    faces[1]].index + offsets[1]
 *             else:
 */
      __pyx_t_1 = (__pyx_v_cell->edges[(2 + (__pyx_v_faces[0]))])->index;
      __pyx_t_19 = __pyx_v_ind;
      __pyx_t_9 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_v_J1.shape[0];
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_v_J1.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1822, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J1.data + __pyx_t_19 * __pyx_v_J1.strides[0]) )) = __pyx_t_1;

      /* "discretize/tree_ext.pyx":1823
 *             if dim==2:
 *                 J1[ind] = cell.edges[2 + faces[0]].index
 *                 J2[ind] = cell.edges[    faces[1]].index + offsets[1]             # <<<<<<<<<<<<<<
 *             else:
 *                 J1[ind] = cell.faces[    faces[0]].index
 */
      __pyx_t_20 = 1;
      __pyx_t_9 = -1;
      if (__pyx_t_20 < 0) {
        __pyx_t_20 += __pyx_v_offsets.shape[0];
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_20 >= __pyx_v_offsets.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1823, __pyx_L1_error)
      }
      __pyx_t_21 = __pyx_v_ind;
      __pyx_t_9 = -1;
      if (__pyx_t_21 < 0) {
        __pyx_t_21 += __pyx_v_J2.shape[0];
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_21 >= __pyx_v_J2.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1823, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J2.data + __pyx_t_21 * __pyx_v_J2.strides[0]) )) = ((__pyx_v_cell->edges[(__pyx_v_faces[1])])->index + (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_20 * __pyx_v_offsets.strides[0]) ))));

      /* "discretize/tree_ext.pyx":1821
 *         for cell in self.tree.cells:
 *             ind = cell.index
 *             if dim==2:             # <<<<<<<<<<<<<<
 *                 J1[ind] = cell.edges[2 + faces[0]].index
 *                 J2[ind] = cell.edges[    faces[1]].index + offsets[1]
 */
      goto __pyx_L8;
    }

    /* "discretize/tree_ext.pyx":1825
 *                 J2[ind] = cell.edges[    faces[1]].index + offsets[1]
 *             else:
 *                 J1[ind] = cell.faces[    faces[0]].index             # <<<<<<<<<<<<<<
 *                 J2[ind] = cell.faces[2 + faces[1]].index + offsets[1]
 *                 J3[ind] = cell.faces[4 + faces[2]].index + offsets[2]
 */
    /*else*/ {
      __pyx_t_1 = (__pyx_v_cell->faces[(__pyx_v_faces[0])])->index;
      __pyx_t_22 = __pyx_v_ind;
      __pyx_t_9 = -1;
      if (__pyx_t_22 < 0) {
        __pyx_t_22 += __pyx_v_J1.shape[0];
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_22 >= __pyx_v_J1.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1825, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J1.data + __pyx_t_22 * __pyx_v_J1.strides[0]) )) = __pyx_t_1;

      /* "discretize/tree_ext.pyx":1826
 *             else:
 *                 J1[ind] = cell.faces[    faces[0]].index
 *                 J2[ind] = cell.faces[2 + faces[1]].index + offsets[1]             # <<<<<<<<<<<<<<
 *                 J3[ind] = cell.faces[4 + faces[2]].index + offsets[2]
 * 
 */
      __pyx_t_23 = 1;
      __pyx_t_9 = -1;
      if (__pyx_t_23 < 0) {
        __pyx_t_23 += __pyx_v_offsets.shape[0];
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_23 >= __pyx_v_offsets.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1826, __pyx_L1_error)
      }
      __pyx_t_24 = __pyx_v_ind;
      __pyx_t_9 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_v_J2.shape[0];
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_v_J2.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1826, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J2.data + __pyx_t_24 * __pyx_v_J2.strides[0]) )) = ((__pyx_v_cell->faces[(2 + (__pyx_v_faces[1]))])->index + (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_23 * __pyx_v_offsets.strides[0]) ))));

      /* "discretize/tree_ext.pyx":1827
 *                 J1[ind] = cell.faces[    faces[0]].index
 *                 J2[ind] = cell.faces[2 + faces[1]].index + offsets[1]
 *                 J3[ind] = cell.faces[4 + faces[2]].index + offsets[2]             # <<<<<<<<<<<<<<
 * 
 *         I = np.arange(dim*self.nC, dtype=np.int64)
 */
      __pyx_t_25 = 2;
      __pyx_t_9 = -1;
      if (__pyx_t_25 < 0) {
        __pyx_t_25 += __pyx_v_offsets.shape[0];
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_25 >= __pyx_v_offsets.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1827, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_J3.memview)) { __Pyx_RaiseUnboundLocalError("J3"); __PYX_ERR(0, 1827, __pyx_L1_error) }
      __pyx_t_26 = __pyx_v_ind;
      __pyx_t_9 = -1;
      if (__pyx_t_26 < 0) {
        __pyx_t_26 += __pyx_v_J3.shape[0];
        if (unlikely(__pyx_t_26 < 0)) __pyx_t_9 = 0;
      } else if (unlikely(__pyx_t_26 >= __pyx_v_J3.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(0, 1827, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J3.data + __pyx_t_26 * __pyx_v_J3.strides[0]) )) = ((__pyx_v_cell->faces[(4 + (__pyx_v_faces[2]))])->index + (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_25 * __pyx_v_offsets.strides[0]) ))));
    }
    __pyx_L8:;

    /* "discretize/tree_ext.pyx":1819
 *             offsets[2] = self.ntFx + self.ntFy
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             if dim==2:
 */
  }

  /* "discretize/tree_ext.pyx":1829
 *                 J3[ind] = cell.faces[4 + faces[2]].index + offsets[2]
 * 
 *         I = np.arange(dim*self.nC, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         if dim==2:
 *             J = np.r_[J1, J2]
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_arange); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_I = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1830
 * 
 *         I = np.arange(dim*self.nC, dtype=np.int64)
 *         if dim==2:             # <<<<<<<<<<<<<<
 *             J = np.r_[J1, J2]
 *         else:
 */
  __pyx_t_8 = ((__pyx_v_dim == 2) != 0);
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":1831
 *         I = np.arange(dim*self.nC, dtype=np.int64)
 *         if dim==2:
 *             J = np.r_[J1, J2]             # <<<<<<<<<<<<<<
 *         else:
 *             J = np.r_[J1, J2, J3]
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_J1, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_J2, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_GetItem(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_2);
    if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_J = __pyx_t_7;
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;

    /* "discretize/tree_ext.pyx":1830
 * 
 *         I = np.arange(dim*self.nC, dtype=np.int64)
 *         if dim==2:             # <<<<<<<<<<<<<<
 *             J = np.r_[J1, J2]
 *         else:
 */
    goto __pyx_L9;
  }

  /* "discretize/tree_ext.pyx":1833
 *             J = np.r_[J1, J2]
 *         else:
 *             J = np.r_[J1, J2, J3]             # <<<<<<<<<<<<<<
 *         V = np.ones(self.nC*dim, dtype=np.float64)
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_r); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_J1, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_J2, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_J3.memview)) { __Pyx_RaiseUnboundLocalError("J3"); __PYX_ERR(0, 1833, __pyx_L1_error) }
    __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_J3, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
    if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1833, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_J = __pyx_t_7;
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;
  }
  __pyx_L9:;

  /* "discretize/tree_ext.pyx":1834
 *         else:
 *             J = np.r_[J1, J2, J3]
 *         V = np.ones(self.nC*dim, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         P = sp.csr_matrix((V, (I, J)), shape=(self._dim*self.nC, self.ntF))
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ones); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_27 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_27.memview)) __PYX_ERR(0, 1834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_V = __pyx_t_27;
  __pyx_t_27.memview = NULL;
  __pyx_t_27.data = NULL;

  /* "discretize/tree_ext.pyx":1836
 *         V = np.ones(self.nC*dim, dtype=np.float64)
 * 
 *         P = sp.csr_matrix((V, (I, J)), shape=(self._dim*self.nC, self.ntF))             # <<<<<<<<<<<<<<
 *         Rf = self._deflate_faces()
 *         return P*Rf
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_From_int_t(__pyx_v_self->_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_28 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntF); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_28);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_28 = 0;
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_shape, __pyx_t_2) < 0) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_P = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":1837
 * 
 *         P = sp.csr_matrix((V, (I, J)), shape=(self._dim*self.nC, self.ntF))
 *         Rf = self._deflate_faces()             # <<<<<<<<<<<<<<
 *         return P*Rf
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_faces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1837, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_Rf = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":1838
 *         P = sp.csr_matrix((V, (I, J)), shape=(self._dim*self.nC, self.ntF))
 *         Rf = self._deflate_faces()
 *         return P*Rf             # <<<<<<<<<<<<<<
 * 
 *     def _getFacePxx(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_P, __pyx_v_Rf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1792
 *         return self.tree.containing_cell(x, y, z).index
 * 
 *     def _getFaceP(self, xFace, yFace, zFace):             # <<<<<<<<<<<<<<
 *         cdef int dim = self._dim
 *         cdef int_t ind, id
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_27, 1);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getFaceP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J1, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J2, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J3, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_offsets, 1);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_XDECREF(__pyx_v_Rf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1840
 *         return P*Rf
 * 
 *     def _getFacePxx(self):             # <<<<<<<<<<<<<<
 *         def Pxx(xFace, yFace):
 *             return self._getFaceP(xFace, yFace, None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_51_getFacePxx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_51_getFacePxx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getFacePxx (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_50_getFacePxx(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1841
 * 
 *     def _getFacePxx(self):
 *         def Pxx(xFace, yFace):             # <<<<<<<<<<<<<<
 *             return self._getFaceP(xFace, yFace, None)
 *         return Pxx
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_getFacePxx_1Pxx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10discretize_8tree_ext_9_TreeMesh_11_getFacePxx_1Pxx = {"Pxx", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_getFacePxx_1Pxx, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_getFacePxx_1Pxx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xFace = 0;
  PyObject *__pyx_v_yFace = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pxx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xFace,&__pyx_n_s_yFace,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xFace)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yFace)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pxx", 1, 2, 2, 1); __PYX_ERR(0, 1841, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pxx") < 0)) __PYX_ERR(0, 1841, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_xFace = values[0];
    __pyx_v_yFace = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pxx", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1841, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getFacePxx.Pxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_getFacePxx_Pxx(__pyx_self, __pyx_v_xFace, __pyx_v_yFace);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_getFacePxx_Pxx(PyObject *__pyx_self, PyObject *__pyx_v_xFace, PyObject *__pyx_v_yFace) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *__pyx_cur_scope;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("Pxx", 0);
  __pyx_outer_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "discretize/tree_ext.pyx":1842
 *     def _getFacePxx(self):
 *         def Pxx(xFace, yFace):
 *             return self._getFaceP(xFace, yFace, None)             # <<<<<<<<<<<<<<
 *         return Pxx
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1842, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_getFaceP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_xFace, __pyx_v_yFace, Py_None};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1842, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_xFace, __pyx_v_yFace, Py_None};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1842, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xFace);
    __Pyx_GIVEREF(__pyx_v_xFace);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_xFace);
    __Pyx_INCREF(__pyx_v_yFace);
    __Pyx_GIVEREF(__pyx_v_yFace);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_yFace);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, Py_None);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1841
 * 
 *     def _getFacePxx(self):
 *         def Pxx(xFace, yFace):             # <<<<<<<<<<<<<<
 *             return self._getFaceP(xFace, yFace, None)
 *         return Pxx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getFacePxx.Pxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1840
 *         return P*Rf
 * 
 *     def _getFacePxx(self):             # <<<<<<<<<<<<<<
 *         def Pxx(xFace, yFace):
 *             return self._getFaceP(xFace, yFace, None)
 */

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_50_getFacePxx(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *__pyx_cur_scope;
  PyObject *__pyx_v_Pxx = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_getFacePxx", 0);
  __pyx_cur_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *)__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx(__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1840, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "discretize/tree_ext.pyx":1841
 * 
 *     def _getFacePxx(self):
 *         def Pxx(xFace, yFace):             # <<<<<<<<<<<<<<
 *             return self._getFaceP(xFace, yFace, None)
 *         return Pxx
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10discretize_8tree_ext_9_TreeMesh_11_getFacePxx_1Pxx, 0, __pyx_n_s_getFacePxx_locals_Pxx, ((PyObject*)__pyx_cur_scope), __pyx_n_s_discretize_tree_ext, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Pxx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":1843
 *         def Pxx(xFace, yFace):
 *             return self._getFaceP(xFace, yFace, None)
 *         return Pxx             # <<<<<<<<<<<<<<
 * 
 *     def _getFacePxxx(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Pxx);
  __pyx_r = __pyx_v_Pxx;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1840
 *         return P*Rf
 * 
 *     def _getFacePxx(self):             # <<<<<<<<<<<<<<
 *         def Pxx(xFace, yFace):
 *             return self._getFaceP(xFace, yFace, None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getFacePxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Pxx);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1845
 *         return Pxx
 * 
 *     def _getFacePxxx(self):             # <<<<<<<<<<<<<<
 *         def Pxxx(xFace, yFace, zFace):
 *             return self._getFaceP(xFace, yFace, zFace)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_53_getFacePxxx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_53_getFacePxxx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getFacePxxx (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_52_getFacePxxx(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1846
 * 
 *     def _getFacePxxx(self):
 *         def Pxxx(xFace, yFace, zFace):             # <<<<<<<<<<<<<<
 *             return self._getFaceP(xFace, yFace, zFace)
 *         return Pxxx
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_12_getFacePxxx_1Pxxx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10discretize_8tree_ext_9_TreeMesh_12_getFacePxxx_1Pxxx = {"Pxxx", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_12_getFacePxxx_1Pxxx, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_12_getFacePxxx_1Pxxx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xFace = 0;
  PyObject *__pyx_v_yFace = 0;
  PyObject *__pyx_v_zFace = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pxxx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xFace,&__pyx_n_s_yFace,&__pyx_n_s_zFace,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xFace)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yFace)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pxxx", 1, 3, 3, 1); __PYX_ERR(0, 1846, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zFace)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pxxx", 1, 3, 3, 2); __PYX_ERR(0, 1846, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pxxx") < 0)) __PYX_ERR(0, 1846, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xFace = values[0];
    __pyx_v_yFace = values[1];
    __pyx_v_zFace = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pxxx", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1846, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getFacePxxx.Pxxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_getFacePxxx_Pxxx(__pyx_self, __pyx_v_xFace, __pyx_v_yFace, __pyx_v_zFace);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_getFacePxxx_Pxxx(PyObject *__pyx_self, PyObject *__pyx_v_xFace, PyObject *__pyx_v_yFace, PyObject *__pyx_v_zFace) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *__pyx_cur_scope;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("Pxxx", 0);
  __pyx_outer_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "discretize/tree_ext.pyx":1847
 *     def _getFacePxxx(self):
 *         def Pxxx(xFace, yFace, zFace):
 *             return self._getFaceP(xFace, yFace, zFace)             # <<<<<<<<<<<<<<
 *         return Pxxx
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1847, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_getFaceP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_xFace, __pyx_v_yFace, __pyx_v_zFace};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_xFace, __pyx_v_yFace, __pyx_v_zFace};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xFace);
    __Pyx_GIVEREF(__pyx_v_xFace);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_xFace);
    __Pyx_INCREF(__pyx_v_yFace);
    __Pyx_GIVEREF(__pyx_v_yFace);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_yFace);
    __Pyx_INCREF(__pyx_v_zFace);
    __Pyx_GIVEREF(__pyx_v_zFace);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_zFace);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1846
 * 
 *     def _getFacePxxx(self):
 *         def Pxxx(xFace, yFace, zFace):             # <<<<<<<<<<<<<<
 *             return self._getFaceP(xFace, yFace, zFace)
 *         return Pxxx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getFacePxxx.Pxxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1845
 *         return Pxx
 * 
 *     def _getFacePxxx(self):             # <<<<<<<<<<<<<<
 *         def Pxxx(xFace, yFace, zFace):
 *             return self._getFaceP(xFace, yFace, zFace)
 */

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_52_getFacePxxx(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *__pyx_cur_scope;
  PyObject *__pyx_v_Pxxx = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_getFacePxxx", 0);
  __pyx_cur_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *)__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx(__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1845, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "discretize/tree_ext.pyx":1846
 * 
 *     def _getFacePxxx(self):
 *         def Pxxx(xFace, yFace, zFace):             # <<<<<<<<<<<<<<
 *             return self._getFaceP(xFace, yFace, zFace)
 *         return Pxxx
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10discretize_8tree_ext_9_TreeMesh_12_getFacePxxx_1Pxxx, 0, __pyx_n_s_getFacePxxx_locals_Pxxx, ((PyObject*)__pyx_cur_scope), __pyx_n_s_discretize_tree_ext, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Pxxx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":1848
 *         def Pxxx(xFace, yFace, zFace):
 *             return self._getFaceP(xFace, yFace, zFace)
 *         return Pxxx             # <<<<<<<<<<<<<<
 * 
 *     def _getEdgeP(self, xEdge, yEdge, zEdge):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Pxxx);
  __pyx_r = __pyx_v_Pxxx;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1845
 *         return Pxx
 * 
 *     def _getFacePxxx(self):             # <<<<<<<<<<<<<<
 *         def Pxxx(xFace, yFace, zFace):
 *             return self._getFaceP(xFace, yFace, zFace)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getFacePxxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Pxxx);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1850
 *         return Pxxx
 * 
 *     def _getEdgeP(self, xEdge, yEdge, zEdge):             # <<<<<<<<<<<<<<
 *         cdef int dim = self._dim
 *         cdef int_t ind, id
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_55_getEdgeP(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_55_getEdgeP(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xEdge = 0;
  PyObject *__pyx_v_yEdge = 0;
  PyObject *__pyx_v_zEdge = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getEdgeP (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xEdge,&__pyx_n_s_yEdge,&__pyx_n_s_zEdge,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xEdge)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yEdge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getEdgeP", 1, 3, 3, 1); __PYX_ERR(0, 1850, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zEdge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getEdgeP", 1, 3, 3, 2); __PYX_ERR(0, 1850, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getEdgeP") < 0)) __PYX_ERR(0, 1850, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xEdge = values[0];
    __pyx_v_yEdge = values[1];
    __pyx_v_zEdge = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getEdgeP", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1850, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgeP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_54_getEdgeP(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_xEdge, __pyx_v_yEdge, __pyx_v_zEdge);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_54_getEdgeP(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_xEdge, PyObject *__pyx_v_yEdge, PyObject *__pyx_v_zEdge) {
  int __pyx_v_dim;
  int_t __pyx_v_ind;
  int __pyx_v_epc;
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_edges[3];
  __Pyx_memviewslice __pyx_v_offsets = { 0, 0, { 0 }, { 0 }, { 0 } };
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_P = NULL;
  PyObject *__pyx_v_Rf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  std::vector<Cell *> ::iterator __pyx_t_17;
  std::vector<Cell *>  *__pyx_t_18;
  Cell *__pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  __Pyx_memviewslice __pyx_t_26 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_27 = NULL;
  __Pyx_RefNannySetupContext("_getEdgeP", 0);

  /* "discretize/tree_ext.pyx":1851
 * 
 *     def _getEdgeP(self, xEdge, yEdge, zEdge):
 *         cdef int dim = self._dim             # <<<<<<<<<<<<<<
 *         cdef int_t ind, id
 *         cdef int epc = 1<<(dim-1) #edges per cell 2/4
 */
  __pyx_t_1 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_1;

  /* "discretize/tree_ext.pyx":1853
 *         cdef int dim = self._dim
 *         cdef int_t ind, id
 *         cdef int epc = 1<<(dim-1) #edges per cell 2/4             # <<<<<<<<<<<<<<
 * 
 *         cdef np.int64_t[:] I, J, J1, J2, J3
 */
  __pyx_v_epc = (1 << (__pyx_v_dim - 1));

  /* "discretize/tree_ext.pyx":1858
 *         cdef np.float64_t[:] V
 * 
 *         J1 = np.empty(self.nC, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         J2 = np.empty(self.nC, dtype=np.int64)
 *         if dim == 3:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_J1 = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1859
 * 
 *         J1 = np.empty(self.nC, dtype=np.int64)
 *         J2 = np.empty(self.nC, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         if dim == 3:
 *             J3 = np.empty(self.nC, dtype=np.int64)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_5);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_J2 = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1860
 *         J1 = np.empty(self.nC, dtype=np.int64)
 *         J2 = np.empty(self.nC, dtype=np.int64)
 *         if dim == 3:             # <<<<<<<<<<<<<<
 *             J3 = np.empty(self.nC, dtype=np.int64)
 * 
 */
  __pyx_t_8 = ((__pyx_v_dim == 3) != 0);
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":1861
 *         J2 = np.empty(self.nC, dtype=np.int64)
 *         if dim == 3:
 *             J3 = np.empty(self.nC, dtype=np.int64)             # <<<<<<<<<<<<<<
 * 
 *         cdef int[3] edges
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_3);
    if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_J3 = __pyx_t_7;
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;

    /* "discretize/tree_ext.pyx":1860
 *         J1 = np.empty(self.nC, dtype=np.int64)
 *         J2 = np.empty(self.nC, dtype=np.int64)
 *         if dim == 3:             # <<<<<<<<<<<<<<
 *             J3 = np.empty(self.nC, dtype=np.int64)
 * 
 */
  }

  /* "discretize/tree_ext.pyx":1864
 * 
 *         cdef int[3] edges
 *         cdef np.int64_t[:] offsets = np.empty(self._dim, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         try:
 *             edges[0] = int(xEdge[-1]) #0, 1, 2, 3
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int_t(__pyx_v_self->_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_offsets = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1865
 *         cdef int[3] edges
 *         cdef np.int64_t[:] offsets = np.empty(self._dim, dtype=np.int64)
 *         try:             # <<<<<<<<<<<<<<
 *             edges[0] = int(xEdge[-1]) #0, 1, 2, 3
 *             edges[1] = int(yEdge[-1]) #0, 1, 2, 3
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    /*try:*/ {

      /* "discretize/tree_ext.pyx":1866
 *         cdef np.int64_t[:] offsets = np.empty(self._dim, dtype=np.int64)
 *         try:
 *             edges[0] = int(xEdge[-1]) #0, 1, 2, 3             # <<<<<<<<<<<<<<
 *             edges[1] = int(yEdge[-1]) #0, 1, 2, 3
 *             if dim == 3:
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_xEdge, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1866, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1866, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1866, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_edges[0]) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1867
 *         try:
 *             edges[0] = int(xEdge[-1]) #0, 1, 2, 3
 *             edges[1] = int(yEdge[-1]) #0, 1, 2, 3             # <<<<<<<<<<<<<<
 *             if dim == 3:
 *                 edges[2] = int(zEdge[-1]) #0, 1, 2, 3
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_yEdge, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1867, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1867, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1867, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      (__pyx_v_edges[1]) = __pyx_t_12;

      /* "discretize/tree_ext.pyx":1868
 *             edges[0] = int(xEdge[-1]) #0, 1, 2, 3
 *             edges[1] = int(yEdge[-1]) #0, 1, 2, 3
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 edges[2] = int(zEdge[-1]) #0, 1, 2, 3
 *         except ValueError:
 */
      __pyx_t_8 = ((__pyx_v_dim == 3) != 0);
      if (__pyx_t_8) {

        /* "discretize/tree_ext.pyx":1869
 *             edges[1] = int(yEdge[-1]) #0, 1, 2, 3
 *             if dim == 3:
 *                 edges[2] = int(zEdge[-1]) #0, 1, 2, 3             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             raise Exception('Last character of edge string must be 0, 1, 2, or 3')
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_zEdge, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1869, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1869, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1869, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        (__pyx_v_edges[2]) = __pyx_t_12;

        /* "discretize/tree_ext.pyx":1868
 *             edges[0] = int(xEdge[-1]) #0, 1, 2, 3
 *             edges[1] = int(yEdge[-1]) #0, 1, 2, 3
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 edges[2] = int(zEdge[-1]) #0, 1, 2, 3
 *         except ValueError:
 */
      }

      /* "discretize/tree_ext.pyx":1865
 *         cdef int[3] edges
 *         cdef np.int64_t[:] offsets = np.empty(self._dim, dtype=np.int64)
 *         try:             # <<<<<<<<<<<<<<
 *             edges[0] = int(xEdge[-1]) #0, 1, 2, 3
 *             edges[1] = int(yEdge[-1]) #0, 1, 2, 3
 */
    }
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);

    /* "discretize/tree_ext.pyx":1870
 *             if dim == 3:
 *                 edges[2] = int(zEdge[-1]) #0, 1, 2, 3
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             raise Exception('Last character of edge string must be 0, 1, 2, or 3')
 * 
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_12) {
      __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgeP", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_4) < 0) __PYX_ERR(0, 1870, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_4);

      /* "discretize/tree_ext.pyx":1871
 *                 edges[2] = int(zEdge[-1]) #0, 1, 2, 3
 *         except ValueError:
 *             raise Exception('Last character of edge string must be 0, 1, 2, or 3')             # <<<<<<<<<<<<<<
 * 
 *         offsets[0] = 0
 */
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1871, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 1871, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "discretize/tree_ext.pyx":1865
 *         cdef int[3] edges
 *         cdef np.int64_t[:] offsets = np.empty(self._dim, dtype=np.int64)
 *         try:             # <<<<<<<<<<<<<<
 *             edges[0] = int(xEdge[-1]) #0, 1, 2, 3
 *             edges[1] = int(yEdge[-1]) #0, 1, 2, 3
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L1_error;
    __pyx_L11_try_end:;
  }

  /* "discretize/tree_ext.pyx":1873
 *             raise Exception('Last character of edge string must be 0, 1, 2, or 3')
 * 
 *         offsets[0] = 0             # <<<<<<<<<<<<<<
 *         offsets[1] = self.ntEx
 *         if dim==3:
 */
  __pyx_t_13 = 0;
  __pyx_t_12 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_v_offsets.shape[0];
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_12 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_v_offsets.shape[0])) __pyx_t_12 = 0;
  if (unlikely(__pyx_t_12 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_12);
    __PYX_ERR(0, 1873, __pyx_L1_error)
  }
  *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_13 * __pyx_v_offsets.strides[0]) )) = 0;

  /* "discretize/tree_ext.pyx":1874
 * 
 *         offsets[0] = 0
 *         offsets[1] = self.ntEx             # <<<<<<<<<<<<<<
 *         if dim==3:
 *             offsets[2] = self.ntEx + self.ntEy
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = __Pyx_PyInt_As_npy_int64(__pyx_t_4); if (unlikely((__pyx_t_14 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1874, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_15 = 1;
  __pyx_t_12 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_v_offsets.shape[0];
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_12 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_v_offsets.shape[0])) __pyx_t_12 = 0;
  if (unlikely(__pyx_t_12 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_12);
    __PYX_ERR(0, 1874, __pyx_L1_error)
  }
  *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_15 * __pyx_v_offsets.strides[0]) )) = __pyx_t_14;

  /* "discretize/tree_ext.pyx":1875
 *         offsets[0] = 0
 *         offsets[1] = self.ntEx
 *         if dim==3:             # <<<<<<<<<<<<<<
 *             offsets[2] = self.ntEx + self.ntEy
 * 
 */
  __pyx_t_8 = ((__pyx_v_dim == 3) != 0);
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":1876
 *         offsets[1] = self.ntEx
 *         if dim==3:
 *             offsets[2] = self.ntEx + self.ntEy             # <<<<<<<<<<<<<<
 * 
 *         for cell in self.tree.cells:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_npy_int64(__pyx_t_3); if (unlikely((__pyx_t_14 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_16 = 2;
    __pyx_t_12 = -1;
    if (__pyx_t_16 < 0) {
      __pyx_t_16 += __pyx_v_offsets.shape[0];
      if (unlikely(__pyx_t_16 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_16 >= __pyx_v_offsets.shape[0])) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 1876, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_16 * __pyx_v_offsets.strides[0]) )) = __pyx_t_14;

    /* "discretize/tree_ext.pyx":1875
 *         offsets[0] = 0
 *         offsets[1] = self.ntEx
 *         if dim==3:             # <<<<<<<<<<<<<<
 *             offsets[2] = self.ntEx + self.ntEy
 * 
 */
  }

  /* "discretize/tree_ext.pyx":1878
 *             offsets[2] = self.ntEx + self.ntEy
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             J1[ind] = cell.edges[0*epc + edges[0]].index + offsets[0]
 */
  __pyx_t_18 = &__pyx_v_self->tree->cells;
  __pyx_t_17 = __pyx_t_18->begin();
  for (;;) {
    if (!(__pyx_t_17 != __pyx_t_18->end())) break;
    __pyx_t_19 = *__pyx_t_17;
    ++__pyx_t_17;
    __pyx_v_cell = __pyx_t_19;

    /* "discretize/tree_ext.pyx":1879
 * 
 *         for cell in self.tree.cells:
 *             ind = cell.index             # <<<<<<<<<<<<<<
 *             J1[ind] = cell.edges[0*epc + edges[0]].index + offsets[0]
 *             J2[ind] = cell.edges[1*epc + edges[1]].index + offsets[1]
 */
    __pyx_t_1 = __pyx_v_cell->index;
    __pyx_v_ind = __pyx_t_1;

    /* "discretize/tree_ext.pyx":1880
 *         for cell in self.tree.cells:
 *             ind = cell.index
 *             J1[ind] = cell.edges[0*epc + edges[0]].index + offsets[0]             # <<<<<<<<<<<<<<
 *             J2[ind] = cell.edges[1*epc + edges[1]].index + offsets[1]
 *             if dim==3:
 */
    __pyx_t_20 = 0;
    __pyx_t_12 = -1;
    if (__pyx_t_20 < 0) {
      __pyx_t_20 += __pyx_v_offsets.shape[0];
      if (unlikely(__pyx_t_20 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_20 >= __pyx_v_offsets.shape[0])) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 1880, __pyx_L1_error)
    }
    __pyx_t_21 = __pyx_v_ind;
    __pyx_t_12 = -1;
    if (__pyx_t_21 < 0) {
      __pyx_t_21 += __pyx_v_J1.shape[0];
      if (unlikely(__pyx_t_21 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_21 >= __pyx_v_J1.shape[0])) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 1880, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J1.data + __pyx_t_21 * __pyx_v_J1.strides[0]) )) = ((__pyx_v_cell->edges[((0 * __pyx_v_epc) + (__pyx_v_edges[0]))])->index + (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_20 * __pyx_v_offsets.strides[0]) ))));

    /* "discretize/tree_ext.pyx":1881
 *             ind = cell.index
 *             J1[ind] = cell.edges[0*epc + edges[0]].index + offsets[0]
 *             J2[ind] = cell.edges[1*epc + edges[1]].index + offsets[1]             # <<<<<<<<<<<<<<
 *             if dim==3:
 *                 J3[ind] = cell.edges[2*epc + edges[2]].index + offsets[2]
 */
    __pyx_t_22 = 1;
    __pyx_t_12 = -1;
    if (__pyx_t_22 < 0) {
      __pyx_t_22 += __pyx_v_offsets.shape[0];
      if (unlikely(__pyx_t_22 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_22 >= __pyx_v_offsets.shape[0])) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 1881, __pyx_L1_error)
    }
    __pyx_t_23 = __pyx_v_ind;
    __pyx_t_12 = -1;
    if (__pyx_t_23 < 0) {
      __pyx_t_23 += __pyx_v_J2.shape[0];
      if (unlikely(__pyx_t_23 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_23 >= __pyx_v_J2.shape[0])) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 1881, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J2.data + __pyx_t_23 * __pyx_v_J2.strides[0]) )) = ((__pyx_v_cell->edges[((1 * __pyx_v_epc) + (__pyx_v_edges[1]))])->index + (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_22 * __pyx_v_offsets.strides[0]) ))));

    /* "discretize/tree_ext.pyx":1882
 *             J1[ind] = cell.edges[0*epc + edges[0]].index + offsets[0]
 *             J2[ind] = cell.edges[1*epc + edges[1]].index + offsets[1]
 *             if dim==3:             # <<<<<<<<<<<<<<
 *                 J3[ind] = cell.edges[2*epc + edges[2]].index + offsets[2]
 * 
 */
    __pyx_t_8 = ((__pyx_v_dim == 3) != 0);
    if (__pyx_t_8) {

      /* "discretize/tree_ext.pyx":1883
 *             J2[ind] = cell.edges[1*epc + edges[1]].index + offsets[1]
 *             if dim==3:
 *                 J3[ind] = cell.edges[2*epc + edges[2]].index + offsets[2]             # <<<<<<<<<<<<<<
 * 
 *         I = np.arange(dim*self.nC, dtype=np.int64)
 */
      __pyx_t_24 = 2;
      __pyx_t_12 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_v_offsets.shape[0];
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_12 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_v_offsets.shape[0])) __pyx_t_12 = 0;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        __PYX_ERR(0, 1883, __pyx_L1_error)
      }
      if (unlikely(!__pyx_v_J3.memview)) { __Pyx_RaiseUnboundLocalError("J3"); __PYX_ERR(0, 1883, __pyx_L1_error) }
      __pyx_t_25 = __pyx_v_ind;
      __pyx_t_12 = -1;
      if (__pyx_t_25 < 0) {
        __pyx_t_25 += __pyx_v_J3.shape[0];
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_12 = 0;
      } else if (unlikely(__pyx_t_25 >= __pyx_v_J3.shape[0])) __pyx_t_12 = 0;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        __PYX_ERR(0, 1883, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J3.data + __pyx_t_25 * __pyx_v_J3.strides[0]) )) = ((__pyx_v_cell->edges[((2 * __pyx_v_epc) + (__pyx_v_edges[2]))])->index + (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_offsets.data + __pyx_t_24 * __pyx_v_offsets.strides[0]) ))));

      /* "discretize/tree_ext.pyx":1882
 *             J1[ind] = cell.edges[0*epc + edges[0]].index + offsets[0]
 *             J2[ind] = cell.edges[1*epc + edges[1]].index + offsets[1]
 *             if dim==3:             # <<<<<<<<<<<<<<
 *                 J3[ind] = cell.edges[2*epc + edges[2]].index + offsets[2]
 * 
 */
    }

    /* "discretize/tree_ext.pyx":1878
 *             offsets[2] = self.ntEx + self.ntEy
 * 
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ind = cell.index
 *             J1[ind] = cell.edges[0*epc + edges[0]].index + offsets[0]
 */
  }

  /* "discretize/tree_ext.pyx":1885
 *                 J3[ind] = cell.edges[2*epc + edges[2]].index + offsets[2]
 * 
 *         I = np.arange(dim*self.nC, dtype=np.int64)             # <<<<<<<<<<<<<<
 *         if dim==2:
 *             J = np.r_[J1, J2]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_arange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_I = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1886
 * 
 *         I = np.arange(dim*self.nC, dtype=np.int64)
 *         if dim==2:             # <<<<<<<<<<<<<<
 *             J = np.r_[J1, J2]
 *         else:
 */
  __pyx_t_8 = ((__pyx_v_dim == 2) != 0);
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":1887
 *         I = np.arange(dim*self.nC, dtype=np.int64)
 *         if dim==2:
 *             J = np.r_[J1, J2]             # <<<<<<<<<<<<<<
 *         else:
 *             J = np.r_[J1, J2, J3]
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_J1, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_J2, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetItem(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_4);
    if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_J = __pyx_t_7;
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;

    /* "discretize/tree_ext.pyx":1886
 * 
 *         I = np.arange(dim*self.nC, dtype=np.int64)
 *         if dim==2:             # <<<<<<<<<<<<<<
 *             J = np.r_[J1, J2]
 *         else:
 */
    goto __pyx_L19;
  }

  /* "discretize/tree_ext.pyx":1889
 *             J = np.r_[J1, J2]
 *         else:
 *             J = np.r_[J1, J2, J3]             # <<<<<<<<<<<<<<
 *         V = np.ones(self.nC*dim, dtype=np.float64)
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_J1, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_J2, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_J3.memview)) { __Pyx_RaiseUnboundLocalError("J3"); __PYX_ERR(0, 1889, __pyx_L1_error) }
    __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_J3, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
    if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_J = __pyx_t_7;
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;
  }
  __pyx_L19:;

  /* "discretize/tree_ext.pyx":1890
 *         else:
 *             J = np.r_[J1, J2, J3]
 *         V = np.ones(self.nC*dim, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         P = sp.csr_matrix((V, (I, J)), shape=(self._dim*self.nC, self.ntE))
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ones); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_26 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_4);
  if (unlikely(!__pyx_t_26.memview)) __PYX_ERR(0, 1890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_V = __pyx_t_26;
  __pyx_t_26.memview = NULL;
  __pyx_t_26.data = NULL;

  /* "discretize/tree_ext.pyx":1892
 *         V = np.ones(self.nC*dim, dtype=np.float64)
 * 
 *         P = sp.csr_matrix((V, (I, J)), shape=(self._dim*self.nC, self.ntE))             # <<<<<<<<<<<<<<
 *         Rf = self._deflate_edges()
 *         return P*Rf
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int_t(__pyx_v_self->_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_27 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_27);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_27 = 0;
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_shape, __pyx_t_4) < 0) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_P = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1893
 * 
 *         P = sp.csr_matrix((V, (I, J)), shape=(self._dim*self.nC, self.ntE))
 *         Rf = self._deflate_edges()             # <<<<<<<<<<<<<<
 *         return P*Rf
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_edges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1893, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1893, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Rf = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1894
 *         P = sp.csr_matrix((V, (I, J)), shape=(self._dim*self.nC, self.ntE))
 *         Rf = self._deflate_edges()
 *         return P*Rf             # <<<<<<<<<<<<<<
 * 
 *     def _getEdgePxx(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_P, __pyx_v_Rf); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1850
 *         return Pxxx
 * 
 *     def _getEdgeP(self, xEdge, yEdge, zEdge):             # <<<<<<<<<<<<<<
 *         cdef int dim = self._dim
 *         cdef int_t ind, id
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_26, 1);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgeP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J1, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J2, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J3, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_offsets, 1);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_XDECREF(__pyx_v_Rf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1896
 *         return P*Rf
 * 
 *     def _getEdgePxx(self):             # <<<<<<<<<<<<<<
 *         def Pxx(xEdge, yEdge):
 *             return self._getEdgeP(xEdge, yEdge, None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_57_getEdgePxx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_57_getEdgePxx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getEdgePxx (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_56_getEdgePxx(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1897
 * 
 *     def _getEdgePxx(self):
 *         def Pxx(xEdge, yEdge):             # <<<<<<<<<<<<<<
 *             return self._getEdgeP(xEdge, yEdge, None)
 *         return Pxx
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_getEdgePxx_1Pxx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10discretize_8tree_ext_9_TreeMesh_11_getEdgePxx_1Pxx = {"Pxx", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_getEdgePxx_1Pxx, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_getEdgePxx_1Pxx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xEdge = 0;
  PyObject *__pyx_v_yEdge = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pxx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xEdge,&__pyx_n_s_yEdge,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xEdge)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yEdge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pxx", 1, 2, 2, 1); __PYX_ERR(0, 1897, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pxx") < 0)) __PYX_ERR(0, 1897, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_xEdge = values[0];
    __pyx_v_yEdge = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pxx", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1897, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgePxx.Pxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_getEdgePxx_Pxx(__pyx_self, __pyx_v_xEdge, __pyx_v_yEdge);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_getEdgePxx_Pxx(PyObject *__pyx_self, PyObject *__pyx_v_xEdge, PyObject *__pyx_v_yEdge) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *__pyx_cur_scope;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("Pxx", 0);
  __pyx_outer_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "discretize/tree_ext.pyx":1898
 *     def _getEdgePxx(self):
 *         def Pxx(xEdge, yEdge):
 *             return self._getEdgeP(xEdge, yEdge, None)             # <<<<<<<<<<<<<<
 *         return Pxx
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1898, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_getEdgeP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_xEdge, __pyx_v_yEdge, Py_None};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_xEdge, __pyx_v_yEdge, Py_None};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xEdge);
    __Pyx_GIVEREF(__pyx_v_xEdge);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_xEdge);
    __Pyx_INCREF(__pyx_v_yEdge);
    __Pyx_GIVEREF(__pyx_v_yEdge);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_yEdge);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, Py_None);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1897
 * 
 *     def _getEdgePxx(self):
 *         def Pxx(xEdge, yEdge):             # <<<<<<<<<<<<<<
 *             return self._getEdgeP(xEdge, yEdge, None)
 *         return Pxx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgePxx.Pxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1896
 *         return P*Rf
 * 
 *     def _getEdgePxx(self):             # <<<<<<<<<<<<<<
 *         def Pxx(xEdge, yEdge):
 *             return self._getEdgeP(xEdge, yEdge, None)
 */

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_56_getEdgePxx(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *__pyx_cur_scope;
  PyObject *__pyx_v_Pxx = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_getEdgePxx", 0);
  __pyx_cur_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *)__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx(__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1896, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "discretize/tree_ext.pyx":1897
 * 
 *     def _getEdgePxx(self):
 *         def Pxx(xEdge, yEdge):             # <<<<<<<<<<<<<<
 *             return self._getEdgeP(xEdge, yEdge, None)
 *         return Pxx
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10discretize_8tree_ext_9_TreeMesh_11_getEdgePxx_1Pxx, 0, __pyx_n_s_getEdgePxx_locals_Pxx, ((PyObject*)__pyx_cur_scope), __pyx_n_s_discretize_tree_ext, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Pxx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":1899
 *         def Pxx(xEdge, yEdge):
 *             return self._getEdgeP(xEdge, yEdge, None)
 *         return Pxx             # <<<<<<<<<<<<<<
 * 
 *     def _getEdgePxxx(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Pxx);
  __pyx_r = __pyx_v_Pxx;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1896
 *         return P*Rf
 * 
 *     def _getEdgePxx(self):             # <<<<<<<<<<<<<<
 *         def Pxx(xEdge, yEdge):
 *             return self._getEdgeP(xEdge, yEdge, None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgePxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Pxx);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1901
 *         return Pxx
 * 
 *     def _getEdgePxxx(self):             # <<<<<<<<<<<<<<
 *         def Pxxx(xEdge, yEdge, zEdge):
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_59_getEdgePxxx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_59_getEdgePxxx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getEdgePxxx (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_58_getEdgePxxx(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1902
 * 
 *     def _getEdgePxxx(self):
 *         def Pxxx(xEdge, yEdge, zEdge):             # <<<<<<<<<<<<<<
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 *         return Pxxx
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_12_getEdgePxxx_1Pxxx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10discretize_8tree_ext_9_TreeMesh_12_getEdgePxxx_1Pxxx = {"Pxxx", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_12_getEdgePxxx_1Pxxx, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_12_getEdgePxxx_1Pxxx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xEdge = 0;
  PyObject *__pyx_v_yEdge = 0;
  PyObject *__pyx_v_zEdge = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pxxx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xEdge,&__pyx_n_s_yEdge,&__pyx_n_s_zEdge,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xEdge)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yEdge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pxxx", 1, 3, 3, 1); __PYX_ERR(0, 1902, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zEdge)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pxxx", 1, 3, 3, 2); __PYX_ERR(0, 1902, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pxxx") < 0)) __PYX_ERR(0, 1902, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xEdge = values[0];
    __pyx_v_yEdge = values[1];
    __pyx_v_zEdge = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pxxx", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1902, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgePxxx.Pxxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_getEdgePxxx_Pxxx(__pyx_self, __pyx_v_xEdge, __pyx_v_yEdge, __pyx_v_zEdge);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_12_getEdgePxxx_Pxxx(PyObject *__pyx_self, PyObject *__pyx_v_xEdge, PyObject *__pyx_v_yEdge, PyObject *__pyx_v_zEdge) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *__pyx_cur_scope;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("Pxxx", 0);
  __pyx_outer_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "discretize/tree_ext.pyx":1903
 *     def _getEdgePxxx(self):
 *         def Pxxx(xEdge, yEdge, zEdge):
 *             return self._getEdgeP(xEdge, yEdge, zEdge)             # <<<<<<<<<<<<<<
 *         return Pxxx
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1903, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_getEdgeP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_xEdge, __pyx_v_yEdge, __pyx_v_zEdge};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_xEdge, __pyx_v_yEdge, __pyx_v_zEdge};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xEdge);
    __Pyx_GIVEREF(__pyx_v_xEdge);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_xEdge);
    __Pyx_INCREF(__pyx_v_yEdge);
    __Pyx_GIVEREF(__pyx_v_yEdge);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_yEdge);
    __Pyx_INCREF(__pyx_v_zEdge);
    __Pyx_GIVEREF(__pyx_v_zEdge);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_zEdge);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1902
 * 
 *     def _getEdgePxxx(self):
 *         def Pxxx(xEdge, yEdge, zEdge):             # <<<<<<<<<<<<<<
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 *         return Pxxx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgePxxx.Pxxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1901
 *         return Pxx
 * 
 *     def _getEdgePxxx(self):             # <<<<<<<<<<<<<<
 *         def Pxxx(xEdge, yEdge, zEdge):
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 */

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_58_getEdgePxxx(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *__pyx_cur_scope;
  PyObject *__pyx_v_Pxxx = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_getEdgePxxx", 0);
  __pyx_cur_scope = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *)__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx(__pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1901, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "discretize/tree_ext.pyx":1902
 * 
 *     def _getEdgePxxx(self):
 *         def Pxxx(xEdge, yEdge, zEdge):             # <<<<<<<<<<<<<<
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 *         return Pxxx
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10discretize_8tree_ext_9_TreeMesh_12_getEdgePxxx_1Pxxx, 0, __pyx_n_s_getEdgePxxx_locals_Pxxx, ((PyObject*)__pyx_cur_scope), __pyx_n_s_discretize_tree_ext, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Pxxx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":1904
 *         def Pxxx(xEdge, yEdge, zEdge):
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 *         return Pxxx             # <<<<<<<<<<<<<<
 * 
 *     def _cull_outer_simplices(self, ps, simps, cull_dir='xyz'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_Pxxx);
  __pyx_r = __pyx_v_Pxxx;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1901
 *         return Pxx
 * 
 *     def _getEdgePxxx(self):             # <<<<<<<<<<<<<<
 *         def Pxxx(xEdge, yEdge, zEdge):
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getEdgePxxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Pxxx);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1906
 *         return Pxxx
 * 
 *     def _cull_outer_simplices(self, ps, simps, cull_dir='xyz'):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] points = ps.astype(np.float64)
 *         cdef np.int64_t[:, :] simplices = simps.astype(np.int64)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_61_cull_outer_simplices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_61_cull_outer_simplices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ps = 0;
  PyObject *__pyx_v_simps = 0;
  PyObject *__pyx_v_cull_dir = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_cull_outer_simplices (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ps,&__pyx_n_s_simps,&__pyx_n_s_cull_dir,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_n_s_xyz);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_simps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_cull_outer_simplices", 0, 2, 3, 1); __PYX_ERR(0, 1906, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cull_dir);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_cull_outer_simplices") < 0)) __PYX_ERR(0, 1906, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ps = values[0];
    __pyx_v_simps = values[1];
    __pyx_v_cull_dir = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_cull_outer_simplices", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1906, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._cull_outer_simplices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_60_cull_outer_simplices(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_ps, __pyx_v_simps, __pyx_v_cull_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_60_cull_outer_simplices(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_ps, PyObject *__pyx_v_simps, PyObject *__pyx_v_cull_dir) {
  __Pyx_memviewslice __pyx_v_points = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_simplices = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_cull_x;
  int __pyx_v_cull_y;
  int __pyx_v_cull_z;
  __pyx_t_5numpy_int64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_ii;
  __pyx_t_5numpy_int64_t __pyx_v_id;
  __pyx_t_5numpy_int64_t __pyx_v_n_simps;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_center = { 0, 0, { 0 }, { 0 }, { 0 } };
  Cell *__pyx_v_cell;
  PyObject *__pyx_v_is_inside = NULL;
  double __pyx_v_diff;
  CYTHON_UNUSED long __pyx_v_iz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_memviewslice __pyx_t_11 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  __pyx_t_5numpy_int64_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  __pyx_t_5numpy_int64_t __pyx_t_22;
  double __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  int __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  __Pyx_RefNannySetupContext("_cull_outer_simplices", 0);

  /* "discretize/tree_ext.pyx":1907
 * 
 *     def _cull_outer_simplices(self, ps, simps, cull_dir='xyz'):
 *         cdef np.float64_t[:, :] points = ps.astype(np.float64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:, :] simplices = simps.astype(np.int64)
 *         cdef int cull_x, cull_y, cull_z
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ps, __pyx_n_s_astype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_t_1);
  if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_points = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "discretize/tree_ext.pyx":1908
 *     def _cull_outer_simplices(self, ps, simps, cull_dir='xyz'):
 *         cdef np.float64_t[:, :] points = ps.astype(np.float64)
 *         cdef np.int64_t[:, :] simplices = simps.astype(np.int64)             # <<<<<<<<<<<<<<
 *         cdef int cull_x, cull_y, cull_z
 *         cdef np.int64_t i, ii, id, n_simps, dim
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_simps, __pyx_n_s_astype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1908, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1908, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int64_t(__pyx_t_1);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_simplices = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":1912
 *         cdef np.int64_t i, ii, id, n_simps, dim
 * 
 *         n_simps = simplices.shape[0]             # <<<<<<<<<<<<<<
 *         dim = self._dim
 * 
 */
  __pyx_v_n_simps = (__pyx_v_simplices.shape[0]);

  /* "discretize/tree_ext.pyx":1913
 * 
 *         n_simps = simplices.shape[0]
 *         dim = self._dim             # <<<<<<<<<<<<<<
 * 
 *         cull_x = ('x' in cull_dir)
 */
  __pyx_t_8 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_8;

  /* "discretize/tree_ext.pyx":1915
 *         dim = self._dim
 * 
 *         cull_x = ('x' in cull_dir)             # <<<<<<<<<<<<<<
 *         cull_y = ('y' in cull_dir)
 *         cull_z = (dim == 3 and 'z' in cull_dir)
 */
  __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_x, __pyx_v_cull_dir, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __pyx_v_cull_x = __pyx_t_9;

  /* "discretize/tree_ext.pyx":1916
 * 
 *         cull_x = ('x' in cull_dir)
 *         cull_y = ('y' in cull_dir)             # <<<<<<<<<<<<<<
 *         cull_z = (dim == 3 and 'z' in cull_dir)
 *         cdef np.float64_t[:] center = np.zeros(dim)
 */
  __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_y, __pyx_v_cull_dir, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1916, __pyx_L1_error)
  __pyx_v_cull_y = __pyx_t_9;

  /* "discretize/tree_ext.pyx":1917
 *         cull_x = ('x' in cull_dir)
 *         cull_y = ('y' in cull_dir)
 *         cull_z = (dim == 3 and 'z' in cull_dir)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] center = np.zeros(dim)
 *         cdef c_Cell *cell
 */
  __pyx_t_9 = (__pyx_v_dim == 3);
  if (__pyx_t_9) {
  } else {
    __pyx_t_10 = __pyx_t_9;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_z, __pyx_v_cull_dir, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1917, __pyx_L1_error)
  __pyx_t_10 = __pyx_t_9;
  __pyx_L3_bool_binop_done:;
  __pyx_v_cull_z = __pyx_t_10;

  /* "discretize/tree_ext.pyx":1918
 *         cull_y = ('y' in cull_dir)
 *         cull_z = (dim == 3 and 'z' in cull_dir)
 *         cdef np.float64_t[:] center = np.zeros(dim)             # <<<<<<<<<<<<<<
 *         cdef c_Cell *cell
 *         is_inside = np.ones(n_simps, dtype=np.bool)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1918, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_1);
  if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_center = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;

  /* "discretize/tree_ext.pyx":1920
 *         cdef np.float64_t[:] center = np.zeros(dim)
 *         cdef c_Cell *cell
 *         is_inside = np.ones(n_simps, dtype=np.bool)             # <<<<<<<<<<<<<<
 *         cdef double diff
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ones); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_simps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_bool); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_is_inside = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1923
 *         cdef double diff
 * 
 *         for i in range(n_simps):             # <<<<<<<<<<<<<<
 *             center[:] = 0.0
 *             for ii in range(dim + 1):
 */
  __pyx_t_12 = __pyx_v_n_simps;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "discretize/tree_ext.pyx":1924
 * 
 *         for i in range(n_simps):
 *             center[:] = 0.0             # <<<<<<<<<<<<<<
 *             for ii in range(dim + 1):
 *                 for id in range(dim):
 */
    {
        __pyx_t_5numpy_float64_t __pyx_temp_scalar = 0.0;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_v_center.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_v_center.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_v_center.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_float64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }

    /* "discretize/tree_ext.pyx":1925
 *         for i in range(n_simps):
 *             center[:] = 0.0
 *             for ii in range(dim + 1):             # <<<<<<<<<<<<<<
 *                 for id in range(dim):
 *                     center[id] += points[simplices[i, ii], id]
 */
    __pyx_t_14 = (__pyx_v_dim + 1);
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_ii = __pyx_t_15;

      /* "discretize/tree_ext.pyx":1926
 *             center[:] = 0.0
 *             for ii in range(dim + 1):
 *                 for id in range(dim):             # <<<<<<<<<<<<<<
 *                     center[id] += points[simplices[i, ii], id]
 * 
 */
      __pyx_t_16 = __pyx_v_dim;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
        __pyx_v_id = __pyx_t_17;

        /* "discretize/tree_ext.pyx":1927
 *             for ii in range(dim + 1):
 *                 for id in range(dim):
 *                     center[id] += points[simplices[i, ii], id]             # <<<<<<<<<<<<<<
 * 
 *             for id in range(dim):
 */
        __pyx_t_18 = __pyx_v_i;
        __pyx_t_19 = __pyx_v_ii;
        __pyx_t_10 = -1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_v_simplices.shape[0];
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_10 = 0;
        } else if (unlikely(__pyx_t_18 >= __pyx_v_simplices.shape[0])) __pyx_t_10 = 0;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_v_simplices.shape[1];
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_10 = 1;
        } else if (unlikely(__pyx_t_19 >= __pyx_v_simplices.shape[1])) __pyx_t_10 = 1;
        if (unlikely(__pyx_t_10 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_10);
          __PYX_ERR(0, 1927, __pyx_L1_error)
        }
        __pyx_t_20 = (*((__pyx_t_5numpy_int64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_simplices.data + __pyx_t_18 * __pyx_v_simplices.strides[0]) ) + __pyx_t_19 * __pyx_v_simplices.strides[1]) )));
        __pyx_t_21 = __pyx_v_id;
        __pyx_t_10 = -1;
        if (__pyx_t_20 < 0) {
          __pyx_t_20 += __pyx_v_points.shape[0];
          if (unlikely(__pyx_t_20 < 0)) __pyx_t_10 = 0;
        } else if (unlikely(__pyx_t_20 >= __pyx_v_points.shape[0])) __pyx_t_10 = 0;
        if (__pyx_t_21 < 0) {
          __pyx_t_21 += __pyx_v_points.shape[1];
          if (unlikely(__pyx_t_21 < 0)) __pyx_t_10 = 1;
        } else if (unlikely(__pyx_t_21 >= __pyx_v_points.shape[1])) __pyx_t_10 = 1;
        if (unlikely(__pyx_t_10 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_10);
          __PYX_ERR(0, 1927, __pyx_L1_error)
        }
        __pyx_t_22 = __pyx_v_id;
        __pyx_t_10 = -1;
        if (__pyx_t_22 < 0) {
          __pyx_t_22 += __pyx_v_center.shape[0];
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_10 = 0;
        } else if (unlikely(__pyx_t_22 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
        if (unlikely(__pyx_t_10 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_10);
          __PYX_ERR(0, 1927, __pyx_L1_error)
        }
        *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_22 * __pyx_v_center.strides[0]) )) += (*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_points.data + __pyx_t_20 * __pyx_v_points.strides[0]) ) + __pyx_t_21 * __pyx_v_points.strides[1]) )));
      }
    }

    /* "discretize/tree_ext.pyx":1929
 *                     center[id] += points[simplices[i, ii], id]
 * 
 *             for id in range(dim):             # <<<<<<<<<<<<<<
 *                 center[id] *= 1.0/(dim + 1.0)
 * 
 */
    __pyx_t_14 = __pyx_v_dim;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_id = __pyx_t_15;

      /* "discretize/tree_ext.pyx":1930
 * 
 *             for id in range(dim):
 *                 center[id] *= 1.0/(dim + 1.0)             # <<<<<<<<<<<<<<
 * 
 *             if dim==2:
 */
      __pyx_t_23 = (__pyx_v_dim + 1.0);
      if (unlikely(__pyx_t_23 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1930, __pyx_L1_error)
      }
      __pyx_t_16 = __pyx_v_id;
      __pyx_t_10 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1930, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_16 * __pyx_v_center.strides[0]) )) *= (1.0 / __pyx_t_23);
    }

    /* "discretize/tree_ext.pyx":1932
 *                 center[id] *= 1.0/(dim + 1.0)
 * 
 *             if dim==2:             # <<<<<<<<<<<<<<
 *                 cell = self.tree.containing_cell(center[0], center[1], 0.0)
 *                 iz = 0
 */
    __pyx_t_9 = ((__pyx_v_dim == 2) != 0);
    if (__pyx_t_9) {

      /* "discretize/tree_ext.pyx":1933
 * 
 *             if dim==2:
 *                 cell = self.tree.containing_cell(center[0], center[1], 0.0)             # <<<<<<<<<<<<<<
 *                 iz = 0
 *             else:
 */
      __pyx_t_24 = 0;
      __pyx_t_10 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1933, __pyx_L1_error)
      }
      __pyx_t_25 = 1;
      __pyx_t_10 = -1;
      if (__pyx_t_25 < 0) {
        __pyx_t_25 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_25 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1933, __pyx_L1_error)
      }
      __pyx_v_cell = __pyx_v_self->tree->containing_cell((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_24 * __pyx_v_center.strides[0]) ))), (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_25 * __pyx_v_center.strides[0]) ))), 0.0);

      /* "discretize/tree_ext.pyx":1934
 *             if dim==2:
 *                 cell = self.tree.containing_cell(center[0], center[1], 0.0)
 *                 iz = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 cell = self.tree.containing_cell(center[0], center[1], center[2])
 */
      __pyx_v_iz = 0;

      /* "discretize/tree_ext.pyx":1932
 *                 center[id] *= 1.0/(dim + 1.0)
 * 
 *             if dim==2:             # <<<<<<<<<<<<<<
 *                 cell = self.tree.containing_cell(center[0], center[1], 0.0)
 *                 iz = 0
 */
      goto __pyx_L13;
    }

    /* "discretize/tree_ext.pyx":1936
 *                 iz = 0
 *             else:
 *                 cell = self.tree.containing_cell(center[0], center[1], center[2])             # <<<<<<<<<<<<<<
 * 
 *             if cull_x:
 */
    /*else*/ {
      __pyx_t_26 = 0;
      __pyx_t_10 = -1;
      if (__pyx_t_26 < 0) {
        __pyx_t_26 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_26 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_26 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1936, __pyx_L1_error)
      }
      __pyx_t_27 = 1;
      __pyx_t_10 = -1;
      if (__pyx_t_27 < 0) {
        __pyx_t_27 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_27 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1936, __pyx_L1_error)
      }
      __pyx_t_28 = 2;
      __pyx_t_10 = -1;
      if (__pyx_t_28 < 0) {
        __pyx_t_28 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_28 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_28 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1936, __pyx_L1_error)
      }
      __pyx_v_cell = __pyx_v_self->tree->containing_cell((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_26 * __pyx_v_center.strides[0]) ))), (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_27 * __pyx_v_center.strides[0]) ))), (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_28 * __pyx_v_center.strides[0]) ))));
    }
    __pyx_L13:;

    /* "discretize/tree_ext.pyx":1938
 *                 cell = self.tree.containing_cell(center[0], center[1], center[2])
 * 
 *             if cull_x:             # <<<<<<<<<<<<<<
 *                 diff = center[0] - cell.location[0]
 *                 if ((diff < 0 and cell.neighbors[0] == NULL) or
 */
    __pyx_t_9 = (__pyx_v_cull_x != 0);
    if (__pyx_t_9) {

      /* "discretize/tree_ext.pyx":1939
 * 
 *             if cull_x:
 *                 diff = center[0] - cell.location[0]             # <<<<<<<<<<<<<<
 *                 if ((diff < 0 and cell.neighbors[0] == NULL) or
 *                     (diff > 0 and cell.neighbors[1] == NULL)):
 */
      __pyx_t_29 = 0;
      __pyx_t_10 = -1;
      if (__pyx_t_29 < 0) {
        __pyx_t_29 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_29 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_29 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1939, __pyx_L1_error)
      }
      __pyx_v_diff = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_29 * __pyx_v_center.strides[0]) ))) - (__pyx_v_cell->location[0]));

      /* "discretize/tree_ext.pyx":1940
 *             if cull_x:
 *                 diff = center[0] - cell.location[0]
 *                 if ((diff < 0 and cell.neighbors[0] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[1] == NULL)):
 *                     is_inside[i] = False
 */
      __pyx_t_30 = ((__pyx_v_diff < 0.0) != 0);
      if (!__pyx_t_30) {
        goto __pyx_L17_next_or;
      } else {
      }
      __pyx_t_30 = (((__pyx_v_cell->neighbors[0]) == NULL) != 0);
      if (!__pyx_t_30) {
      } else {
        __pyx_t_9 = __pyx_t_30;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_L17_next_or:;

      /* "discretize/tree_ext.pyx":1941
 *                 diff = center[0] - cell.location[0]
 *                 if ((diff < 0 and cell.neighbors[0] == NULL) or
 *                     (diff > 0 and cell.neighbors[1] == NULL)):             # <<<<<<<<<<<<<<
 *                     is_inside[i] = False
 *             if cull_y:
 */
      __pyx_t_30 = ((__pyx_v_diff > 0.0) != 0);
      if (__pyx_t_30) {
      } else {
        __pyx_t_9 = __pyx_t_30;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_30 = (((__pyx_v_cell->neighbors[1]) == NULL) != 0);
      __pyx_t_9 = __pyx_t_30;
      __pyx_L16_bool_binop_done:;

      /* "discretize/tree_ext.pyx":1940
 *             if cull_x:
 *                 diff = center[0] - cell.location[0]
 *                 if ((diff < 0 and cell.neighbors[0] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[1] == NULL)):
 *                     is_inside[i] = False
 */
      if (__pyx_t_9) {

        /* "discretize/tree_ext.pyx":1942
 *                 if ((diff < 0 and cell.neighbors[0] == NULL) or
 *                     (diff > 0 and cell.neighbors[1] == NULL)):
 *                     is_inside[i] = False             # <<<<<<<<<<<<<<
 *             if cull_y:
 *                 diff = center[1] - cell.location[1]
 */
        if (unlikely(__Pyx_SetItemInt(__pyx_v_is_inside, __pyx_v_i, Py_False, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1) < 0)) __PYX_ERR(0, 1942, __pyx_L1_error)

        /* "discretize/tree_ext.pyx":1940
 *             if cull_x:
 *                 diff = center[0] - cell.location[0]
 *                 if ((diff < 0 and cell.neighbors[0] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[1] == NULL)):
 *                     is_inside[i] = False
 */
      }

      /* "discretize/tree_ext.pyx":1938
 *                 cell = self.tree.containing_cell(center[0], center[1], center[2])
 * 
 *             if cull_x:             # <<<<<<<<<<<<<<
 *                 diff = center[0] - cell.location[0]
 *                 if ((diff < 0 and cell.neighbors[0] == NULL) or
 */
    }

    /* "discretize/tree_ext.pyx":1943
 *                     (diff > 0 and cell.neighbors[1] == NULL)):
 *                     is_inside[i] = False
 *             if cull_y:             # <<<<<<<<<<<<<<
 *                 diff = center[1] - cell.location[1]
 *                 if ((diff < 0 and cell.neighbors[2] == NULL) or
 */
    __pyx_t_9 = (__pyx_v_cull_y != 0);
    if (__pyx_t_9) {

      /* "discretize/tree_ext.pyx":1944
 *                     is_inside[i] = False
 *             if cull_y:
 *                 diff = center[1] - cell.location[1]             # <<<<<<<<<<<<<<
 *                 if ((diff < 0 and cell.neighbors[2] == NULL) or
 *                     (diff > 0 and cell.neighbors[3] == NULL)):
 */
      __pyx_t_31 = 1;
      __pyx_t_10 = -1;
      if (__pyx_t_31 < 0) {
        __pyx_t_31 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_31 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_31 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1944, __pyx_L1_error)
      }
      __pyx_v_diff = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_31 * __pyx_v_center.strides[0]) ))) - (__pyx_v_cell->location[1]));

      /* "discretize/tree_ext.pyx":1945
 *             if cull_y:
 *                 diff = center[1] - cell.location[1]
 *                 if ((diff < 0 and cell.neighbors[2] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[3] == NULL)):
 *                     is_inside[i] = False
 */
      __pyx_t_30 = ((__pyx_v_diff < 0.0) != 0);
      if (!__pyx_t_30) {
        goto __pyx_L23_next_or;
      } else {
      }
      __pyx_t_30 = (((__pyx_v_cell->neighbors[2]) == NULL) != 0);
      if (!__pyx_t_30) {
      } else {
        __pyx_t_9 = __pyx_t_30;
        goto __pyx_L22_bool_binop_done;
      }
      __pyx_L23_next_or:;

      /* "discretize/tree_ext.pyx":1946
 *                 diff = center[1] - cell.location[1]
 *                 if ((diff < 0 and cell.neighbors[2] == NULL) or
 *                     (diff > 0 and cell.neighbors[3] == NULL)):             # <<<<<<<<<<<<<<
 *                     is_inside[i] = False
 *             if cull_z:
 */
      __pyx_t_30 = ((__pyx_v_diff > 0.0) != 0);
      if (__pyx_t_30) {
      } else {
        __pyx_t_9 = __pyx_t_30;
        goto __pyx_L22_bool_binop_done;
      }
      __pyx_t_30 = (((__pyx_v_cell->neighbors[3]) == NULL) != 0);
      __pyx_t_9 = __pyx_t_30;
      __pyx_L22_bool_binop_done:;

      /* "discretize/tree_ext.pyx":1945
 *             if cull_y:
 *                 diff = center[1] - cell.location[1]
 *                 if ((diff < 0 and cell.neighbors[2] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[3] == NULL)):
 *                     is_inside[i] = False
 */
      if (__pyx_t_9) {

        /* "discretize/tree_ext.pyx":1947
 *                 if ((diff < 0 and cell.neighbors[2] == NULL) or
 *                     (diff > 0 and cell.neighbors[3] == NULL)):
 *                     is_inside[i] = False             # <<<<<<<<<<<<<<
 *             if cull_z:
 *                 diff = center[2] - cell.location[2]
 */
        if (unlikely(__Pyx_SetItemInt(__pyx_v_is_inside, __pyx_v_i, Py_False, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1) < 0)) __PYX_ERR(0, 1947, __pyx_L1_error)

        /* "discretize/tree_ext.pyx":1945
 *             if cull_y:
 *                 diff = center[1] - cell.location[1]
 *                 if ((diff < 0 and cell.neighbors[2] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[3] == NULL)):
 *                     is_inside[i] = False
 */
      }

      /* "discretize/tree_ext.pyx":1943
 *                     (diff > 0 and cell.neighbors[1] == NULL)):
 *                     is_inside[i] = False
 *             if cull_y:             # <<<<<<<<<<<<<<
 *                 diff = center[1] - cell.location[1]
 *                 if ((diff < 0 and cell.neighbors[2] == NULL) or
 */
    }

    /* "discretize/tree_ext.pyx":1948
 *                     (diff > 0 and cell.neighbors[3] == NULL)):
 *                     is_inside[i] = False
 *             if cull_z:             # <<<<<<<<<<<<<<
 *                 diff = center[2] - cell.location[2]
 *                 if ((diff < 0 and cell.neighbors[4] == NULL) or
 */
    __pyx_t_9 = (__pyx_v_cull_z != 0);
    if (__pyx_t_9) {

      /* "discretize/tree_ext.pyx":1949
 *                     is_inside[i] = False
 *             if cull_z:
 *                 diff = center[2] - cell.location[2]             # <<<<<<<<<<<<<<
 *                 if ((diff < 0 and cell.neighbors[4] == NULL) or
 *                     (diff > 0 and cell.neighbors[5] == NULL)):
 */
      __pyx_t_32 = 2;
      __pyx_t_10 = -1;
      if (__pyx_t_32 < 0) {
        __pyx_t_32 += __pyx_v_center.shape[0];
        if (unlikely(__pyx_t_32 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_32 >= __pyx_v_center.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 1949, __pyx_L1_error)
      }
      __pyx_v_diff = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_32 * __pyx_v_center.strides[0]) ))) - (__pyx_v_cell->location[2]));

      /* "discretize/tree_ext.pyx":1950
 *             if cull_z:
 *                 diff = center[2] - cell.location[2]
 *                 if ((diff < 0 and cell.neighbors[4] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[5] == NULL)):
 *                     is_inside[i] = False
 */
      __pyx_t_30 = ((__pyx_v_diff < 0.0) != 0);
      if (!__pyx_t_30) {
        goto __pyx_L29_next_or;
      } else {
      }
      __pyx_t_30 = (((__pyx_v_cell->neighbors[4]) == NULL) != 0);
      if (!__pyx_t_30) {
      } else {
        __pyx_t_9 = __pyx_t_30;
        goto __pyx_L28_bool_binop_done;
      }
      __pyx_L29_next_or:;

      /* "discretize/tree_ext.pyx":1951
 *                 diff = center[2] - cell.location[2]
 *                 if ((diff < 0 and cell.neighbors[4] == NULL) or
 *                     (diff > 0 and cell.neighbors[5] == NULL)):             # <<<<<<<<<<<<<<
 *                     is_inside[i] = False
 *         return is_inside
 */
      __pyx_t_30 = ((__pyx_v_diff > 0.0) != 0);
      if (__pyx_t_30) {
      } else {
        __pyx_t_9 = __pyx_t_30;
        goto __pyx_L28_bool_binop_done;
      }
      __pyx_t_30 = (((__pyx_v_cell->neighbors[5]) == NULL) != 0);
      __pyx_t_9 = __pyx_t_30;
      __pyx_L28_bool_binop_done:;

      /* "discretize/tree_ext.pyx":1950
 *             if cull_z:
 *                 diff = center[2] - cell.location[2]
 *                 if ((diff < 0 and cell.neighbors[4] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[5] == NULL)):
 *                     is_inside[i] = False
 */
      if (__pyx_t_9) {

        /* "discretize/tree_ext.pyx":1952
 *                 if ((diff < 0 and cell.neighbors[4] == NULL) or
 *                     (diff > 0 and cell.neighbors[5] == NULL)):
 *                     is_inside[i] = False             # <<<<<<<<<<<<<<
 *         return is_inside
 * 
 */
        if (unlikely(__Pyx_SetItemInt(__pyx_v_is_inside, __pyx_v_i, Py_False, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1) < 0)) __PYX_ERR(0, 1952, __pyx_L1_error)

        /* "discretize/tree_ext.pyx":1950
 *             if cull_z:
 *                 diff = center[2] - cell.location[2]
 *                 if ((diff < 0 and cell.neighbors[4] == NULL) or             # <<<<<<<<<<<<<<
 *                     (diff > 0 and cell.neighbors[5] == NULL)):
 *                     is_inside[i] = False
 */
      }

      /* "discretize/tree_ext.pyx":1948
 *                     (diff > 0 and cell.neighbors[3] == NULL)):
 *                     is_inside[i] = False
 *             if cull_z:             # <<<<<<<<<<<<<<
 *                 diff = center[2] - cell.location[2]
 *                 if ((diff < 0 and cell.neighbors[4] == NULL) or
 */
    }
  }

  /* "discretize/tree_ext.pyx":1953
 *                     (diff > 0 and cell.neighbors[5] == NULL)):
 *                     is_inside[i] = False
 *         return is_inside             # <<<<<<<<<<<<<<
 * 
 *     def _get_grid_triang(self, grid='CC', double eps=1E-8):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_is_inside);
  __pyx_r = __pyx_v_is_inside;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1906
 *         return Pxxx
 * 
 *     def _cull_outer_simplices(self, ps, simps, cull_dir='xyz'):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] points = ps.astype(np.float64)
 *         cdef np.int64_t[:, :] simplices = simps.astype(np.int64)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_11, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._cull_outer_simplices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_points, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_simplices, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_center, 1);
  __Pyx_XDECREF(__pyx_v_is_inside);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":1955
 *         return is_inside
 * 
 *     def _get_grid_triang(self, grid='CC', double eps=1E-8):             # <<<<<<<<<<<<<<
 *         if grid=='CC':
 *             points = self.gridCC
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_63_get_grid_triang(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_63_get_grid_triang(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_grid = 0;
  CYTHON_UNUSED double __pyx_v_eps;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_grid_triang (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_grid,&__pyx_n_s_eps,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_n_s_CC);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_grid);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eps);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_get_grid_triang") < 0)) __PYX_ERR(0, 1955, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_grid = values[0];
    if (values[1]) {
      __pyx_v_eps = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_eps == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1955, __pyx_L3_error)
    } else {
      __pyx_v_eps = ((double)1E-8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_grid_triang", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1955, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._get_grid_triang", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_62_get_grid_triang(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_grid, __pyx_v_eps);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_62_get_grid_triang(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_grid, CYTHON_UNUSED double __pyx_v_eps) {
  PyObject *__pyx_v_points = NULL;
  PyObject *__pyx_v_cull = NULL;
  PyObject *__pyx_v_triang = NULL;
  PyObject *__pyx_v_is_inside = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_neighbors = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_get_grid_triang", 0);

  /* "discretize/tree_ext.pyx":1956
 * 
 *     def _get_grid_triang(self, grid='CC', double eps=1E-8):
 *         if grid=='CC':             # <<<<<<<<<<<<<<
 *             points = self.gridCC
 *             cull = 'xyz'
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_grid, __pyx_n_s_CC, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1956, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":1957
 *     def _get_grid_triang(self, grid='CC', double eps=1E-8):
 *         if grid=='CC':
 *             points = self.gridCC             # <<<<<<<<<<<<<<
 *             cull = 'xyz'
 *         elif grid=='Fx':
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridCC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1958
 *         if grid=='CC':
 *             points = self.gridCC
 *             cull = 'xyz'             # <<<<<<<<<<<<<<
 *         elif grid=='Fx':
 *             points = self.gridFx
 */
    __Pyx_INCREF(__pyx_n_s_xyz);
    __pyx_v_cull = __pyx_n_s_xyz;

    /* "discretize/tree_ext.pyx":1956
 * 
 *     def _get_grid_triang(self, grid='CC', double eps=1E-8):
 *         if grid=='CC':             # <<<<<<<<<<<<<<
 *             points = self.gridCC
 *             cull = 'xyz'
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":1959
 *             points = self.gridCC
 *             cull = 'xyz'
 *         elif grid=='Fx':             # <<<<<<<<<<<<<<
 *             points = self.gridFx
 *             cull = 'yz'
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_grid, __pyx_n_s_Fx, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1959, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":1960
 *             cull = 'xyz'
 *         elif grid=='Fx':
 *             points = self.gridFx             # <<<<<<<<<<<<<<
 *             cull = 'yz'
 *         elif grid=='Fy':
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1961
 *         elif grid=='Fx':
 *             points = self.gridFx
 *             cull = 'yz'             # <<<<<<<<<<<<<<
 *         elif grid=='Fy':
 *             points = self.gridFy
 */
    __Pyx_INCREF(__pyx_n_s_yz);
    __pyx_v_cull = __pyx_n_s_yz;

    /* "discretize/tree_ext.pyx":1959
 *             points = self.gridCC
 *             cull = 'xyz'
 *         elif grid=='Fx':             # <<<<<<<<<<<<<<
 *             points = self.gridFx
 *             cull = 'yz'
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":1962
 *             points = self.gridFx
 *             cull = 'yz'
 *         elif grid=='Fy':             # <<<<<<<<<<<<<<
 *             points = self.gridFy
 *             cull = 'xz'
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_grid, __pyx_n_s_Fy, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1962, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":1963
 *             cull = 'yz'
 *         elif grid=='Fy':
 *             points = self.gridFy             # <<<<<<<<<<<<<<
 *             cull = 'xz'
 *         elif grid=='Fz':
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1964
 *         elif grid=='Fy':
 *             points = self.gridFy
 *             cull = 'xz'             # <<<<<<<<<<<<<<
 *         elif grid=='Fz':
 *             points = self.gridFz
 */
    __Pyx_INCREF(__pyx_n_s_xz);
    __pyx_v_cull = __pyx_n_s_xz;

    /* "discretize/tree_ext.pyx":1962
 *             points = self.gridFx
 *             cull = 'yz'
 *         elif grid=='Fy':             # <<<<<<<<<<<<<<
 *             points = self.gridFy
 *             cull = 'xz'
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":1965
 *             points = self.gridFy
 *             cull = 'xz'
 *         elif grid=='Fz':             # <<<<<<<<<<<<<<
 *             points = self.gridFz
 *             cull = 'xy'
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_grid, __pyx_n_s_Fz, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1965, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":1966
 *             cull = 'xz'
 *         elif grid=='Fz':
 *             points = self.gridFz             # <<<<<<<<<<<<<<
 *             cull = 'xy'
 *         elif grid=='Ex':
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridFz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1967
 *         elif grid=='Fz':
 *             points = self.gridFz
 *             cull = 'xy'             # <<<<<<<<<<<<<<
 *         elif grid=='Ex':
 *             points = self.gridEx
 */
    __Pyx_INCREF(__pyx_n_s_xy);
    __pyx_v_cull = __pyx_n_s_xy;

    /* "discretize/tree_ext.pyx":1965
 *             points = self.gridFy
 *             cull = 'xz'
 *         elif grid=='Fz':             # <<<<<<<<<<<<<<
 *             points = self.gridFz
 *             cull = 'xy'
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":1968
 *             points = self.gridFz
 *             cull = 'xy'
 *         elif grid=='Ex':             # <<<<<<<<<<<<<<
 *             points = self.gridEx
 *             cull = 'x'
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_grid, __pyx_n_s_Ex, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1968, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":1969
 *             cull = 'xy'
 *         elif grid=='Ex':
 *             points = self.gridEx             # <<<<<<<<<<<<<<
 *             cull = 'x'
 *         elif grid=='Ey':
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1970
 *         elif grid=='Ex':
 *             points = self.gridEx
 *             cull = 'x'             # <<<<<<<<<<<<<<
 *         elif grid=='Ey':
 *             points = self.gridEy
 */
    __Pyx_INCREF(__pyx_n_s_x);
    __pyx_v_cull = __pyx_n_s_x;

    /* "discretize/tree_ext.pyx":1968
 *             points = self.gridFz
 *             cull = 'xy'
 *         elif grid=='Ex':             # <<<<<<<<<<<<<<
 *             points = self.gridEx
 *             cull = 'x'
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":1971
 *             points = self.gridEx
 *             cull = 'x'
 *         elif grid=='Ey':             # <<<<<<<<<<<<<<
 *             points = self.gridEy
 *             cull = 'y'
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_grid, __pyx_n_s_Ey, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1971, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":1972
 *             cull = 'x'
 *         elif grid=='Ey':
 *             points = self.gridEy             # <<<<<<<<<<<<<<
 *             cull = 'y'
 *         elif grid=='Ez':
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1973
 *         elif grid=='Ey':
 *             points = self.gridEy
 *             cull = 'y'             # <<<<<<<<<<<<<<
 *         elif grid=='Ez':
 *             points = self.gridEz
 */
    __Pyx_INCREF(__pyx_n_s_y);
    __pyx_v_cull = __pyx_n_s_y;

    /* "discretize/tree_ext.pyx":1971
 *             points = self.gridEx
 *             cull = 'x'
 *         elif grid=='Ey':             # <<<<<<<<<<<<<<
 *             points = self.gridEy
 *             cull = 'y'
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":1974
 *             points = self.gridEy
 *             cull = 'y'
 *         elif grid=='Ez':             # <<<<<<<<<<<<<<
 *             points = self.gridEz
 *             cull = 'z'
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_grid, __pyx_n_s_Ez, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1974, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":1975
 *             cull = 'y'
 *         elif grid=='Ez':
 *             points = self.gridEz             # <<<<<<<<<<<<<<
 *             cull = 'z'
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridEz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":1976
 *         elif grid=='Ez':
 *             points = self.gridEz
 *             cull = 'z'             # <<<<<<<<<<<<<<
 * 
 *         triang = Delaunay(points)
 */
    __Pyx_INCREF(__pyx_n_s_z);
    __pyx_v_cull = __pyx_n_s_z;

    /* "discretize/tree_ext.pyx":1974
 *             points = self.gridEy
 *             cull = 'y'
 *         elif grid=='Ez':             # <<<<<<<<<<<<<<
 *             points = self.gridEz
 *             cull = 'z'
 */
  }
  __pyx_L3:;

  /* "discretize/tree_ext.pyx":1978
 *             cull = 'z'
 * 
 *         triang = Delaunay(points)             # <<<<<<<<<<<<<<
 * 
 *         is_inside = self._cull_outer_simplices(points, triang.simplices, cull)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Delaunay); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(!__pyx_v_points)) { __Pyx_RaiseUnboundLocalError("points"); __PYX_ERR(0, 1978, __pyx_L1_error) }
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_points); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_points};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1978, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_points};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1978, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1978, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_points);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1978, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_triang = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":1980
 *         triang = Delaunay(points)
 * 
 *         is_inside = self._cull_outer_simplices(points, triang.simplices, cull)             # <<<<<<<<<<<<<<
 * 
 *         p = np.full(triang.nsimplex + 1, -1, dtype=triang.neighbors.dtype)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cull_outer_simplices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(!__pyx_v_points)) { __Pyx_RaiseUnboundLocalError("points"); __PYX_ERR(0, 1980, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_simplices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(!__pyx_v_cull)) { __Pyx_RaiseUnboundLocalError("cull"); __PYX_ERR(0, 1980, __pyx_L1_error) }
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_points, __pyx_t_5, __pyx_v_cull};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1980, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_points, __pyx_t_5, __pyx_v_cull};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1980, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_points);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_cull);
    __Pyx_GIVEREF(__pyx_v_cull);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_cull);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_is_inside = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":1982
 *         is_inside = self._cull_outer_simplices(points, triang.simplices, cull)
 * 
 *         p = np.full(triang.nsimplex + 1, -1, dtype=triang.neighbors.dtype)             # <<<<<<<<<<<<<<
 * 
 *         triang.simplices = triang.simplices[is_inside].copy()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_full); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_nsimplex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_neg_1);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_neighbors); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_p = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1984
 *         p = np.full(triang.nsimplex + 1, -1, dtype=triang.neighbors.dtype)
 * 
 *         triang.simplices = triang.simplices[is_inside].copy()             # <<<<<<<<<<<<<<
 *         triang.equations = triang.equations[is_inside].copy()
 *         triang.nsimplex = triang.simplices.shape[0]
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_simplices); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_7, __pyx_v_is_inside); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1984, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1984, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_triang, __pyx_n_s_simplices, __pyx_t_4) < 0) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1985
 * 
 *         triang.simplices = triang.simplices[is_inside].copy()
 *         triang.equations = triang.equations[is_inside].copy()             # <<<<<<<<<<<<<<
 *         triang.nsimplex = triang.simplices.shape[0]
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_equations); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_7, __pyx_v_is_inside); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1985, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1985, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_triang, __pyx_n_s_equations, __pyx_t_4) < 0) __PYX_ERR(0, 1985, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1986
 *         triang.simplices = triang.simplices[is_inside].copy()
 *         triang.equations = triang.equations[is_inside].copy()
 *         triang.nsimplex = triang.simplices.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         p[:-1][is_inside] = np.arange(triang.nsimplex, dtype=p.dtype)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_simplices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_triang, __pyx_n_s_nsimplex, __pyx_t_4) < 0) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":1988
 *         triang.nsimplex = triang.simplices.shape[0]
 * 
 *         p[:-1][is_inside] = np.arange(triang.nsimplex, dtype=p.dtype)             # <<<<<<<<<<<<<<
 * 
 *         #neighbors need to be renumbered
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_arange); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_nsimplex); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_p, 0, -1L, NULL, NULL, &__pyx_slice__46, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_v_is_inside, __pyx_t_3) < 0)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":1991
 * 
 *         #neighbors need to be renumbered
 *         neighbors = triang.neighbors[is_inside].copy()             # <<<<<<<<<<<<<<
 *         neighbors = p[neighbors]
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_neighbors); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_4, __pyx_v_is_inside); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1991, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_neighbors = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":1992
 *         #neighbors need to be renumbered
 *         neighbors = triang.neighbors[is_inside].copy()
 *         neighbors = p[neighbors]             # <<<<<<<<<<<<<<
 * 
 *         triang.neighbors = neighbors
 */
  __pyx_t_3 = PyObject_GetItem(__pyx_v_p, __pyx_v_neighbors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_neighbors, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":1994
 *         neighbors = p[neighbors]
 * 
 *         triang.neighbors = neighbors             # <<<<<<<<<<<<<<
 *         triang._transform = None
 *         triang._vertex_to_simplex = None
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_triang, __pyx_n_s_neighbors, __pyx_v_neighbors) < 0) __PYX_ERR(0, 1994, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":1995
 * 
 *         triang.neighbors = neighbors
 *         triang._transform = None             # <<<<<<<<<<<<<<
 *         triang._vertex_to_simplex = None
 *         triang._vertex_neighbor_vertices = None
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_triang, __pyx_n_s_transform, Py_None) < 0) __PYX_ERR(0, 1995, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":1996
 *         triang.neighbors = neighbors
 *         triang._transform = None
 *         triang._vertex_to_simplex = None             # <<<<<<<<<<<<<<
 *         triang._vertex_neighbor_vertices = None
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_triang, __pyx_n_s_vertex_to_simplex, Py_None) < 0) __PYX_ERR(0, 1996, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":1997
 *         triang._transform = None
 *         triang._vertex_to_simplex = None
 *         triang._vertex_neighbor_vertices = None             # <<<<<<<<<<<<<<
 * 
 *         # Backwards compatibility (Scipy < 0.12.0)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_triang, __pyx_n_s_vertex_neighbor_vertices, Py_None) < 0) __PYX_ERR(0, 1997, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":2000
 * 
 *         # Backwards compatibility (Scipy < 0.12.0)
 *         triang.vertices = triang.simplices             # <<<<<<<<<<<<<<
 * 
 *         return triang
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_triang, __pyx_n_s_simplices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_triang, __pyx_n_s_vertices, __pyx_t_3) < 0) __PYX_ERR(0, 2000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2002
 *         triang.vertices = triang.simplices
 * 
 *         return triang             # <<<<<<<<<<<<<<
 * 
 *     def getInterpolationMat(self, locs, locType, zerosOutside=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_triang);
  __pyx_r = __pyx_v_triang;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":1955
 *         return is_inside
 * 
 *     def _get_grid_triang(self, grid='CC', double eps=1E-8):             # <<<<<<<<<<<<<<
 *         if grid=='CC':
 *             points = self.gridCC
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._get_grid_triang", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_cull);
  __Pyx_XDECREF(__pyx_v_triang);
  __Pyx_XDECREF(__pyx_v_is_inside);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_neighbors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2004
 *         return triang
 * 
 *     def getInterpolationMat(self, locs, locType, zerosOutside=False):             # <<<<<<<<<<<<<<
 *         locs = utils.asArray_N_x_Dim(locs, self.dim)
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_65getInterpolationMat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_65getInterpolationMat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_locs = 0;
  PyObject *__pyx_v_locType = 0;
  PyObject *__pyx_v_zerosOutside = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getInterpolationMat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_locs,&__pyx_n_s_locType,&__pyx_n_s_zerosOutside,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_locs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_locType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getInterpolationMat", 0, 2, 3, 1); __PYX_ERR(0, 2004, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zerosOutside);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getInterpolationMat") < 0)) __PYX_ERR(0, 2004, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_locs = values[0];
    __pyx_v_locType = values[1];
    __pyx_v_zerosOutside = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getInterpolationMat", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2004, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.getInterpolationMat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_64getInterpolationMat(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_locs, __pyx_v_locType, __pyx_v_zerosOutside);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_64getInterpolationMat(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_locs, PyObject *__pyx_v_locType, PyObject *__pyx_v_zerosOutside) {
  PyObject *__pyx_v_tri = NULL;
  CYTHON_UNUSED __Pyx_memviewslice __pyx_v_simplices = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_v_i_out;
  __pyx_t_5numpy_int64_t __pyx_v_i_p;
  __pyx_t_5numpy_int64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_dim;
  __pyx_t_5numpy_int64_t __pyx_v_n_points;
  __pyx_t_5numpy_int64_t __pyx_v_npi;
  __pyx_t_5numpy_int64_t __pyx_v_n_grid;
  __pyx_t_5numpy_int64_t __pyx_v_n_outside;
  __Pyx_memviewslice __pyx_v_points = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_grid_points = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_point = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_proj_point = { 0, 0, { 0 }, { 0 }, { 0 } };
  double *__pyx_v_p0;
  double *__pyx_v_p1;
  double *__pyx_v_p2;
  double __pyx_v_d;
  double __pyx_v_dsq;
  double __pyx_v_inf;
  int __pyx_v_contains_point;
  PyObject *__pyx_v_npsimps = NULL;
  CYTHON_UNUSED __Pyx_memviewslice __pyx_v_simps = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_simplex = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_hull = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_hull_points = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_npis = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_np_outside_points = NULL;
  __Pyx_memviewslice __pyx_v_outside_points = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_barys = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_trans = NULL;
  PyObject *__pyx_v_shift = NULL;
  PyObject *__pyx_v_bs = NULL;
  PyObject *__pyx_v_I = NULL;
  PyObject *__pyx_v_J = NULL;
  PyObject *__pyx_v_V = NULL;
  __Pyx_memviewslice __pyx_v_Js = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_Vs = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_np_hull_points = NULL;
  Py_ssize_t __pyx_v_n_hull_simps;
  PyObject *__pyx_v_kdtree = NULL;
  Py_ssize_t __pyx_v_i_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_t_11;
  __Pyx_memviewslice __pyx_t_12 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_13;
  __Pyx_memviewslice __pyx_t_14 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_15 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  __pyx_t_5numpy_int64_t __pyx_t_22;
  __pyx_t_5numpy_int64_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  __pyx_t_5numpy_int64_t __pyx_t_26;
  __pyx_t_5numpy_int64_t __pyx_t_27;
  __pyx_t_5numpy_int64_t __pyx_t_28;
  int __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  __pyx_t_5numpy_int64_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  Py_ssize_t __pyx_t_40;
  __pyx_t_5numpy_int64_t __pyx_t_41;
  __pyx_t_5numpy_int64_t __pyx_t_42;
  __pyx_t_5numpy_int64_t __pyx_t_43;
  __pyx_t_5numpy_int64_t __pyx_t_44;
  __pyx_t_5numpy_int64_t __pyx_t_45;
  __pyx_t_5numpy_int64_t __pyx_t_46;
  Py_ssize_t __pyx_t_47;
  Py_ssize_t __pyx_t_48;
  Py_ssize_t __pyx_t_49;
  Py_ssize_t __pyx_t_50;
  __Pyx_RefNannySetupContext("getInterpolationMat", 0);
  __Pyx_INCREF(__pyx_v_locs);

  /* "discretize/tree_ext.pyx":2005
 * 
 *     def getInterpolationMat(self, locs, locType, zerosOutside=False):
 *         locs = utils.asArray_N_x_Dim(locs, self.dim)             # <<<<<<<<<<<<<<
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:
 *             raise Exception('locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz')
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_utils); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asArray_N_x_Dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_locs, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2005, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_locs, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2005, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_locs);
    __Pyx_GIVEREF(__pyx_v_locs);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_locs);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_locs, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":2006
 *     def getInterpolationMat(self, locs, locType, zerosOutside=False):
 *         locs = utils.asArray_N_x_Dim(locs, self.dim)
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:             # <<<<<<<<<<<<<<
 *             raise Exception('locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz')
 *         if locType == 'N':
 */
  __Pyx_INCREF(__pyx_v_locType);
  __pyx_t_1 = __pyx_v_locType;
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_N, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_CC, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Ex, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Ey, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Ez, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Fx, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Fy, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Fz, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
  __pyx_t_7 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":2007
 *         locs = utils.asArray_N_x_Dim(locs, self.dim)
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:
 *             raise Exception('locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz')             # <<<<<<<<<<<<<<
 *         if locType == 'N':
 *             return self._getNodeIntMat(locs, zerosOutside)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2007, __pyx_L1_error)

    /* "discretize/tree_ext.pyx":2006
 *     def getInterpolationMat(self, locs, locType, zerosOutside=False):
 *         locs = utils.asArray_N_x_Dim(locs, self.dim)
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:             # <<<<<<<<<<<<<<
 *             raise Exception('locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz')
 *         if locType == 'N':
 */
  }

  /* "discretize/tree_ext.pyx":2008
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:
 *             raise Exception('locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz')
 *         if locType == 'N':             # <<<<<<<<<<<<<<
 *             return self._getNodeIntMat(locs, zerosOutside)
 *         tri = self._get_grid_triang(grid=locType)
 */
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_locType, __pyx_n_s_N, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2008, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":2009
 *             raise Exception('locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz')
 *         if locType == 'N':
 *             return self._getNodeIntMat(locs, zerosOutside)             # <<<<<<<<<<<<<<
 *         tri = self._get_grid_triang(grid=locType)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNodeIntMat); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_locs, __pyx_v_zerosOutside};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2009, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_locs, __pyx_v_zerosOutside};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2009, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2009, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_locs);
      __Pyx_GIVEREF(__pyx_v_locs);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_5, __pyx_v_locs);
      __Pyx_INCREF(__pyx_v_zerosOutside);
      __Pyx_GIVEREF(__pyx_v_zerosOutside);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_5, __pyx_v_zerosOutside);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2009, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":2008
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:
 *             raise Exception('locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz')
 *         if locType == 'N':             # <<<<<<<<<<<<<<
 *             return self._getNodeIntMat(locs, zerosOutside)
 *         tri = self._get_grid_triang(grid=locType)
 */
  }

  /* "discretize/tree_ext.pyx":2010
 *         if locType == 'N':
 *             return self._getNodeIntMat(locs, zerosOutside)
 *         tri = self._get_grid_triang(grid=locType)             # <<<<<<<<<<<<<<
 * 
 *         if self._dim == 2 and locType in ['Ez','Fz']:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_grid_triang); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_grid, __pyx_v_locType) < 0) __PYX_ERR(0, 2010, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_tri = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2012
 *         tri = self._get_grid_triang(grid=locType)
 * 
 *         if self._dim == 2 and locType in ['Ez','Fz']:             # <<<<<<<<<<<<<<
 *             raise Exception('Unable to interpolate from Z edges/face in 2D')
 * 
 */
  __pyx_t_7 = ((__pyx_v_self->_dim == 2) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_8 = __pyx_t_7;
    goto __pyx_L14_bool_binop_done;
  }
  __Pyx_INCREF(__pyx_v_locType);
  __pyx_t_2 = __pyx_v_locType;
  __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_Ez, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2012, __pyx_L1_error)
  if (!__pyx_t_9) {
  } else {
    __pyx_t_7 = __pyx_t_9;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_Fz, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2012, __pyx_L1_error)
  __pyx_t_7 = __pyx_t_9;
  __pyx_L16_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = (__pyx_t_7 != 0);
  __pyx_t_8 = __pyx_t_9;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":2013
 * 
 *         if self._dim == 2 and locType in ['Ez','Fz']:
 *             raise Exception('Unable to interpolate from Z edges/face in 2D')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.int64_t[:, :] simplices = tri.simplices.astype(np.int64)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2013, __pyx_L1_error)

    /* "discretize/tree_ext.pyx":2012
 *         tri = self._get_grid_triang(grid=locType)
 * 
 *         if self._dim == 2 and locType in ['Ez','Fz']:             # <<<<<<<<<<<<<<
 *             raise Exception('Unable to interpolate from Z edges/face in 2D')
 * 
 */
  }

  /* "discretize/tree_ext.pyx":2015
 *             raise Exception('Unable to interpolate from Z edges/face in 2D')
 * 
 *         cdef np.int64_t[:, :] simplices = tri.simplices.astype(np.int64)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.int64_t i_out, i_p, i, dim, n_points, npi, n_grid, n_outside
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_simplices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2015, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2015, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2015, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_simplices = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "discretize/tree_ext.pyx":2018
 * 
 *         cdef np.int64_t i_out, i_p, i, dim, n_points, npi, n_grid, n_outside
 *         dim = self._dim             # <<<<<<<<<<<<<<
 * 
 *         cdef np.float64_t[:, :] points = np.atleast_2d(locs).copy()
 */
  __pyx_t_11 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_11;

  /* "discretize/tree_ext.pyx":2020
 *         dim = self._dim
 * 
 *         cdef np.float64_t[:, :] points = np.atleast_2d(locs).copy()             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] grid_points = tri.points
 *         cdef np.float64_t[:] point, proj_point
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_atleast_2d); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_locs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2020, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_locs};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2020, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_locs};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2020, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_locs);
      __Pyx_GIVEREF(__pyx_v_locs);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_locs);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_copy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2020, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2020, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 2020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_points = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "discretize/tree_ext.pyx":2021
 * 
 *         cdef np.float64_t[:, :] points = np.atleast_2d(locs).copy()
 *         cdef np.float64_t[:, :] grid_points = tri.points             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] point, proj_point
 *         cdef double *p0
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_points); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_t_2);
  if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_grid_points = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "discretize/tree_ext.pyx":2026
 *         cdef double *p1
 *         cdef double *p2
 *         cdef double d, dsq, inf=np.inf             # <<<<<<<<<<<<<<
 *         cdef int contains_point
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_inf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2026, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_inf = __pyx_t_13;

  /* "discretize/tree_ext.pyx":2029
 *         cdef int contains_point
 * 
 *         n_points = points.shape[0]             # <<<<<<<<<<<<<<
 *         n_grid = grid_points.shape[0]
 *         npsimps = tri.find_simplex(locs).astype(np.int64)
 */
  __pyx_v_n_points = (__pyx_v_points.shape[0]);

  /* "discretize/tree_ext.pyx":2030
 * 
 *         n_points = points.shape[0]
 *         n_grid = grid_points.shape[0]             # <<<<<<<<<<<<<<
 *         npsimps = tri.find_simplex(locs).astype(np.int64)
 *         cdef np.int64_t[:] simps = npsimps
 */
  __pyx_v_n_grid = (__pyx_v_grid_points.shape[0]);

  /* "discretize/tree_ext.pyx":2031
 *         n_points = points.shape[0]
 *         n_grid = grid_points.shape[0]
 *         npsimps = tri.find_simplex(locs).astype(np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] simps = npsimps
 *         cdef np.int64_t[:] simplex
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_find_simplex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_locs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_locs};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_locs};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_locs);
      __Pyx_GIVEREF(__pyx_v_locs);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_locs);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_npsimps = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":2032
 *         n_grid = grid_points.shape[0]
 *         npsimps = tri.find_simplex(locs).astype(np.int64)
 *         cdef np.int64_t[:] simps = npsimps             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] simplex
 *         cdef np.int64_t[:, :] hull
 */
  __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_v_npsimps);
  if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 2032, __pyx_L1_error)
  __pyx_v_simps = __pyx_t_14;
  __pyx_t_14.memview = NULL;
  __pyx_t_14.data = NULL;

  /* "discretize/tree_ext.pyx":2038
 *         cdef np.int64_t[:] npis
 * 
 *         proj_point = np.empty_like(points[0])             # <<<<<<<<<<<<<<
 *         point = np.empty_like(points[0])
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty_like); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_15.data = __pyx_v_points.data;
  __pyx_t_15.memview = __pyx_v_points.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
  {
    Py_ssize_t __pyx_tmp_idx = 0;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_points.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_points.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2038, __pyx_L1_error)
    }
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_points.shape[1];
__pyx_t_15.strides[0] = __pyx_v_points.strides[1];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_1 = __pyx_memoryview_fromslice(__pyx_t_15, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2038, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2038, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2038, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2038, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2038, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 2038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_proj_point = __pyx_t_15;
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;

  /* "discretize/tree_ext.pyx":2039
 * 
 *         proj_point = np.empty_like(points[0])
 *         point = np.empty_like(points[0])             # <<<<<<<<<<<<<<
 * 
 *         np_outside_points = (np.where(npsimps == -1)[0]).astype(np.int64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty_like); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15.data = __pyx_v_points.data;
  __pyx_t_15.memview = __pyx_v_points.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
  {
    Py_ssize_t __pyx_tmp_idx = 0;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_points.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_points.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2039, __pyx_L1_error)
    }
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_points.shape[1];
__pyx_t_15.strides[0] = __pyx_v_points.strides[1];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_3 = __pyx_memoryview_fromslice(__pyx_t_15, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2039, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2039, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2039, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 2039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_point = __pyx_t_15;
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;

  /* "discretize/tree_ext.pyx":2041
 *         point = np.empty_like(points[0])
 * 
 *         np_outside_points = (np.where(npsimps == -1)[0]).astype(np.int64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] outside_points = np_outside_points
 *         n_outside = outside_points.shape[0]
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_where); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_npsimps, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_16); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2041, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_16};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_16};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_16);
      __pyx_t_16 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2041, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_np_outside_points = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":2042
 * 
 *         np_outside_points = (np.where(npsimps == -1)[0]).astype(np.int64)
 *         cdef np.int64_t[:] outside_points = np_outside_points             # <<<<<<<<<<<<<<
 *         n_outside = outside_points.shape[0]
 *         cdef np.float64_t[:] barys = np.empty(dim, dtype=np.float64)
 */
  __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_v_np_outside_points);
  if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __pyx_v_outside_points = __pyx_t_14;
  __pyx_t_14.memview = NULL;
  __pyx_t_14.data = NULL;

  /* "discretize/tree_ext.pyx":2043
 *         np_outside_points = (np.where(npsimps == -1)[0]).astype(np.int64)
 *         cdef np.int64_t[:] outside_points = np_outside_points
 *         n_outside = outside_points.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] barys = np.empty(dim, dtype=np.float64)
 * 
 */
  __pyx_v_n_outside = (__pyx_v_outside_points.shape[0]);

  /* "discretize/tree_ext.pyx":2044
 *         cdef np.int64_t[:] outside_points = np_outside_points
 *         n_outside = outside_points.shape[0]
 *         cdef np.float64_t[:] barys = np.empty(dim, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         trans = tri.transform[npsimps]
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_3);
  if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_barys = __pyx_t_15;
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;

  /* "discretize/tree_ext.pyx":2046
 *         cdef np.float64_t[:] barys = np.empty(dim, dtype=np.float64)
 * 
 *         trans = tri.transform[npsimps]             # <<<<<<<<<<<<<<
 *         shift = np.array(points) - trans[:, dim]
 *         bs = np.einsum('ikj,ij->ik', trans[:, :dim], shift)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_transform_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyObject_GetItem(__pyx_t_3, __pyx_v_npsimps); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_trans = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":2047
 * 
 *         trans = tri.transform[npsimps]
 *         shift = np.array(points) - trans[:, dim]             # <<<<<<<<<<<<<<
 *         bs = np.einsum('ikj,ij->ik', trans[:, :dim], shift)
 *         bs = np.c_[bs, 1 - bs.sum(axis=1)]
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_points, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2047, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2047, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2047, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2047, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_16, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2047, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_slice__49);
  __Pyx_GIVEREF(__pyx_slice__49);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_slice__49);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetItem(__pyx_v_trans, __pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyNumber_Subtract(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_shift = __pyx_t_16;
  __pyx_t_16 = 0;

  /* "discretize/tree_ext.pyx":2048
 *         trans = tri.transform[npsimps]
 *         shift = np.array(points) - trans[:, dim]
 *         bs = np.einsum('ikj,ij->ik', trans[:, :dim], shift)             # <<<<<<<<<<<<<<
 *         bs = np.c_[bs, 1 - bs.sum(axis=1)]
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_einsum); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_npy_int64(__pyx_v_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PySlice_New(Py_None, __pyx_t_4, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_slice__50);
  __Pyx_GIVEREF(__pyx_slice__50);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_slice__50);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetItem(__pyx_v_trans, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_kp_s_ikj_ij_ik, __pyx_t_3, __pyx_v_shift};
    __pyx_t_16 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_kp_s_ikj_ij_ik, __pyx_t_3, __pyx_v_shift};
    __pyx_t_16 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_kp_s_ikj_ij_ik);
    __Pyx_GIVEREF(__pyx_kp_s_ikj_ij_ik);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_5, __pyx_kp_s_ikj_ij_ik);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_shift);
    __Pyx_GIVEREF(__pyx_v_shift);
    PyTuple_SET_ITEM(__pyx_t_2, 2+__pyx_t_5, __pyx_v_shift);
    __pyx_t_3 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_bs = __pyx_t_16;
  __pyx_t_16 = 0;

  /* "discretize/tree_ext.pyx":2049
 *         shift = np.array(points) - trans[:, dim]
 *         bs = np.einsum('ikj,ij->ik', trans[:, :dim], shift)
 *         bs = np.c_[bs, 1 - bs.sum(axis=1)]             # <<<<<<<<<<<<<<
 * 
 *         I = np.column_stack((dim + 1)*[np.arange(n_points, dtype=np.int64)])
 */
  __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_c); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_bs, __pyx_n_s_sum); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 2049, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_bs);
  __Pyx_GIVEREF(__pyx_v_bs);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_bs);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_bs, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2051
 *         bs = np.c_[bs, 1 - bs.sum(axis=1)]
 * 
 *         I = np.column_stack((dim + 1)*[np.arange(n_points, dtype=np.int64)])             # <<<<<<<<<<<<<<
 *         J = (tri.simplices[npsimps]).astype(np.int64)
 *         V = bs.astype(np.float64)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_column_stack); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_npy_int64((__pyx_v_dim + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_arange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_points); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_16);
  __pyx_t_16 = 0;
  __pyx_t_16 = PyDict_New(); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_int64); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_dtype, __pyx_t_18) < 0) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyList_New(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_18);
  __pyx_t_18 = 0;
  __pyx_t_18 = PyNumber_Multiply(__pyx_t_3, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_16) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2051, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_t_18};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2051, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_t_18};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2051, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2051, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_16); __pyx_t_16 = NULL;
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_18);
      __pyx_t_18 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2051, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_I = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2052
 * 
 *         I = np.column_stack((dim + 1)*[np.arange(n_points, dtype=np.int64)])
 *         J = (tri.simplices[npsimps]).astype(np.int64)             # <<<<<<<<<<<<<<
 *         V = bs.astype(np.float64)
 *         cdef np.int64_t[:, :] Js = J
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_simplices); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_6, __pyx_v_npsimps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2052, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_18};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_18};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_18);
      __pyx_t_18 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2052, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_J = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2053
 *         I = np.column_stack((dim + 1)*[np.arange(n_points, dtype=np.int64)])
 *         J = (tri.simplices[npsimps]).astype(np.int64)
 *         V = bs.astype(np.float64)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:, :] Js = J
 *         cdef np.float64_t[:, :] Vs = V
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_bs, __pyx_n_s_astype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_float64); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_16) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2053, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_t_18};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2053, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_t_18};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2053, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_16); __pyx_t_16 = NULL;
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_18);
      __pyx_t_18 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_V = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2054
 *         J = (tri.simplices[npsimps]).astype(np.int64)
 *         V = bs.astype(np.float64)
 *         cdef np.int64_t[:, :] Js = J             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:, :] Vs = V
 * 
 */
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int64_t(__pyx_v_J);
  if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 2054, __pyx_L1_error)
  __pyx_v_Js = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "discretize/tree_ext.pyx":2055
 *         V = bs.astype(np.float64)
 *         cdef np.int64_t[:, :] Js = J
 *         cdef np.float64_t[:, :] Vs = V             # <<<<<<<<<<<<<<
 * 
 *         if n_outside > 0 and not zerosOutside:
 */
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_v_V);
  if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 2055, __pyx_L1_error)
  __pyx_v_Vs = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "discretize/tree_ext.pyx":2057
 *         cdef np.float64_t[:, :] Vs = V
 * 
 *         if n_outside > 0 and not zerosOutside:             # <<<<<<<<<<<<<<
 *             #oh boy got some points that need to be extrapolated
 * 
 */
  __pyx_t_9 = ((__pyx_v_n_outside > 0) != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_8 = __pyx_t_9;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_zerosOutside); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 2057, __pyx_L1_error)
  __pyx_t_7 = ((!__pyx_t_9) != 0);
  __pyx_t_8 = __pyx_t_7;
  __pyx_L19_bool_binop_done:;
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":2060
 *             #oh boy got some points that need to be extrapolated
 * 
 *             hull = (tri.convex_hull).astype(np.int64)             # <<<<<<<<<<<<<<
 *             np_hull_points = np.unique(hull)
 *             hull_points = np_hull_points.astype(np.int64)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_convex_hull); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_astype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2060, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_18};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2060, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_18};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2060, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2060, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_18);
        PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_18);
        __pyx_t_18 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2060, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int64_t(__pyx_t_2);
    if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_hull = __pyx_t_10;
    __pyx_t_10.memview = NULL;
    __pyx_t_10.data = NULL;

    /* "discretize/tree_ext.pyx":2061
 * 
 *             hull = (tri.convex_hull).astype(np.int64)
 *             np_hull_points = np.unique(hull)             # <<<<<<<<<<<<<<
 *             hull_points = np_hull_points.astype(np.int64)
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_unique); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_hull, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    if (!__pyx_t_18) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2061, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2061, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2061, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2061, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_18); __pyx_t_18 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2061, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_np_hull_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":2062
 *             hull = (tri.convex_hull).astype(np.int64)
 *             np_hull_points = np.unique(hull)
 *             hull_points = np_hull_points.astype(np.int64)             # <<<<<<<<<<<<<<
 * 
 *             n_hull_simps = hull.shape[0]
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_np_hull_points, __pyx_n_s_astype); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2062, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2062, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2062, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_18 = PyTuple_New(1+1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_18, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2062, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_2);
    if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_hull_points = __pyx_t_14;
    __pyx_t_14.memview = NULL;
    __pyx_t_14.data = NULL;

    /* "discretize/tree_ext.pyx":2064
 *             hull_points = np_hull_points.astype(np.int64)
 * 
 *             n_hull_simps = hull.shape[0]             # <<<<<<<<<<<<<<
 * 
 *             kdtree = cKDTree(tri.points[np_hull_points])
 */
    __pyx_v_n_hull_simps = (__pyx_v_hull.shape[0]);

    /* "discretize/tree_ext.pyx":2066
 *             n_hull_simps = hull.shape[0]
 * 
 *             kdtree = cKDTree(tri.points[np_hull_points])             # <<<<<<<<<<<<<<
 *             npis = kdtree.query(locs[np_outside_points])[1].astype(np.int64)
 * 
 */
    __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_cKDTree); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_points); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_3 = PyObject_GetItem(__pyx_t_18, __pyx_v_np_hull_points); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    if (!__pyx_t_18) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2066, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2066, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2066, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2066, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_18); __pyx_t_18 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2066, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_kdtree = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":2067
 * 
 *             kdtree = cKDTree(tri.points[np_hull_points])
 *             npis = kdtree.query(locs[np_outside_points])[1].astype(np.int64)             # <<<<<<<<<<<<<<
 * 
 *             for i_out in range(n_outside):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_kdtree, __pyx_n_s_query); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_locs, __pyx_v_np_outside_points); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_18) {
      __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2067, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_16);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_3};
        __pyx_t_16 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_18, __pyx_t_3};
        __pyx_t_16 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_18); __pyx_t_18 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_16, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_astype); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2067, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2067, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_2);
    if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_npis = __pyx_t_14;
    __pyx_t_14.memview = NULL;
    __pyx_t_14.data = NULL;

    /* "discretize/tree_ext.pyx":2069
 *             npis = kdtree.query(locs[np_outside_points])[1].astype(np.int64)
 * 
 *             for i_out in range(n_outside):             # <<<<<<<<<<<<<<
 *                 i_p = outside_points[i_out]
 *                 point[:] = points[i_p]
 */
    __pyx_t_19 = __pyx_v_n_outside;
    for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
      __pyx_v_i_out = __pyx_t_20;

      /* "discretize/tree_ext.pyx":2070
 * 
 *             for i_out in range(n_outside):
 *                 i_p = outside_points[i_out]             # <<<<<<<<<<<<<<
 *                 point[:] = points[i_p]
 *                 npi = hull_points[npis[i_out]]
 */
      __pyx_t_21 = __pyx_v_i_out;
      __pyx_t_5 = -1;
      if (__pyx_t_21 < 0) {
        __pyx_t_21 += __pyx_v_outside_points.shape[0];
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_5 = 0;
      } else if (unlikely(__pyx_t_21 >= __pyx_v_outside_points.shape[0])) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(0, 2070, __pyx_L1_error)
      }
      __pyx_v_i_p = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_outside_points.data + __pyx_t_21 * __pyx_v_outside_points.strides[0]) )));

      /* "discretize/tree_ext.pyx":2071
 *             for i_out in range(n_outside):
 *                 i_p = outside_points[i_out]
 *                 point[:] = points[i_p]             # <<<<<<<<<<<<<<
 *                 npi = hull_points[npis[i_out]]
 * 
 */
      __pyx_t_15.data = __pyx_v_points.data;
      __pyx_t_15.memview = __pyx_v_points.memview;
      __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
      {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i_p;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_points.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_points.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2071, __pyx_L1_error)
    }
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_points.shape[1];
__pyx_t_15.strides[0] = __pyx_v_points.strides[1];
    __pyx_t_15.suboffsets[0] = -1;

if (unlikely(__pyx_memoryview_copy_contents(__pyx_t_15, __pyx_v_point, 1, 1, 0) < 0)) __PYX_ERR(0, 2071, __pyx_L1_error)
      __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
      __pyx_t_15.memview = NULL;
      __pyx_t_15.data = NULL;

      /* "discretize/tree_ext.pyx":2072
 *                 i_p = outside_points[i_out]
 *                 point[:] = points[i_p]
 *                 npi = hull_points[npis[i_out]]             # <<<<<<<<<<<<<<
 * 
 *                 d = inf
 */
      __pyx_t_22 = __pyx_v_i_out;
      __pyx_t_5 = -1;
      if (__pyx_t_22 < 0) {
        __pyx_t_22 += __pyx_v_npis.shape[0];
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_5 = 0;
      } else if (unlikely(__pyx_t_22 >= __pyx_v_npis.shape[0])) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(0, 2072, __pyx_L1_error)
      }
      __pyx_t_23 = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_npis.data + __pyx_t_22 * __pyx_v_npis.strides[0]) )));
      __pyx_t_5 = -1;
      if (__pyx_t_23 < 0) {
        __pyx_t_23 += __pyx_v_hull_points.shape[0];
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_5 = 0;
      } else if (unlikely(__pyx_t_23 >= __pyx_v_hull_points.shape[0])) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(0, 2072, __pyx_L1_error)
      }
      __pyx_v_npi = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_hull_points.data + __pyx_t_23 * __pyx_v_hull_points.strides[0]) )));

      /* "discretize/tree_ext.pyx":2074
 *                 npi = hull_points[npis[i_out]]
 * 
 *                 d = inf             # <<<<<<<<<<<<<<
 *                 for i_s in range(n_hull_simps):
 *                     simplex = hull[i_s]
 */
      __pyx_v_d = __pyx_v_inf;

      /* "discretize/tree_ext.pyx":2075
 * 
 *                 d = inf
 *                 for i_s in range(n_hull_simps):             # <<<<<<<<<<<<<<
 *                     simplex = hull[i_s]
 *                     contains_point = 0
 */
      __pyx_t_24 = __pyx_v_n_hull_simps;
      for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_24; __pyx_t_25+=1) {
        __pyx_v_i_s = __pyx_t_25;

        /* "discretize/tree_ext.pyx":2076
 *                 d = inf
 *                 for i_s in range(n_hull_simps):
 *                     simplex = hull[i_s]             # <<<<<<<<<<<<<<
 *                     contains_point = 0
 *                     for i in range(dim):
 */
        __pyx_t_14.data = __pyx_v_hull.data;
        __pyx_t_14.memview = __pyx_v_hull.memview;
        __PYX_INC_MEMVIEW(&__pyx_t_14, 0);
        {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i_s;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_hull.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_hull.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2076, __pyx_L1_error)
    }
        __pyx_t_14.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_14.shape[0] = __pyx_v_hull.shape[1];
__pyx_t_14.strides[0] = __pyx_v_hull.strides[1];
    __pyx_t_14.suboffsets[0] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_v_simplex, 1);
        __pyx_v_simplex = __pyx_t_14;
        __pyx_t_14.memview = NULL;
        __pyx_t_14.data = NULL;

        /* "discretize/tree_ext.pyx":2077
 *                 for i_s in range(n_hull_simps):
 *                     simplex = hull[i_s]
 *                     contains_point = 0             # <<<<<<<<<<<<<<
 *                     for i in range(dim):
 *                         contains_point = contains_point or simplex[i]==npi
 */
        __pyx_v_contains_point = 0;

        /* "discretize/tree_ext.pyx":2078
 *                     simplex = hull[i_s]
 *                     contains_point = 0
 *                     for i in range(dim):             # <<<<<<<<<<<<<<
 *                         contains_point = contains_point or simplex[i]==npi
 *                     if not contains_point:
 */
        __pyx_t_26 = __pyx_v_dim;
        for (__pyx_t_27 = 0; __pyx_t_27 < __pyx_t_26; __pyx_t_27+=1) {
          __pyx_v_i = __pyx_t_27;

          /* "discretize/tree_ext.pyx":2079
 *                     contains_point = 0
 *                     for i in range(dim):
 *                         contains_point = contains_point or simplex[i]==npi             # <<<<<<<<<<<<<<
 *                     if not contains_point:
 *                         continue
 */
          if (!__pyx_v_contains_point) {
          } else {
            __pyx_t_5 = __pyx_v_contains_point;
            goto __pyx_L27_bool_binop_done;
          }
          __pyx_t_28 = __pyx_v_i;
          __pyx_t_29 = -1;
          if (__pyx_t_28 < 0) {
            __pyx_t_28 += __pyx_v_simplex.shape[0];
            if (unlikely(__pyx_t_28 < 0)) __pyx_t_29 = 0;
          } else if (unlikely(__pyx_t_28 >= __pyx_v_simplex.shape[0])) __pyx_t_29 = 0;
          if (unlikely(__pyx_t_29 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_29);
            __PYX_ERR(0, 2079, __pyx_L1_error)
          }
          __pyx_t_8 = ((*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_simplex.data + __pyx_t_28 * __pyx_v_simplex.strides[0]) ))) == __pyx_v_npi);
          __pyx_t_5 = __pyx_t_8;
          __pyx_L27_bool_binop_done:;
          __pyx_v_contains_point = __pyx_t_5;
        }

        /* "discretize/tree_ext.pyx":2080
 *                     for i in range(dim):
 *                         contains_point = contains_point or simplex[i]==npi
 *                     if not contains_point:             # <<<<<<<<<<<<<<
 *                         continue
 *                     p0 = &grid_points[simplex[0], 0]
 */
        __pyx_t_8 = ((!(__pyx_v_contains_point != 0)) != 0);
        if (__pyx_t_8) {

          /* "discretize/tree_ext.pyx":2081
 *                         contains_point = contains_point or simplex[i]==npi
 *                     if not contains_point:
 *                         continue             # <<<<<<<<<<<<<<
 *                     p0 = &grid_points[simplex[0], 0]
 *                     p1 = &grid_points[simplex[1], 0]
 */
          goto __pyx_L23_continue;

          /* "discretize/tree_ext.pyx":2080
 *                     for i in range(dim):
 *                         contains_point = contains_point or simplex[i]==npi
 *                     if not contains_point:             # <<<<<<<<<<<<<<
 *                         continue
 *                     p0 = &grid_points[simplex[0], 0]
 */
        }

        /* "discretize/tree_ext.pyx":2082
 *                     if not contains_point:
 *                         continue
 *                     p0 = &grid_points[simplex[0], 0]             # <<<<<<<<<<<<<<
 *                     p1 = &grid_points[simplex[1], 0]
 *                     if dim==2:
 */
        __pyx_t_30 = 0;
        __pyx_t_5 = -1;
        if (__pyx_t_30 < 0) {
          __pyx_t_30 += __pyx_v_simplex.shape[0];
          if (unlikely(__pyx_t_30 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_30 >= __pyx_v_simplex.shape[0])) __pyx_t_5 = 0;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 2082, __pyx_L1_error)
        }
        __pyx_t_26 = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_simplex.data + __pyx_t_30 * __pyx_v_simplex.strides[0]) )));
        __pyx_t_31 = 0;
        __pyx_t_5 = -1;
        if (__pyx_t_26 < 0) {
          __pyx_t_26 += __pyx_v_grid_points.shape[0];
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_26 >= __pyx_v_grid_points.shape[0])) __pyx_t_5 = 0;
        if (__pyx_t_31 < 0) {
          __pyx_t_31 += __pyx_v_grid_points.shape[1];
          if (unlikely(__pyx_t_31 < 0)) __pyx_t_5 = 1;
        } else if (unlikely(__pyx_t_31 >= __pyx_v_grid_points.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 2082, __pyx_L1_error)
        }
        __pyx_v_p0 = (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grid_points.data + __pyx_t_26 * __pyx_v_grid_points.strides[0]) ) + __pyx_t_31 * __pyx_v_grid_points.strides[1]) ))));

        /* "discretize/tree_ext.pyx":2083
 *                         continue
 *                     p0 = &grid_points[simplex[0], 0]
 *                     p1 = &grid_points[simplex[1], 0]             # <<<<<<<<<<<<<<
 *                     if dim==2:
 *                         _project_point_to_edge(&point[0], p0, p1, dim, &proj_point[0])
 */
        __pyx_t_32 = 1;
        __pyx_t_5 = -1;
        if (__pyx_t_32 < 0) {
          __pyx_t_32 += __pyx_v_simplex.shape[0];
          if (unlikely(__pyx_t_32 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_32 >= __pyx_v_simplex.shape[0])) __pyx_t_5 = 0;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 2083, __pyx_L1_error)
        }
        __pyx_t_27 = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_simplex.data + __pyx_t_32 * __pyx_v_simplex.strides[0]) )));
        __pyx_t_33 = 0;
        __pyx_t_5 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_v_grid_points.shape[0];
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_5 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_v_grid_points.shape[0])) __pyx_t_5 = 0;
        if (__pyx_t_33 < 0) {
          __pyx_t_33 += __pyx_v_grid_points.shape[1];
          if (unlikely(__pyx_t_33 < 0)) __pyx_t_5 = 1;
        } else if (unlikely(__pyx_t_33 >= __pyx_v_grid_points.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(0, 2083, __pyx_L1_error)
        }
        __pyx_v_p1 = (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grid_points.data + __pyx_t_27 * __pyx_v_grid_points.strides[0]) ) + __pyx_t_33 * __pyx_v_grid_points.strides[1]) ))));

        /* "discretize/tree_ext.pyx":2084
 *                     p0 = &grid_points[simplex[0], 0]
 *                     p1 = &grid_points[simplex[1], 0]
 *                     if dim==2:             # <<<<<<<<<<<<<<
 *                         _project_point_to_edge(&point[0], p0, p1, dim, &proj_point[0])
 *                     else:
 */
        __pyx_t_8 = ((__pyx_v_dim == 2) != 0);
        if (__pyx_t_8) {

          /* "discretize/tree_ext.pyx":2085
 *                     p1 = &grid_points[simplex[1], 0]
 *                     if dim==2:
 *                         _project_point_to_edge(&point[0], p0, p1, dim, &proj_point[0])             # <<<<<<<<<<<<<<
 *                     else:
 *                         p2 = &grid_points[simplex[2], 0]
 */
          __pyx_t_34 = 0;
          __pyx_t_5 = -1;
          if (__pyx_t_34 < 0) {
            __pyx_t_34 += __pyx_v_point.shape[0];
            if (unlikely(__pyx_t_34 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_34 >= __pyx_v_point.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2085, __pyx_L1_error)
          }
          __pyx_t_35 = 0;
          __pyx_t_5 = -1;
          if (__pyx_t_35 < 0) {
            __pyx_t_35 += __pyx_v_proj_point.shape[0];
            if (unlikely(__pyx_t_35 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_35 >= __pyx_v_proj_point.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2085, __pyx_L1_error)
          }
          __pyx_f_10discretize_8tree_ext__project_point_to_edge((&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_point.data + __pyx_t_34 * __pyx_v_point.strides[0]) )))), __pyx_v_p0, __pyx_v_p1, __pyx_v_dim, (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_proj_point.data + __pyx_t_35 * __pyx_v_proj_point.strides[0]) )))));

          /* "discretize/tree_ext.pyx":2084
 *                     p0 = &grid_points[simplex[0], 0]
 *                     p1 = &grid_points[simplex[1], 0]
 *                     if dim==2:             # <<<<<<<<<<<<<<
 *                         _project_point_to_edge(&point[0], p0, p1, dim, &proj_point[0])
 *                     else:
 */
          goto __pyx_L30;
        }

        /* "discretize/tree_ext.pyx":2087
 *                         _project_point_to_edge(&point[0], p0, p1, dim, &proj_point[0])
 *                     else:
 *                         p2 = &grid_points[simplex[2], 0]             # <<<<<<<<<<<<<<
 *                         _project_point_to_triangle(&point[0], p0, p1, p2, dim, &proj_point[0])
 * 
 */
        /*else*/ {
          __pyx_t_36 = 2;
          __pyx_t_5 = -1;
          if (__pyx_t_36 < 0) {
            __pyx_t_36 += __pyx_v_simplex.shape[0];
            if (unlikely(__pyx_t_36 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_36 >= __pyx_v_simplex.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2087, __pyx_L1_error)
          }
          __pyx_t_37 = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_simplex.data + __pyx_t_36 * __pyx_v_simplex.strides[0]) )));
          __pyx_t_38 = 0;
          __pyx_t_5 = -1;
          if (__pyx_t_37 < 0) {
            __pyx_t_37 += __pyx_v_grid_points.shape[0];
            if (unlikely(__pyx_t_37 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_37 >= __pyx_v_grid_points.shape[0])) __pyx_t_5 = 0;
          if (__pyx_t_38 < 0) {
            __pyx_t_38 += __pyx_v_grid_points.shape[1];
            if (unlikely(__pyx_t_38 < 0)) __pyx_t_5 = 1;
          } else if (unlikely(__pyx_t_38 >= __pyx_v_grid_points.shape[1])) __pyx_t_5 = 1;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2087, __pyx_L1_error)
          }
          __pyx_v_p2 = (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grid_points.data + __pyx_t_37 * __pyx_v_grid_points.strides[0]) ) + __pyx_t_38 * __pyx_v_grid_points.strides[1]) ))));

          /* "discretize/tree_ext.pyx":2088
 *                     else:
 *                         p2 = &grid_points[simplex[2], 0]
 *                         _project_point_to_triangle(&point[0], p0, p1, p2, dim, &proj_point[0])             # <<<<<<<<<<<<<<
 * 
 *                     dsq = 0
 */
          __pyx_t_39 = 0;
          __pyx_t_5 = -1;
          if (__pyx_t_39 < 0) {
            __pyx_t_39 += __pyx_v_point.shape[0];
            if (unlikely(__pyx_t_39 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_39 >= __pyx_v_point.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2088, __pyx_L1_error)
          }
          __pyx_t_40 = 0;
          __pyx_t_5 = -1;
          if (__pyx_t_40 < 0) {
            __pyx_t_40 += __pyx_v_proj_point.shape[0];
            if (unlikely(__pyx_t_40 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_40 >= __pyx_v_proj_point.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2088, __pyx_L1_error)
          }
          __pyx_f_10discretize_8tree_ext__project_point_to_triangle((&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_point.data + __pyx_t_39 * __pyx_v_point.strides[0]) )))), __pyx_v_p0, __pyx_v_p1, __pyx_v_p2, __pyx_v_dim, (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_proj_point.data + __pyx_t_40 * __pyx_v_proj_point.strides[0]) )))));
        }
        __pyx_L30:;

        /* "discretize/tree_ext.pyx":2090
 *                         _project_point_to_triangle(&point[0], p0, p1, p2, dim, &proj_point[0])
 * 
 *                     dsq = 0             # <<<<<<<<<<<<<<
 *                     for i in range(dim):
 *                         dsq += (point[i] - proj_point[i])*(point[i] - proj_point[i])
 */
        __pyx_v_dsq = 0.0;

        /* "discretize/tree_ext.pyx":2091
 * 
 *                     dsq = 0
 *                     for i in range(dim):             # <<<<<<<<<<<<<<
 *                         dsq += (point[i] - proj_point[i])*(point[i] - proj_point[i])
 *                     if dsq < d:
 */
        __pyx_t_41 = __pyx_v_dim;
        for (__pyx_t_42 = 0; __pyx_t_42 < __pyx_t_41; __pyx_t_42+=1) {
          __pyx_v_i = __pyx_t_42;

          /* "discretize/tree_ext.pyx":2092
 *                     dsq = 0
 *                     for i in range(dim):
 *                         dsq += (point[i] - proj_point[i])*(point[i] - proj_point[i])             # <<<<<<<<<<<<<<
 *                     if dsq < d:
 *                         d = dsq
 */
          __pyx_t_43 = __pyx_v_i;
          __pyx_t_5 = -1;
          if (__pyx_t_43 < 0) {
            __pyx_t_43 += __pyx_v_point.shape[0];
            if (unlikely(__pyx_t_43 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_43 >= __pyx_v_point.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2092, __pyx_L1_error)
          }
          __pyx_t_44 = __pyx_v_i;
          __pyx_t_5 = -1;
          if (__pyx_t_44 < 0) {
            __pyx_t_44 += __pyx_v_proj_point.shape[0];
            if (unlikely(__pyx_t_44 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_44 >= __pyx_v_proj_point.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2092, __pyx_L1_error)
          }
          __pyx_t_45 = __pyx_v_i;
          __pyx_t_5 = -1;
          if (__pyx_t_45 < 0) {
            __pyx_t_45 += __pyx_v_point.shape[0];
            if (unlikely(__pyx_t_45 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_45 >= __pyx_v_point.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2092, __pyx_L1_error)
          }
          __pyx_t_46 = __pyx_v_i;
          __pyx_t_5 = -1;
          if (__pyx_t_46 < 0) {
            __pyx_t_46 += __pyx_v_proj_point.shape[0];
            if (unlikely(__pyx_t_46 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_46 >= __pyx_v_proj_point.shape[0])) __pyx_t_5 = 0;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2092, __pyx_L1_error)
          }
          __pyx_v_dsq = (__pyx_v_dsq + (((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_point.data + __pyx_t_43 * __pyx_v_point.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_proj_point.data + __pyx_t_44 * __pyx_v_proj_point.strides[0]) )))) * ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_point.data + __pyx_t_45 * __pyx_v_point.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_proj_point.data + __pyx_t_46 * __pyx_v_proj_point.strides[0]) ))))));
        }

        /* "discretize/tree_ext.pyx":2093
 *                     for i in range(dim):
 *                         dsq += (point[i] - proj_point[i])*(point[i] - proj_point[i])
 *                     if dsq < d:             # <<<<<<<<<<<<<<
 *                         d = dsq
 *                         if dim==2:
 */
        __pyx_t_8 = ((__pyx_v_dsq < __pyx_v_d) != 0);
        if (__pyx_t_8) {

          /* "discretize/tree_ext.pyx":2094
 *                         dsq += (point[i] - proj_point[i])*(point[i] - proj_point[i])
 *                     if dsq < d:
 *                         d = dsq             # <<<<<<<<<<<<<<
 *                         if dim==2:
 *                             _barycentric_edge(&proj_point[0], p0, p1, &barys[0], dim)
 */
          __pyx_v_d = __pyx_v_dsq;

          /* "discretize/tree_ext.pyx":2095
 *                     if dsq < d:
 *                         d = dsq
 *                         if dim==2:             # <<<<<<<<<<<<<<
 *                             _barycentric_edge(&proj_point[0], p0, p1, &barys[0], dim)
 *                         else:
 */
          __pyx_t_8 = ((__pyx_v_dim == 2) != 0);
          if (__pyx_t_8) {

            /* "discretize/tree_ext.pyx":2096
 *                         d = dsq
 *                         if dim==2:
 *                             _barycentric_edge(&proj_point[0], p0, p1, &barys[0], dim)             # <<<<<<<<<<<<<<
 *                         else:
 *                             _barycentric_triangle(&proj_point[0], p0, p1, p2, &barys[0], dim)
 */
            __pyx_t_47 = 0;
            __pyx_t_5 = -1;
            if (__pyx_t_47 < 0) {
              __pyx_t_47 += __pyx_v_proj_point.shape[0];
              if (unlikely(__pyx_t_47 < 0)) __pyx_t_5 = 0;
            } else if (unlikely(__pyx_t_47 >= __pyx_v_proj_point.shape[0])) __pyx_t_5 = 0;
            if (unlikely(__pyx_t_5 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_5);
              __PYX_ERR(0, 2096, __pyx_L1_error)
            }
            __pyx_t_48 = 0;
            __pyx_t_5 = -1;
            if (__pyx_t_48 < 0) {
              __pyx_t_48 += __pyx_v_barys.shape[0];
              if (unlikely(__pyx_t_48 < 0)) __pyx_t_5 = 0;
            } else if (unlikely(__pyx_t_48 >= __pyx_v_barys.shape[0])) __pyx_t_5 = 0;
            if (unlikely(__pyx_t_5 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_5);
              __PYX_ERR(0, 2096, __pyx_L1_error)
            }
            __pyx_f_10discretize_8tree_ext__barycentric_edge((&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_proj_point.data + __pyx_t_47 * __pyx_v_proj_point.strides[0]) )))), __pyx_v_p0, __pyx_v_p1, (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_barys.data + __pyx_t_48 * __pyx_v_barys.strides[0]) )))), __pyx_v_dim);

            /* "discretize/tree_ext.pyx":2095
 *                     if dsq < d:
 *                         d = dsq
 *                         if dim==2:             # <<<<<<<<<<<<<<
 *                             _barycentric_edge(&proj_point[0], p0, p1, &barys[0], dim)
 *                         else:
 */
            goto __pyx_L34;
          }

          /* "discretize/tree_ext.pyx":2098
 *                             _barycentric_edge(&proj_point[0], p0, p1, &barys[0], dim)
 *                         else:
 *                             _barycentric_triangle(&proj_point[0], p0, p1, p2, &barys[0], dim)             # <<<<<<<<<<<<<<
 *                         Js[i_p, 0:dim] = simplex[:]
 *                         Vs[i_p, 0:dim] = barys[:]
 */
          /*else*/ {
            __pyx_t_49 = 0;
            __pyx_t_5 = -1;
            if (__pyx_t_49 < 0) {
              __pyx_t_49 += __pyx_v_proj_point.shape[0];
              if (unlikely(__pyx_t_49 < 0)) __pyx_t_5 = 0;
            } else if (unlikely(__pyx_t_49 >= __pyx_v_proj_point.shape[0])) __pyx_t_5 = 0;
            if (unlikely(__pyx_t_5 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_5);
              __PYX_ERR(0, 2098, __pyx_L1_error)
            }
            __pyx_t_50 = 0;
            __pyx_t_5 = -1;
            if (__pyx_t_50 < 0) {
              __pyx_t_50 += __pyx_v_barys.shape[0];
              if (unlikely(__pyx_t_50 < 0)) __pyx_t_5 = 0;
            } else if (unlikely(__pyx_t_50 >= __pyx_v_barys.shape[0])) __pyx_t_5 = 0;
            if (unlikely(__pyx_t_5 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_5);
              __PYX_ERR(0, 2098, __pyx_L1_error)
            }
            __pyx_f_10discretize_8tree_ext__barycentric_triangle((&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_proj_point.data + __pyx_t_49 * __pyx_v_proj_point.strides[0]) )))), __pyx_v_p0, __pyx_v_p1, __pyx_v_p2, (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_barys.data + __pyx_t_50 * __pyx_v_barys.strides[0]) )))), __pyx_v_dim);
          }
          __pyx_L34:;

          /* "discretize/tree_ext.pyx":2099
 *                         else:
 *                             _barycentric_triangle(&proj_point[0], p0, p1, p2, &barys[0], dim)
 *                         Js[i_p, 0:dim] = simplex[:]             # <<<<<<<<<<<<<<
 *                         Vs[i_p, 0:dim] = barys[:]
 *                         Vs[i_p, dim] = 0.0
 */
          __pyx_t_14.data = __pyx_v_Js.data;
          __pyx_t_14.memview = __pyx_v_Js.memview;
          __PYX_INC_MEMVIEW(&__pyx_t_14, 0);
          {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i_p;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_Js.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_Js.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2099, __pyx_L1_error)
    }
        __pyx_t_14.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_5 = -1;
          if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_14,
    __pyx_v_Js.shape[1], __pyx_v_Js.strides[1], __pyx_v_Js.suboffsets[1],
    1,
    0,
    &__pyx_t_5,
    0,
    __pyx_v_dim,
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 2099, __pyx_L1_error)
}

if (unlikely(__pyx_memoryview_copy_contents(__pyx_v_simplex, __pyx_t_14, 1, 1, 0) < 0)) __PYX_ERR(0, 2099, __pyx_L1_error)
          __PYX_XDEC_MEMVIEW(&__pyx_t_14, 1);
          __pyx_t_14.memview = NULL;
          __pyx_t_14.data = NULL;

          /* "discretize/tree_ext.pyx":2100
 *                             _barycentric_triangle(&proj_point[0], p0, p1, p2, &barys[0], dim)
 *                         Js[i_p, 0:dim] = simplex[:]
 *                         Vs[i_p, 0:dim] = barys[:]             # <<<<<<<<<<<<<<
 *                         Vs[i_p, dim] = 0.0
 * 
 */
          __pyx_t_15.data = __pyx_v_Vs.data;
          __pyx_t_15.memview = __pyx_v_Vs.memview;
          __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
          {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i_p;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_Vs.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_Vs.strides[0];
    if (1 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (1 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(0, 2100, __pyx_L1_error)
    }
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_5 = -1;
          if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_15,
    __pyx_v_Vs.shape[1], __pyx_v_Vs.strides[1], __pyx_v_Vs.suboffsets[1],
    1,
    0,
    &__pyx_t_5,
    0,
    __pyx_v_dim,
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 2100, __pyx_L1_error)
}

if (unlikely(__pyx_memoryview_copy_contents(__pyx_v_barys, __pyx_t_15, 1, 1, 0) < 0)) __PYX_ERR(0, 2100, __pyx_L1_error)
          __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
          __pyx_t_15.memview = NULL;
          __pyx_t_15.data = NULL;

          /* "discretize/tree_ext.pyx":2101
 *                         Js[i_p, 0:dim] = simplex[:]
 *                         Vs[i_p, 0:dim] = barys[:]
 *                         Vs[i_p, dim] = 0.0             # <<<<<<<<<<<<<<
 * 
 *         if zerosOutside:
 */
          __pyx_t_41 = __pyx_v_i_p;
          __pyx_t_42 = __pyx_v_dim;
          __pyx_t_5 = -1;
          if (__pyx_t_41 < 0) {
            __pyx_t_41 += __pyx_v_Vs.shape[0];
            if (unlikely(__pyx_t_41 < 0)) __pyx_t_5 = 0;
          } else if (unlikely(__pyx_t_41 >= __pyx_v_Vs.shape[0])) __pyx_t_5 = 0;
          if (__pyx_t_42 < 0) {
            __pyx_t_42 += __pyx_v_Vs.shape[1];
            if (unlikely(__pyx_t_42 < 0)) __pyx_t_5 = 1;
          } else if (unlikely(__pyx_t_42 >= __pyx_v_Vs.shape[1])) __pyx_t_5 = 1;
          if (unlikely(__pyx_t_5 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_5);
            __PYX_ERR(0, 2101, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_Vs.data + __pyx_t_41 * __pyx_v_Vs.strides[0]) ) + __pyx_t_42 * __pyx_v_Vs.strides[1]) )) = 0.0;

          /* "discretize/tree_ext.pyx":2093
 *                     for i in range(dim):
 *                         dsq += (point[i] - proj_point[i])*(point[i] - proj_point[i])
 *                     if dsq < d:             # <<<<<<<<<<<<<<
 *                         d = dsq
 *                         if dim==2:
 */
        }
        __pyx_L23_continue:;
      }
    }

    /* "discretize/tree_ext.pyx":2057
 *         cdef np.float64_t[:, :] Vs = V
 * 
 *         if n_outside > 0 and not zerosOutside:             # <<<<<<<<<<<<<<
 *             #oh boy got some points that need to be extrapolated
 * 
 */
  }

  /* "discretize/tree_ext.pyx":2103
 *                         Vs[i_p, dim] = 0.0
 * 
 *         if zerosOutside:             # <<<<<<<<<<<<<<
 *                 V[outside_points] = 0.0
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_zerosOutside); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2103, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":2104
 * 
 *         if zerosOutside:
 *                 V[outside_points] = 0.0             # <<<<<<<<<<<<<<
 * 
 *         if locType[0] == 'F':
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_outside_points, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_V, __pyx_t_2, __pyx_float_0_0) < 0)) __PYX_ERR(0, 2104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":2103
 *                         Vs[i_p, dim] = 0.0
 * 
 *         if zerosOutside:             # <<<<<<<<<<<<<<
 *                 V[outside_points] = 0.0
 * 
 */
  }

  /* "discretize/tree_ext.pyx":2106
 *                 V[outside_points] = 0.0
 * 
 *         if locType[0] == 'F':             # <<<<<<<<<<<<<<
 *             n_grid = self.nF
 *             if locType[-1] == 'y':
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_locType, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_F, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":2107
 * 
 *         if locType[0] == 'F':
 *             n_grid = self.nF             # <<<<<<<<<<<<<<
 *             if locType[-1] == 'y':
 *                 J += self.nFx
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_19 = __Pyx_PyInt_As_npy_int64(__pyx_t_2); if (unlikely((__pyx_t_19 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_n_grid = __pyx_t_19;

    /* "discretize/tree_ext.pyx":2108
 *         if locType[0] == 'F':
 *             n_grid = self.nF
 *             if locType[-1] == 'y':             # <<<<<<<<<<<<<<
 *                 J += self.nFx
 *             elif locType[-1] == 'z':
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_locType, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {

      /* "discretize/tree_ext.pyx":2109
 *             n_grid = self.nF
 *             if locType[-1] == 'y':
 *                 J += self.nFx             # <<<<<<<<<<<<<<
 *             elif locType[-1] == 'z':
 *                 J += self.nFx + self.nFy
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_16 = PyNumber_InPlaceAdd(__pyx_v_J, __pyx_t_2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_J, __pyx_t_16);
      __pyx_t_16 = 0;

      /* "discretize/tree_ext.pyx":2108
 *         if locType[0] == 'F':
 *             n_grid = self.nF
 *             if locType[-1] == 'y':             # <<<<<<<<<<<<<<
 *                 J += self.nFx
 *             elif locType[-1] == 'z':
 */
      goto __pyx_L37;
    }

    /* "discretize/tree_ext.pyx":2110
 *             if locType[-1] == 'y':
 *                 J += self.nFx
 *             elif locType[-1] == 'z':             # <<<<<<<<<<<<<<
 *                 J += self.nFx + self.nFy
 *         elif locType[0] == 'E':
 */
    __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_locType, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_16, __pyx_n_s_z, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (__pyx_t_8) {

      /* "discretize/tree_ext.pyx":2111
 *                 J += self.nFx
 *             elif locType[-1] == 'z':
 *                 J += self.nFx + self.nFy             # <<<<<<<<<<<<<<
 *         elif locType[0] == 'E':
 *             n_grid = self.nE
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFx); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nFy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_Add(__pyx_t_16, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_J, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_J, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "discretize/tree_ext.pyx":2110
 *             if locType[-1] == 'y':
 *                 J += self.nFx
 *             elif locType[-1] == 'z':             # <<<<<<<<<<<<<<
 *                 J += self.nFx + self.nFy
 *         elif locType[0] == 'E':
 */
    }
    __pyx_L37:;

    /* "discretize/tree_ext.pyx":2106
 *                 V[outside_points] = 0.0
 * 
 *         if locType[0] == 'F':             # <<<<<<<<<<<<<<
 *             n_grid = self.nF
 *             if locType[-1] == 'y':
 */
    goto __pyx_L36;
  }

  /* "discretize/tree_ext.pyx":2112
 *             elif locType[-1] == 'z':
 *                 J += self.nFx + self.nFy
 *         elif locType[0] == 'E':             # <<<<<<<<<<<<<<
 *             n_grid = self.nE
 *             if locType[-1] == 'y':
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_locType, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_E, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {

    /* "discretize/tree_ext.pyx":2113
 *                 J += self.nFx + self.nFy
 *         elif locType[0] == 'E':
 *             n_grid = self.nE             # <<<<<<<<<<<<<<
 *             if locType[-1] == 'y':
 *                 J += self.nEx
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_19 = __Pyx_PyInt_As_npy_int64(__pyx_t_2); if (unlikely((__pyx_t_19 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_n_grid = __pyx_t_19;

    /* "discretize/tree_ext.pyx":2114
 *         elif locType[0] == 'E':
 *             n_grid = self.nE
 *             if locType[-1] == 'y':             # <<<<<<<<<<<<<<
 *                 J += self.nEx
 *             elif locType[-1] == 'z':
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_locType, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {

      /* "discretize/tree_ext.pyx":2115
 *             n_grid = self.nE
 *             if locType[-1] == 'y':
 *                 J += self.nEx             # <<<<<<<<<<<<<<
 *             elif locType[-1] == 'z':
 *                 J += self.nEx + self.nEy
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_J, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_J, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "discretize/tree_ext.pyx":2114
 *         elif locType[0] == 'E':
 *             n_grid = self.nE
 *             if locType[-1] == 'y':             # <<<<<<<<<<<<<<
 *                 J += self.nEx
 *             elif locType[-1] == 'z':
 */
      goto __pyx_L38;
    }

    /* "discretize/tree_ext.pyx":2116
 *             if locType[-1] == 'y':
 *                 J += self.nEx
 *             elif locType[-1] == 'z':             # <<<<<<<<<<<<<<
 *                 J += self.nEx + self.nEy
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_locType, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_z, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_8) {

      /* "discretize/tree_ext.pyx":2117
 *                 J += self.nEx
 *             elif locType[-1] == 'z':
 *                 J += self.nEx + self.nEy             # <<<<<<<<<<<<<<
 * 
 *         return sp.csr_matrix((V.reshape(-1), (I.reshape(-1), J.reshape(-1))),
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_16 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_J, __pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF_SET(__pyx_v_J, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "discretize/tree_ext.pyx":2116
 *             if locType[-1] == 'y':
 *                 J += self.nEx
 *             elif locType[-1] == 'z':             # <<<<<<<<<<<<<<
 *                 J += self.nEx + self.nEy
 * 
 */
    }
    __pyx_L38:;

    /* "discretize/tree_ext.pyx":2112
 *             elif locType[-1] == 'z':
 *                 J += self.nFx + self.nFy
 *         elif locType[0] == 'E':             # <<<<<<<<<<<<<<
 *             n_grid = self.nE
 *             if locType[-1] == 'y':
 */
  }
  __pyx_L36:;

  /* "discretize/tree_ext.pyx":2119
 *                 J += self.nEx + self.nEy
 * 
 *         return sp.csr_matrix((V.reshape(-1), (I.reshape(-1), J.reshape(-1))),             # <<<<<<<<<<<<<<
 *                              shape=(n_points,n_grid))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_V, __pyx_n_s_reshape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_I, __pyx_n_s_reshape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_J, __pyx_n_s_reshape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":2120
 * 
 *         return sp.csr_matrix((V.reshape(-1), (I.reshape(-1), J.reshape(-1))),
 *                              shape=(n_points,n_grid))             # <<<<<<<<<<<<<<
 * 
 *     def _getNodeIntMat(self, locs, zerosOutside):
 */
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_points); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int64(__pyx_v_n_grid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_shape, __pyx_t_18) < 0) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

  /* "discretize/tree_ext.pyx":2119
 *                 J += self.nEx + self.nEy
 * 
 *         return sp.csr_matrix((V.reshape(-1), (I.reshape(-1), J.reshape(-1))),             # <<<<<<<<<<<<<<
 *                              shape=(n_points,n_grid))
 * 
 */
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_18;
  __pyx_t_18 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":2004
 *         return triang
 * 
 *     def getInterpolationMat(self, locs, locType, zerosOutside=False):             # <<<<<<<<<<<<<<
 *         locs = utils.asArray_N_x_Dim(locs, self.dim)
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_12, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_14, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.getInterpolationMat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tri);
  __PYX_XDEC_MEMVIEW(&__pyx_v_simplices, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_points, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_grid_points, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_point, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_proj_point, 1);
  __Pyx_XDECREF(__pyx_v_npsimps);
  __PYX_XDEC_MEMVIEW(&__pyx_v_simps, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_simplex, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_hull, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_hull_points, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_npis, 1);
  __Pyx_XDECREF(__pyx_v_np_outside_points);
  __PYX_XDEC_MEMVIEW(&__pyx_v_outside_points, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_barys, 1);
  __Pyx_XDECREF(__pyx_v_trans);
  __Pyx_XDECREF(__pyx_v_shift);
  __Pyx_XDECREF(__pyx_v_bs);
  __Pyx_XDECREF(__pyx_v_I);
  __Pyx_XDECREF(__pyx_v_J);
  __Pyx_XDECREF(__pyx_v_V);
  __PYX_XDEC_MEMVIEW(&__pyx_v_Js, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_Vs, 1);
  __Pyx_XDECREF(__pyx_v_np_hull_points);
  __Pyx_XDECREF(__pyx_v_kdtree);
  __Pyx_XDECREF(__pyx_v_locs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2122
 *                              shape=(n_points,n_grid))
 * 
 *     def _getNodeIntMat(self, locs, zerosOutside):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double[:, :] locations = locs
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_67_getNodeIntMat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_67_getNodeIntMat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_locs = 0;
  PyObject *__pyx_v_zerosOutside = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getNodeIntMat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_locs,&__pyx_n_s_zerosOutside,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_locs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zerosOutside)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getNodeIntMat", 1, 2, 2, 1); __PYX_ERR(0, 2122, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getNodeIntMat") < 0)) __PYX_ERR(0, 2122, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_locs = values[0];
    __pyx_v_zerosOutside = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getNodeIntMat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getNodeIntMat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_66_getNodeIntMat(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_locs, __pyx_v_zerosOutside);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_66_getNodeIntMat(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_locs, PyObject *__pyx_v_zerosOutside) {
  __Pyx_memviewslice __pyx_v_locations = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_v_dim;
  int_t __pyx_v_n_loc;
  int_t __pyx_v_n_nodes;
  __Pyx_memviewslice __pyx_v_I = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_J = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_V = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_v_ii;
  int_t __pyx_v_i;
  Cell *__pyx_v_cell;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  double __pyx_v_wx;
  double __pyx_v_wy;
  double __pyx_v_wz;
  double __pyx_v_eps;
  int __pyx_v_zeros_out;
  PyObject *__pyx_v_Rn = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_10;
  int __pyx_t_11;
  int_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  double __pyx_t_20;
  int __pyx_t_21;
  int_t __pyx_t_22;
  int_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  int_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  PyObject *__pyx_t_36 = NULL;
  __Pyx_RefNannySetupContext("_getNodeIntMat", 0);

  /* "discretize/tree_ext.pyx":2124
 *     def _getNodeIntMat(self, locs, zerosOutside):
 *         cdef:
 *             double[:, :] locations = locs             # <<<<<<<<<<<<<<
 *             int_t dim = self._dim
 *             int_t n_loc = locs.shape[0]
 */
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_v_locs);
  if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 2124, __pyx_L1_error)
  __pyx_v_locations = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* "discretize/tree_ext.pyx":2125
 *         cdef:
 *             double[:, :] locations = locs
 *             int_t dim = self._dim             # <<<<<<<<<<<<<<
 *             int_t n_loc = locs.shape[0]
 *             int_t n_nodes = 1<<dim
 */
  __pyx_t_2 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_2;

  /* "discretize/tree_ext.pyx":2126
 *             double[:, :] locations = locs
 *             int_t dim = self._dim
 *             int_t n_loc = locs.shape[0]             # <<<<<<<<<<<<<<
 *             int_t n_nodes = 1<<dim
 *             np.int64_t[:] I = np.empty(n_loc*n_nodes, dtype=np.int64)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_locs, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyInt_As_int_t(__pyx_t_4); if (unlikely((__pyx_t_2 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_n_loc = __pyx_t_2;

  /* "discretize/tree_ext.pyx":2127
 *             int_t dim = self._dim
 *             int_t n_loc = locs.shape[0]
 *             int_t n_nodes = 1<<dim             # <<<<<<<<<<<<<<
 *             np.int64_t[:] I = np.empty(n_loc*n_nodes, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(n_loc*n_nodes, dtype=np.int64)
 */
  __pyx_v_n_nodes = (1 << __pyx_v_dim);

  /* "discretize/tree_ext.pyx":2128
 *             int_t n_loc = locs.shape[0]
 *             int_t n_nodes = 1<<dim
 *             np.int64_t[:] I = np.empty(n_loc*n_nodes, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             np.int64_t[:] J = np.empty(n_loc*n_nodes, dtype=np.int64)
 *             np.float64_t[:] V = np.empty(n_loc*n_nodes, dtype=np.float64)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int_t((__pyx_v_n_loc * __pyx_v_n_nodes)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_7);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_I = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":2129
 *             int_t n_nodes = 1<<dim
 *             np.int64_t[:] I = np.empty(n_loc*n_nodes, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(n_loc*n_nodes, dtype=np.int64)             # <<<<<<<<<<<<<<
 *             np.float64_t[:] V = np.empty(n_loc*n_nodes, dtype=np.float64)
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_int_t((__pyx_v_n_loc * __pyx_v_n_nodes)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int64); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_6);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_J = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":2130
 *             np.int64_t[:] I = np.empty(n_loc*n_nodes, dtype=np.int64)
 *             np.int64_t[:] J = np.empty(n_loc*n_nodes, dtype=np.int64)
 *             np.float64_t[:] V = np.empty(n_loc*n_nodes, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *             int_t ii, i
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int_t((__pyx_v_n_loc * __pyx_v_n_nodes)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_3);
  if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_V = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "discretize/tree_ext.pyx":2136
 *             double x, y, z
 *             double wx, wy, wz
 *             double eps = 100*np.finfo(float).eps             # <<<<<<<<<<<<<<
 *             int zeros_out = zerosOutside
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_finfo); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)(&PyFloat_Type))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_eps); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_100, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_eps = __pyx_t_10;

  /* "discretize/tree_ext.pyx":2137
 *             double wx, wy, wz
 *             double eps = 100*np.finfo(float).eps
 *             int zeros_out = zerosOutside             # <<<<<<<<<<<<<<
 * 
 *         for i in range(n_loc):
 */
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_zerosOutside); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2137, __pyx_L1_error)
  __pyx_v_zeros_out = __pyx_t_11;

  /* "discretize/tree_ext.pyx":2139
 *             int zeros_out = zerosOutside
 * 
 *         for i in range(n_loc):             # <<<<<<<<<<<<<<
 *             x = locations[i, 0]
 *             y = locations[i, 1]
 */
  __pyx_t_2 = __pyx_v_n_loc;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_2; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "discretize/tree_ext.pyx":2140
 * 
 *         for i in range(n_loc):
 *             x = locations[i, 0]             # <<<<<<<<<<<<<<
 *             y = locations[i, 1]
 *             if dim==3:
 */
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_14 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_locations.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_locations.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_v_locations.shape[1];
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_14 >= __pyx_v_locations.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2140, __pyx_L1_error)
    }
    __pyx_v_x = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_locations.data + __pyx_t_13 * __pyx_v_locations.strides[0]) ) + __pyx_t_14 * __pyx_v_locations.strides[1]) )));

    /* "discretize/tree_ext.pyx":2141
 *         for i in range(n_loc):
 *             x = locations[i, 0]
 *             y = locations[i, 1]             # <<<<<<<<<<<<<<
 *             if dim==3:
 *                 z = locations[i, 1]
 */
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_16 = 1;
    __pyx_t_11 = -1;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_v_locations.shape[0];
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_15 >= __pyx_v_locations.shape[0])) __pyx_t_11 = 0;
    if (__pyx_t_16 < 0) {
      __pyx_t_16 += __pyx_v_locations.shape[1];
      if (unlikely(__pyx_t_16 < 0)) __pyx_t_11 = 1;
    } else if (unlikely(__pyx_t_16 >= __pyx_v_locations.shape[1])) __pyx_t_11 = 1;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2141, __pyx_L1_error)
    }
    __pyx_v_y = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_locations.data + __pyx_t_15 * __pyx_v_locations.strides[0]) ) + __pyx_t_16 * __pyx_v_locations.strides[1]) )));

    /* "discretize/tree_ext.pyx":2142
 *             x = locations[i, 0]
 *             y = locations[i, 1]
 *             if dim==3:             # <<<<<<<<<<<<<<
 *                 z = locations[i, 1]
 *             else:
 */
    __pyx_t_17 = ((__pyx_v_dim == 3) != 0);
    if (__pyx_t_17) {

      /* "discretize/tree_ext.pyx":2143
 *             y = locations[i, 1]
 *             if dim==3:
 *                 z = locations[i, 1]             # <<<<<<<<<<<<<<
 *             else:
 *                 z = 0.0
 */
      __pyx_t_18 = __pyx_v_i;
      __pyx_t_19 = 1;
      __pyx_t_11 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_v_locations.shape[0];
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_v_locations.shape[0])) __pyx_t_11 = 0;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_v_locations.shape[1];
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_11 = 1;
      } else if (unlikely(__pyx_t_19 >= __pyx_v_locations.shape[1])) __pyx_t_11 = 1;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2143, __pyx_L1_error)
      }
      __pyx_v_z = (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_locations.data + __pyx_t_18 * __pyx_v_locations.strides[0]) ) + __pyx_t_19 * __pyx_v_locations.strides[1]) )));

      /* "discretize/tree_ext.pyx":2142
 *             x = locations[i, 0]
 *             y = locations[i, 1]
 *             if dim==3:             # <<<<<<<<<<<<<<
 *                 z = locations[i, 1]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "discretize/tree_ext.pyx":2145
 *                 z = locations[i, 1]
 *             else:
 *                 z = 0.0             # <<<<<<<<<<<<<<
 *             #get containing (or closest) cell
 *             cell = self.tree.containing_cell(x, y, z)
 */
    /*else*/ {
      __pyx_v_z = 0.0;
    }
    __pyx_L5:;

    /* "discretize/tree_ext.pyx":2147
 *                 z = 0.0
 *             #get containing (or closest) cell
 *             cell = self.tree.containing_cell(x, y, z)             # <<<<<<<<<<<<<<
 *             #calculate weights
 *             wx = ((cell.points[3].location[0] - x)/
 */
    __pyx_v_cell = __pyx_v_self->tree->containing_cell(__pyx_v_x, __pyx_v_y, __pyx_v_z);

    /* "discretize/tree_ext.pyx":2149
 *             cell = self.tree.containing_cell(x, y, z)
 *             #calculate weights
 *             wx = ((cell.points[3].location[0] - x)/             # <<<<<<<<<<<<<<
 *                   (cell.points[3].location[0] - cell.points[0].location[0]))
 *             wy = ((cell.points[3].location[1] - y)/
 */
    __pyx_t_10 = (((__pyx_v_cell->points[3])->location[0]) - __pyx_v_x);

    /* "discretize/tree_ext.pyx":2150
 *             #calculate weights
 *             wx = ((cell.points[3].location[0] - x)/
 *                   (cell.points[3].location[0] - cell.points[0].location[0]))             # <<<<<<<<<<<<<<
 *             wy = ((cell.points[3].location[1] - y)/
 *                   (cell.points[3].location[1] - cell.points[0].location[1]))
 */
    __pyx_t_20 = (((__pyx_v_cell->points[3])->location[0]) - ((__pyx_v_cell->points[0])->location[0]));

    /* "discretize/tree_ext.pyx":2149
 *             cell = self.tree.containing_cell(x, y, z)
 *             #calculate weights
 *             wx = ((cell.points[3].location[0] - x)/             # <<<<<<<<<<<<<<
 *                   (cell.points[3].location[0] - cell.points[0].location[0]))
 *             wy = ((cell.points[3].location[1] - y)/
 */
    if (unlikely(__pyx_t_20 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 2149, __pyx_L1_error)
    }
    __pyx_v_wx = (__pyx_t_10 / __pyx_t_20);

    /* "discretize/tree_ext.pyx":2151
 *             wx = ((cell.points[3].location[0] - x)/
 *                   (cell.points[3].location[0] - cell.points[0].location[0]))
 *             wy = ((cell.points[3].location[1] - y)/             # <<<<<<<<<<<<<<
 *                   (cell.points[3].location[1] - cell.points[0].location[1]))
 *             if dim == 3:
 */
    __pyx_t_20 = (((__pyx_v_cell->points[3])->location[1]) - __pyx_v_y);

    /* "discretize/tree_ext.pyx":2152
 *                   (cell.points[3].location[0] - cell.points[0].location[0]))
 *             wy = ((cell.points[3].location[1] - y)/
 *                   (cell.points[3].location[1] - cell.points[0].location[1]))             # <<<<<<<<<<<<<<
 *             if dim == 3:
 *                 wz = ((cell.points[7].location[2] - z)/
 */
    __pyx_t_10 = (((__pyx_v_cell->points[3])->location[1]) - ((__pyx_v_cell->points[0])->location[1]));

    /* "discretize/tree_ext.pyx":2151
 *             wx = ((cell.points[3].location[0] - x)/
 *                   (cell.points[3].location[0] - cell.points[0].location[0]))
 *             wy = ((cell.points[3].location[1] - y)/             # <<<<<<<<<<<<<<
 *                   (cell.points[3].location[1] - cell.points[0].location[1]))
 *             if dim == 3:
 */
    if (unlikely(__pyx_t_10 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 2151, __pyx_L1_error)
    }
    __pyx_v_wy = (__pyx_t_20 / __pyx_t_10);

    /* "discretize/tree_ext.pyx":2153
 *             wy = ((cell.points[3].location[1] - y)/
 *                   (cell.points[3].location[1] - cell.points[0].location[1]))
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 wz = ((cell.points[7].location[2] - z)/
 *                       (cell.points[7].location[2] - cell.points[0].location[2]))
 */
    __pyx_t_17 = ((__pyx_v_dim == 3) != 0);
    if (__pyx_t_17) {

      /* "discretize/tree_ext.pyx":2154
 *                   (cell.points[3].location[1] - cell.points[0].location[1]))
 *             if dim == 3:
 *                 wz = ((cell.points[7].location[2] - z)/             # <<<<<<<<<<<<<<
 *                       (cell.points[7].location[2] - cell.points[0].location[2]))
 *             else:
 */
      __pyx_t_10 = (((__pyx_v_cell->points[7])->location[2]) - __pyx_v_z);

      /* "discretize/tree_ext.pyx":2155
 *             if dim == 3:
 *                 wz = ((cell.points[7].location[2] - z)/
 *                       (cell.points[7].location[2] - cell.points[0].location[2]))             # <<<<<<<<<<<<<<
 *             else:
 *                 wz = 1.0
 */
      __pyx_t_20 = (((__pyx_v_cell->points[7])->location[2]) - ((__pyx_v_cell->points[0])->location[2]));

      /* "discretize/tree_ext.pyx":2154
 *                   (cell.points[3].location[1] - cell.points[0].location[1]))
 *             if dim == 3:
 *                 wz = ((cell.points[7].location[2] - z)/             # <<<<<<<<<<<<<<
 *                       (cell.points[7].location[2] - cell.points[0].location[2]))
 *             else:
 */
      if (unlikely(__pyx_t_20 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 2154, __pyx_L1_error)
      }
      __pyx_v_wz = (__pyx_t_10 / __pyx_t_20);

      /* "discretize/tree_ext.pyx":2153
 *             wy = ((cell.points[3].location[1] - y)/
 *                   (cell.points[3].location[1] - cell.points[0].location[1]))
 *             if dim == 3:             # <<<<<<<<<<<<<<
 *                 wz = ((cell.points[7].location[2] - z)/
 *                       (cell.points[7].location[2] - cell.points[0].location[2]))
 */
      goto __pyx_L6;
    }

    /* "discretize/tree_ext.pyx":2157
 *                       (cell.points[7].location[2] - cell.points[0].location[2]))
 *             else:
 *                 wz = 1.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_v_wz = 1.0;
    }
    __pyx_L6:;

    /* "discretize/tree_ext.pyx":2160
 * 
 * 
 *             I[n_nodes*i:n_nodes*i + n_nodes] = i             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_8.data = __pyx_v_I.data;
    __pyx_t_8.memview = __pyx_v_I.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_8, 0);
    __pyx_t_11 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_8,
    __pyx_v_I.shape[0], __pyx_v_I.strides[0], __pyx_v_I.suboffsets[0],
    0,
    0,
    &__pyx_t_11,
    (__pyx_v_n_nodes * __pyx_v_i),
    ((__pyx_v_n_nodes * __pyx_v_i) + __pyx_v_n_nodes),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 2160, __pyx_L1_error)
}

{
        __pyx_t_5numpy_int64_t __pyx_temp_scalar = __pyx_v_i;
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_8.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_8.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_8.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_int64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "discretize/tree_ext.pyx":2163
 * 
 * 
 *             if zeros_out:             # <<<<<<<<<<<<<<
 *                 if (wx < -eps or wy < -eps or wz < -eps or
 *                     wx>1 + eps or wy > 1 + eps or wz > 1 + eps):
 */
    __pyx_t_17 = (__pyx_v_zeros_out != 0);
    if (__pyx_t_17) {

      /* "discretize/tree_ext.pyx":2164
 * 
 *             if zeros_out:
 *                 if (wx < -eps or wy < -eps or wz < -eps or             # <<<<<<<<<<<<<<
 *                     wx>1 + eps or wy > 1 + eps or wz > 1 + eps):
 *                     for ii in range(n_nodes):
 */
      __pyx_t_21 = ((__pyx_v_wx < (-__pyx_v_eps)) != 0);
      if (!__pyx_t_21) {
      } else {
        __pyx_t_17 = __pyx_t_21;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_21 = ((__pyx_v_wy < (-__pyx_v_eps)) != 0);
      if (!__pyx_t_21) {
      } else {
        __pyx_t_17 = __pyx_t_21;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_21 = ((__pyx_v_wz < (-__pyx_v_eps)) != 0);
      if (!__pyx_t_21) {
      } else {
        __pyx_t_17 = __pyx_t_21;
        goto __pyx_L9_bool_binop_done;
      }

      /* "discretize/tree_ext.pyx":2165
 *             if zeros_out:
 *                 if (wx < -eps or wy < -eps or wz < -eps or
 *                     wx>1 + eps or wy > 1 + eps or wz > 1 + eps):             # <<<<<<<<<<<<<<
 *                     for ii in range(n_nodes):
 *                         J[n_nodes*i + ii] = 0
 */
      __pyx_t_21 = ((__pyx_v_wx > (1.0 + __pyx_v_eps)) != 0);
      if (!__pyx_t_21) {
      } else {
        __pyx_t_17 = __pyx_t_21;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_21 = ((__pyx_v_wy > (1.0 + __pyx_v_eps)) != 0);
      if (!__pyx_t_21) {
      } else {
        __pyx_t_17 = __pyx_t_21;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_21 = ((__pyx_v_wz > (1.0 + __pyx_v_eps)) != 0);
      __pyx_t_17 = __pyx_t_21;
      __pyx_L9_bool_binop_done:;

      /* "discretize/tree_ext.pyx":2164
 * 
 *             if zeros_out:
 *                 if (wx < -eps or wy < -eps or wz < -eps or             # <<<<<<<<<<<<<<
 *                     wx>1 + eps or wy > 1 + eps or wz > 1 + eps):
 *                     for ii in range(n_nodes):
 */
      if (__pyx_t_17) {

        /* "discretize/tree_ext.pyx":2166
 *                 if (wx < -eps or wy < -eps or wz < -eps or
 *                     wx>1 + eps or wy > 1 + eps or wz > 1 + eps):
 *                     for ii in range(n_nodes):             # <<<<<<<<<<<<<<
 *                         J[n_nodes*i + ii] = 0
 *                         V[n_nodes*i + ii] = 0.0
 */
        __pyx_t_22 = __pyx_v_n_nodes;
        for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
          __pyx_v_ii = __pyx_t_23;

          /* "discretize/tree_ext.pyx":2167
 *                     wx>1 + eps or wy > 1 + eps or wz > 1 + eps):
 *                     for ii in range(n_nodes):
 *                         J[n_nodes*i + ii] = 0             # <<<<<<<<<<<<<<
 *                         V[n_nodes*i + ii] = 0.0
 *                     continue
 */
          __pyx_t_24 = ((__pyx_v_n_nodes * __pyx_v_i) + __pyx_v_ii);
          __pyx_t_11 = -1;
          if (__pyx_t_24 < 0) {
            __pyx_t_24 += __pyx_v_J.shape[0];
            if (unlikely(__pyx_t_24 < 0)) __pyx_t_11 = 0;
          } else if (unlikely(__pyx_t_24 >= __pyx_v_J.shape[0])) __pyx_t_11 = 0;
          if (unlikely(__pyx_t_11 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_11);
            __PYX_ERR(0, 2167, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_24 * __pyx_v_J.strides[0]) )) = 0;

          /* "discretize/tree_ext.pyx":2168
 *                     for ii in range(n_nodes):
 *                         J[n_nodes*i + ii] = 0
 *                         V[n_nodes*i + ii] = 0.0             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
          __pyx_t_25 = ((__pyx_v_n_nodes * __pyx_v_i) + __pyx_v_ii);
          __pyx_t_11 = -1;
          if (__pyx_t_25 < 0) {
            __pyx_t_25 += __pyx_v_V.shape[0];
            if (unlikely(__pyx_t_25 < 0)) __pyx_t_11 = 0;
          } else if (unlikely(__pyx_t_25 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
          if (unlikely(__pyx_t_11 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_11);
            __PYX_ERR(0, 2168, __pyx_L1_error)
          }
          *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_25 * __pyx_v_V.strides[0]) )) = 0.0;
        }

        /* "discretize/tree_ext.pyx":2169
 *                         J[n_nodes*i + ii] = 0
 *                         V[n_nodes*i + ii] = 0.0
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             wx = _clip01(wx)
 */
        goto __pyx_L3_continue;

        /* "discretize/tree_ext.pyx":2164
 * 
 *             if zeros_out:
 *                 if (wx < -eps or wy < -eps or wz < -eps or             # <<<<<<<<<<<<<<
 *                     wx>1 + eps or wy > 1 + eps or wz > 1 + eps):
 *                     for ii in range(n_nodes):
 */
      }

      /* "discretize/tree_ext.pyx":2163
 * 
 * 
 *             if zeros_out:             # <<<<<<<<<<<<<<
 *                 if (wx < -eps or wy < -eps or wz < -eps or
 *                     wx>1 + eps or wy > 1 + eps or wz > 1 + eps):
 */
    }

    /* "discretize/tree_ext.pyx":2171
 *                     continue
 * 
 *             wx = _clip01(wx)             # <<<<<<<<<<<<<<
 *             wy = _clip01(wy)
 *             wz = _clip01(wz)
 */
    __pyx_v_wx = __pyx_f_10discretize_8tree_ext__clip01(__pyx_v_wx);

    /* "discretize/tree_ext.pyx":2172
 * 
 *             wx = _clip01(wx)
 *             wy = _clip01(wy)             # <<<<<<<<<<<<<<
 *             wz = _clip01(wz)
 *             for ii in range(n_nodes):
 */
    __pyx_v_wy = __pyx_f_10discretize_8tree_ext__clip01(__pyx_v_wy);

    /* "discretize/tree_ext.pyx":2173
 *             wx = _clip01(wx)
 *             wy = _clip01(wy)
 *             wz = _clip01(wz)             # <<<<<<<<<<<<<<
 *             for ii in range(n_nodes):
 *                 J[n_nodes*i + ii] = cell.points[ii].index
 */
    __pyx_v_wz = __pyx_f_10discretize_8tree_ext__clip01(__pyx_v_wz);

    /* "discretize/tree_ext.pyx":2174
 *             wy = _clip01(wy)
 *             wz = _clip01(wz)
 *             for ii in range(n_nodes):             # <<<<<<<<<<<<<<
 *                 J[n_nodes*i + ii] = cell.points[ii].index
 * 
 */
    __pyx_t_22 = __pyx_v_n_nodes;
    for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
      __pyx_v_ii = __pyx_t_23;

      /* "discretize/tree_ext.pyx":2175
 *             wz = _clip01(wz)
 *             for ii in range(n_nodes):
 *                 J[n_nodes*i + ii] = cell.points[ii].index             # <<<<<<<<<<<<<<
 * 
 *             V[n_nodes*i    ] = wx*wy*wz
 */
      __pyx_t_26 = (__pyx_v_cell->points[__pyx_v_ii])->index;
      __pyx_t_27 = ((__pyx_v_n_nodes * __pyx_v_i) + __pyx_v_ii);
      __pyx_t_11 = -1;
      if (__pyx_t_27 < 0) {
        __pyx_t_27 += __pyx_v_J.shape[0];
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_27 >= __pyx_v_J.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2175, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_J.data + __pyx_t_27 * __pyx_v_J.strides[0]) )) = __pyx_t_26;
    }

    /* "discretize/tree_ext.pyx":2177
 *                 J[n_nodes*i + ii] = cell.points[ii].index
 * 
 *             V[n_nodes*i    ] = wx*wy*wz             # <<<<<<<<<<<<<<
 *             V[n_nodes*i + 1] = (1 - wx)*wy*wz
 *             V[n_nodes*i + 2] = wx*(1 - wy)*wz
 */
    __pyx_t_28 = (__pyx_v_n_nodes * __pyx_v_i);
    __pyx_t_11 = -1;
    if (__pyx_t_28 < 0) {
      __pyx_t_28 += __pyx_v_V.shape[0];
      if (unlikely(__pyx_t_28 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_28 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2177, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_28 * __pyx_v_V.strides[0]) )) = ((__pyx_v_wx * __pyx_v_wy) * __pyx_v_wz);

    /* "discretize/tree_ext.pyx":2178
 * 
 *             V[n_nodes*i    ] = wx*wy*wz
 *             V[n_nodes*i + 1] = (1 - wx)*wy*wz             # <<<<<<<<<<<<<<
 *             V[n_nodes*i + 2] = wx*(1 - wy)*wz
 *             V[n_nodes*i + 3] = (1 - wx)*(1 - wy)*wz
 */
    __pyx_t_29 = ((__pyx_v_n_nodes * __pyx_v_i) + 1);
    __pyx_t_11 = -1;
    if (__pyx_t_29 < 0) {
      __pyx_t_29 += __pyx_v_V.shape[0];
      if (unlikely(__pyx_t_29 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_29 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2178, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_29 * __pyx_v_V.strides[0]) )) = (((1.0 - __pyx_v_wx) * __pyx_v_wy) * __pyx_v_wz);

    /* "discretize/tree_ext.pyx":2179
 *             V[n_nodes*i    ] = wx*wy*wz
 *             V[n_nodes*i + 1] = (1 - wx)*wy*wz
 *             V[n_nodes*i + 2] = wx*(1 - wy)*wz             # <<<<<<<<<<<<<<
 *             V[n_nodes*i + 3] = (1 - wx)*(1 - wy)*wz
 *             if dim==3:
 */
    __pyx_t_30 = ((__pyx_v_n_nodes * __pyx_v_i) + 2);
    __pyx_t_11 = -1;
    if (__pyx_t_30 < 0) {
      __pyx_t_30 += __pyx_v_V.shape[0];
      if (unlikely(__pyx_t_30 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_30 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2179, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_30 * __pyx_v_V.strides[0]) )) = ((__pyx_v_wx * (1.0 - __pyx_v_wy)) * __pyx_v_wz);

    /* "discretize/tree_ext.pyx":2180
 *             V[n_nodes*i + 1] = (1 - wx)*wy*wz
 *             V[n_nodes*i + 2] = wx*(1 - wy)*wz
 *             V[n_nodes*i + 3] = (1 - wx)*(1 - wy)*wz             # <<<<<<<<<<<<<<
 *             if dim==3:
 *                 V[n_nodes*i + 4] = wx*wy*(1 - wz)
 */
    __pyx_t_31 = ((__pyx_v_n_nodes * __pyx_v_i) + 3);
    __pyx_t_11 = -1;
    if (__pyx_t_31 < 0) {
      __pyx_t_31 += __pyx_v_V.shape[0];
      if (unlikely(__pyx_t_31 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_31 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 2180, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_31 * __pyx_v_V.strides[0]) )) = (((1.0 - __pyx_v_wx) * (1.0 - __pyx_v_wy)) * __pyx_v_wz);

    /* "discretize/tree_ext.pyx":2181
 *             V[n_nodes*i + 2] = wx*(1 - wy)*wz
 *             V[n_nodes*i + 3] = (1 - wx)*(1 - wy)*wz
 *             if dim==3:             # <<<<<<<<<<<<<<
 *                 V[n_nodes*i + 4] = wx*wy*(1 - wz)
 *                 V[n_nodes*i + 5] = (1 - wx)*wy*(1 - wz)
 */
    __pyx_t_17 = ((__pyx_v_dim == 3) != 0);
    if (__pyx_t_17) {

      /* "discretize/tree_ext.pyx":2182
 *             V[n_nodes*i + 3] = (1 - wx)*(1 - wy)*wz
 *             if dim==3:
 *                 V[n_nodes*i + 4] = wx*wy*(1 - wz)             # <<<<<<<<<<<<<<
 *                 V[n_nodes*i + 5] = (1 - wx)*wy*(1 - wz)
 *                 V[n_nodes*i + 6] = wx*(1 - wy)*(1 - wz)
 */
      __pyx_t_32 = ((__pyx_v_n_nodes * __pyx_v_i) + 4);
      __pyx_t_11 = -1;
      if (__pyx_t_32 < 0) {
        __pyx_t_32 += __pyx_v_V.shape[0];
        if (unlikely(__pyx_t_32 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_32 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2182, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_32 * __pyx_v_V.strides[0]) )) = ((__pyx_v_wx * __pyx_v_wy) * (1.0 - __pyx_v_wz));

      /* "discretize/tree_ext.pyx":2183
 *             if dim==3:
 *                 V[n_nodes*i + 4] = wx*wy*(1 - wz)
 *                 V[n_nodes*i + 5] = (1 - wx)*wy*(1 - wz)             # <<<<<<<<<<<<<<
 *                 V[n_nodes*i + 6] = wx*(1 - wy)*(1 - wz)
 *                 V[n_nodes*i + 7] = (1 - wx)*(1 - wy)*(1 - wz)
 */
      __pyx_t_33 = ((__pyx_v_n_nodes * __pyx_v_i) + 5);
      __pyx_t_11 = -1;
      if (__pyx_t_33 < 0) {
        __pyx_t_33 += __pyx_v_V.shape[0];
        if (unlikely(__pyx_t_33 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_33 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2183, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_33 * __pyx_v_V.strides[0]) )) = (((1.0 - __pyx_v_wx) * __pyx_v_wy) * (1.0 - __pyx_v_wz));

      /* "discretize/tree_ext.pyx":2184
 *                 V[n_nodes*i + 4] = wx*wy*(1 - wz)
 *                 V[n_nodes*i + 5] = (1 - wx)*wy*(1 - wz)
 *                 V[n_nodes*i + 6] = wx*(1 - wy)*(1 - wz)             # <<<<<<<<<<<<<<
 *                 V[n_nodes*i + 7] = (1 - wx)*(1 - wy)*(1 - wz)
 * 
 */
      __pyx_t_34 = ((__pyx_v_n_nodes * __pyx_v_i) + 6);
      __pyx_t_11 = -1;
      if (__pyx_t_34 < 0) {
        __pyx_t_34 += __pyx_v_V.shape[0];
        if (unlikely(__pyx_t_34 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_34 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2184, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_34 * __pyx_v_V.strides[0]) )) = ((__pyx_v_wx * (1.0 - __pyx_v_wy)) * (1.0 - __pyx_v_wz));

      /* "discretize/tree_ext.pyx":2185
 *                 V[n_nodes*i + 5] = (1 - wx)*wy*(1 - wz)
 *                 V[n_nodes*i + 6] = wx*(1 - wy)*(1 - wz)
 *                 V[n_nodes*i + 7] = (1 - wx)*(1 - wy)*(1 - wz)             # <<<<<<<<<<<<<<
 * 
 *         Rn = self._deflate_nodes()
 */
      __pyx_t_35 = ((__pyx_v_n_nodes * __pyx_v_i) + 7);
      __pyx_t_11 = -1;
      if (__pyx_t_35 < 0) {
        __pyx_t_35 += __pyx_v_V.shape[0];
        if (unlikely(__pyx_t_35 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_35 >= __pyx_v_V.shape[0])) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(0, 2185, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_V.data + __pyx_t_35 * __pyx_v_V.strides[0]) )) = (((1.0 - __pyx_v_wx) * (1.0 - __pyx_v_wy)) * (1.0 - __pyx_v_wz));

      /* "discretize/tree_ext.pyx":2181
 *             V[n_nodes*i + 2] = wx*(1 - wy)*wz
 *             V[n_nodes*i + 3] = (1 - wx)*(1 - wy)*wz
 *             if dim==3:             # <<<<<<<<<<<<<<
 *                 V[n_nodes*i + 4] = wx*wy*(1 - wz)
 *                 V[n_nodes*i + 5] = (1 - wx)*wy*(1 - wz)
 */
    }
    __pyx_L3_continue:;
  }

  /* "discretize/tree_ext.pyx":2187
 *                 V[n_nodes*i + 7] = (1 - wx)*(1 - wy)*(1 - wz)
 * 
 *         Rn = self._deflate_nodes()             # <<<<<<<<<<<<<<
 *         return sp.csr_matrix((V, (I, J)), shape=(locs.shape[0],self.ntN))*Rn
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_deflate_nodes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2187, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2187, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_Rn = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2188
 * 
 *         Rn = self._deflate_nodes()
 *         return sp.csr_matrix((V, (I, J)), shape=(locs.shape[0],self.ntN))*Rn             # <<<<<<<<<<<<<<
 * 
 *     def plotGrid(self, ax=None, showIt=False,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_V, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_I, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_J, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
  __pyx_t_7 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_locs, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ntN); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_36 = PyTuple_New(2); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_36, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_36, 1, __pyx_t_3);
  __pyx_t_7 = 0;
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_shape, __pyx_t_36) < 0) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
  __pyx_t_36 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_36, __pyx_v_Rn); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":2122
 *                              shape=(n_points,n_grid))
 * 
 *     def _getNodeIntMat(self, locs, zerosOutside):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double[:, :] locations = locs
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._getNodeIntMat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_locations, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_I, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_J, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_V, 1);
  __Pyx_XDECREF(__pyx_v_Rn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2190
 *         return sp.csr_matrix((V, (I, J)), shape=(locs.shape[0],self.ntN))*Rn
 * 
 *     def plotGrid(self, ax=None, showIt=False,             # <<<<<<<<<<<<<<
 *         grid=True,
 *         cells=False, cellLine=False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_69plotGrid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_69plotGrid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ax = 0;
  PyObject *__pyx_v_showIt = 0;
  PyObject *__pyx_v_grid = 0;
  PyObject *__pyx_v_cells = 0;
  PyObject *__pyx_v_cellLine = 0;
  PyObject *__pyx_v_nodes = 0;
  PyObject *__pyx_v_facesX = 0;
  PyObject *__pyx_v_facesY = 0;
  PyObject *__pyx_v_facesZ = 0;
  PyObject *__pyx_v_edgesX = 0;
  PyObject *__pyx_v_edgesY = 0;
  PyObject *__pyx_v_edgesZ = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plotGrid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ax,&__pyx_n_s_showIt,&__pyx_n_s_grid,&__pyx_n_s_cells,&__pyx_n_s_cellLine,&__pyx_n_s_nodes,&__pyx_n_s_facesX,&__pyx_n_s_facesY,&__pyx_n_s_facesZ,&__pyx_n_s_edgesX,&__pyx_n_s_edgesY,&__pyx_n_s_edgesZ,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_False);

    /* "discretize/tree_ext.pyx":2191
 * 
 *     def plotGrid(self, ax=None, showIt=False,
 *         grid=True,             # <<<<<<<<<<<<<<
 *         cells=False, cellLine=False,
 *         nodes = False,
 */
    values[2] = ((PyObject *)Py_True);

    /* "discretize/tree_ext.pyx":2192
 *     def plotGrid(self, ax=None, showIt=False,
 *         grid=True,
 *         cells=False, cellLine=False,             # <<<<<<<<<<<<<<
 *         nodes = False,
 *         facesX = False, facesY = False, facesZ = False,
 */
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_False);

    /* "discretize/tree_ext.pyx":2193
 *         grid=True,
 *         cells=False, cellLine=False,
 *         nodes = False,             # <<<<<<<<<<<<<<
 *         facesX = False, facesY = False, facesZ = False,
 *         edgesX = False, edgesY = False, edgesZ = False):
 */
    values[5] = ((PyObject *)Py_False);

    /* "discretize/tree_ext.pyx":2194
 *         cells=False, cellLine=False,
 *         nodes = False,
 *         facesX = False, facesY = False, facesZ = False,             # <<<<<<<<<<<<<<
 *         edgesX = False, edgesY = False, edgesZ = False):
 * 
 */
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)Py_False);
    values[8] = ((PyObject *)Py_False);

    /* "discretize/tree_ext.pyx":2195
 *         nodes = False,
 *         facesX = False, facesY = False, facesZ = False,
 *         edgesX = False, edgesY = False, edgesZ = False):             # <<<<<<<<<<<<<<
 * 
 *         import matplotlib
 */
    values[9] = ((PyObject *)Py_False);
    values[10] = ((PyObject *)Py_False);
    values[11] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ax);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_showIt);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_grid);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cells);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cellLine);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodes);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_facesX);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_facesY);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_facesZ);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edgesX);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edgesY);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edgesZ);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plotGrid") < 0)) __PYX_ERR(0, 2190, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ax = values[0];
    __pyx_v_showIt = values[1];
    __pyx_v_grid = values[2];
    __pyx_v_cells = values[3];
    __pyx_v_cellLine = values[4];
    __pyx_v_nodes = values[5];
    __pyx_v_facesX = values[6];
    __pyx_v_facesY = values[7];
    __pyx_v_facesZ = values[8];
    __pyx_v_edgesX = values[9];
    __pyx_v_edgesY = values[10];
    __pyx_v_edgesZ = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plotGrid", 0, 0, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.plotGrid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_68plotGrid(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_ax, __pyx_v_showIt, __pyx_v_grid, __pyx_v_cells, __pyx_v_cellLine, __pyx_v_nodes, __pyx_v_facesX, __pyx_v_facesY, __pyx_v_facesZ, __pyx_v_edgesX, __pyx_v_edgesY, __pyx_v_edgesZ);

  /* "discretize/tree_ext.pyx":2190
 *         return sp.csr_matrix((V, (I, J)), shape=(locs.shape[0],self.ntN))*Rn
 * 
 *     def plotGrid(self, ax=None, showIt=False,             # <<<<<<<<<<<<<<
 *         grid=True,
 *         cells=False, cellLine=False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_68plotGrid(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_ax, PyObject *__pyx_v_showIt, PyObject *__pyx_v_grid, PyObject *__pyx_v_cells, PyObject *__pyx_v_cellLine, PyObject *__pyx_v_nodes, PyObject *__pyx_v_facesX, PyObject *__pyx_v_facesY, PyObject *__pyx_v_facesZ, PyObject *__pyx_v_edgesX, PyObject *__pyx_v_edgesY, PyObject *__pyx_v_edgesZ) {
  PyObject *__pyx_v_matplotlib = NULL;
  PyObject *__pyx_v_plt = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_colors = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_cmx = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_Axes3D = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_fig = NULL;
  int_t __pyx_v_i;
  int_t __pyx_v_offset;
  Node *__pyx_v_p1;
  Node *__pyx_v_p2;
  Edge *__pyx_v_edge;
  PyObject *__pyx_v_X = NULL;
  PyObject *__pyx_v_Y = NULL;
  std::pair<int_t,Edge *>  __pyx_v_it;
  PyObject *__pyx_v_Z = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  std::map<int_t,Edge *> ::iterator __pyx_t_8;
  edge_map_t *__pyx_t_9;
  std::pair<int_t,Edge *>  __pyx_t_10;
  Edge *__pyx_t_11;
  int_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("plotGrid", 0);
  __Pyx_INCREF(__pyx_v_ax);

  /* "discretize/tree_ext.pyx":2197
 *         edgesX = False, edgesY = False, edgesZ = False):
 * 
 *         import matplotlib             # <<<<<<<<<<<<<<
 *         if ax is None:
 *             import matplotlib.pyplot as plt
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_matplotlib, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_matplotlib = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":2198
 * 
 *         import matplotlib
 *         if ax is None:             # <<<<<<<<<<<<<<
 *             import matplotlib.pyplot as plt
 *             import matplotlib.colors as colors
 */
  __pyx_t_2 = (__pyx_v_ax == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2199
 *         import matplotlib
 *         if ax is None:
 *             import matplotlib.pyplot as plt             # <<<<<<<<<<<<<<
 *             import matplotlib.colors as colors
 *             import matplotlib.cm as cmx
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s__54);
    __Pyx_GIVEREF(__pyx_n_s__54);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__54);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_matplotlib_pyplot, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_plt = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "discretize/tree_ext.pyx":2200
 *         if ax is None:
 *             import matplotlib.pyplot as plt
 *             import matplotlib.colors as colors             # <<<<<<<<<<<<<<
 *             import matplotlib.cm as cmx
 *             if(self._dim == 2):
 */
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_s__54);
    __Pyx_GIVEREF(__pyx_n_s__54);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s__54);
    __pyx_t_1 = __Pyx_Import(__pyx_n_s_matplotlib_colors, __pyx_t_4, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_colors = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "discretize/tree_ext.pyx":2201
 *             import matplotlib.pyplot as plt
 *             import matplotlib.colors as colors
 *             import matplotlib.cm as cmx             # <<<<<<<<<<<<<<
 *             if(self._dim == 2):
 *                 ax = plt.subplot(111)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s__54);
    __Pyx_GIVEREF(__pyx_n_s__54);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__54);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_matplotlib_cm, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_cmx = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "discretize/tree_ext.pyx":2202
 *             import matplotlib.colors as colors
 *             import matplotlib.cm as cmx
 *             if(self._dim == 2):             # <<<<<<<<<<<<<<
 *                 ax = plt.subplot(111)
 *             else:
 */
    __pyx_t_3 = ((__pyx_v_self->_dim == 2) != 0);
    if (__pyx_t_3) {

      /* "discretize/tree_ext.pyx":2203
 *             import matplotlib.cm as cmx
 *             if(self._dim == 2):
 *                 ax = plt.subplot(111)             # <<<<<<<<<<<<<<
 *             else:
 *                 from mpl_toolkits.mplot3d import Axes3D
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_subplot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_ax, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "discretize/tree_ext.pyx":2202
 *             import matplotlib.colors as colors
 *             import matplotlib.cm as cmx
 *             if(self._dim == 2):             # <<<<<<<<<<<<<<
 *                 ax = plt.subplot(111)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "discretize/tree_ext.pyx":2205
 *                 ax = plt.subplot(111)
 *             else:
 *                 from mpl_toolkits.mplot3d import Axes3D             # <<<<<<<<<<<<<<
 *                 ax = plt.subplot(111, projection='3d')
 *         else:
 */
    /*else*/ {
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_Axes3D);
      __Pyx_GIVEREF(__pyx_n_s_Axes3D);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Axes3D);
      __pyx_t_4 = __Pyx_Import(__pyx_n_s_mpl_toolkits_mplot3d, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_Axes3D); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_Axes3D = __pyx_t_1;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "discretize/tree_ext.pyx":2206
 *             else:
 *                 from mpl_toolkits.mplot3d import Axes3D
 *                 ax = plt.subplot(111, projection='3d')             # <<<<<<<<<<<<<<
 *         else:
 *             assert isinstance(ax,matplotlib.axes.Axes), "ax must be an Axes!"
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_subplot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_projection, __pyx_kp_s_3d) < 0) __PYX_ERR(0, 2206, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__56, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_ax, __pyx_t_5);
      __pyx_t_5 = 0;
    }
    __pyx_L4:;

    /* "discretize/tree_ext.pyx":2198
 * 
 *         import matplotlib
 *         if ax is None:             # <<<<<<<<<<<<<<
 *             import matplotlib.pyplot as plt
 *             import matplotlib.colors as colors
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":2208
 *                 ax = plt.subplot(111, projection='3d')
 *         else:
 *             assert isinstance(ax,matplotlib.axes.Axes), "ax must be an Axes!"             # <<<<<<<<<<<<<<
 *             fig = ax.figure
 * 
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_matplotlib, __pyx_n_s_axes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Axes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_3 = PyObject_IsInstance(__pyx_v_ax, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 2208, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_3 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_ax_must_be_an_Axes);
        __PYX_ERR(0, 2208, __pyx_L1_error)
      }
    }
    #endif

    /* "discretize/tree_ext.pyx":2209
 *         else:
 *             assert isinstance(ax,matplotlib.axes.Axes), "ax must be an Axes!"
 *             fig = ax.figure             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_figure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_fig = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "discretize/tree_ext.pyx":2217
 *             Edge *edge
 * 
 *         if grid:             # <<<<<<<<<<<<<<
 *             if(self._dim) == 2:
 *                 X = np.empty((self.nE*3))
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_grid); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2217, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2218
 * 
 *         if grid:
 *             if(self._dim) == 2:             # <<<<<<<<<<<<<<
 *                 X = np.empty((self.nE*3))
 *                 Y = np.empty((self.nE*3))
 */
    __pyx_t_3 = ((__pyx_v_self->_dim == 2) != 0);
    if (__pyx_t_3) {

      /* "discretize/tree_ext.pyx":2219
 *         if grid:
 *             if(self._dim) == 2:
 *                 X = np.empty((self.nE*3))             # <<<<<<<<<<<<<<
 *                 Y = np.empty((self.nE*3))
 *                 for it in self.tree.edges_x:
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __pyx_int_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2219, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2219, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2219, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2219, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2219, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_X = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "discretize/tree_ext.pyx":2220
 *             if(self._dim) == 2:
 *                 X = np.empty((self.nE*3))
 *                 Y = np.empty((self.nE*3))             # <<<<<<<<<<<<<<
 *                 for it in self.tree.edges_x:
 *                     edge = it.second
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_int_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2220, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_Y = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "discretize/tree_ext.pyx":2221
 *                 X = np.empty((self.nE*3))
 *                 Y = np.empty((self.nE*3))
 *                 for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
      __pyx_t_9 = &__pyx_v_self->tree->edges_x;
      __pyx_t_8 = __pyx_t_9->begin();
      for (;;) {
        if (!(__pyx_t_8 != __pyx_t_9->end())) break;
        __pyx_t_10 = *__pyx_t_8;
        ++__pyx_t_8;
        __pyx_v_it = __pyx_t_10;

        /* "discretize/tree_ext.pyx":2222
 *                 Y = np.empty((self.nE*3))
 *                 for it in self.tree.edges_x:
 *                     edge = it.second             # <<<<<<<<<<<<<<
 *                     if(edge.hanging): continue
 *                     i = edge.index*3
 */
        __pyx_t_11 = __pyx_v_it.second;
        __pyx_v_edge = __pyx_t_11;

        /* "discretize/tree_ext.pyx":2223
 *                 for it in self.tree.edges_x:
 *                     edge = it.second
 *                     if(edge.hanging): continue             # <<<<<<<<<<<<<<
 *                     i = edge.index*3
 *                     p1 = edge.points[0]
 */
        __pyx_t_3 = (__pyx_v_edge->hanging != 0);
        if (__pyx_t_3) {
          goto __pyx_L7_continue;
        }

        /* "discretize/tree_ext.pyx":2224
 *                     edge = it.second
 *                     if(edge.hanging): continue
 *                     i = edge.index*3             # <<<<<<<<<<<<<<
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 */
        __pyx_v_i = (__pyx_v_edge->index * 3);

        /* "discretize/tree_ext.pyx":2225
 *                     if(edge.hanging): continue
 *                     i = edge.index*3
 *                     p1 = edge.points[0]             # <<<<<<<<<<<<<<
 *                     p2 = edge.points[1]
 *                     X[i:i + 3] = [p1.location[0], p2.location[0], np.nan]
 */
        __pyx_v_p1 = (__pyx_v_edge->points[0]);

        /* "discretize/tree_ext.pyx":2226
 *                     i = edge.index*3
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]             # <<<<<<<<<<<<<<
 *                     X[i:i + 3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i:i + 3] = [p1.location[1], p2.location[1], np.nan]
 */
        __pyx_v_p2 = (__pyx_v_edge->points[1]);

        /* "discretize/tree_ext.pyx":2227
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 *                     X[i:i + 3] = [p1.location[0], p2.location[0], np.nan]             # <<<<<<<<<<<<<<
 *                     Y[i:i + 3] = [p1.location[1], p2.location[1], np.nan]
 * 
 */
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_p1->location[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_p2->location[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2227, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
        __pyx_t_1 = 0;
        __pyx_t_7 = 0;
        __pyx_t_6 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_X, __pyx_t_5, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2227, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "discretize/tree_ext.pyx":2228
 *                     p2 = edge.points[1]
 *                     X[i:i + 3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i:i + 3] = [p1.location[1], p2.location[1], np.nan]             # <<<<<<<<<<<<<<
 * 
 *                 offset = self.nEx
 */
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_p1->location[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_p2->location[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_1 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_Y, __pyx_t_7, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2228, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "discretize/tree_ext.pyx":2221
 *                 X = np.empty((self.nE*3))
 *                 Y = np.empty((self.nE*3))
 *                 for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
        __pyx_L7_continue:;
      }

      /* "discretize/tree_ext.pyx":2230
 *                     Y[i:i + 3] = [p1.location[1], p2.location[1], np.nan]
 * 
 *                 offset = self.nEx             # <<<<<<<<<<<<<<
 *                 for it in self.tree.edges_y:
 *                     edge = it.second
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyInt_As_int_t(__pyx_t_7); if (unlikely((__pyx_t_12 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2230, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_offset = __pyx_t_12;

      /* "discretize/tree_ext.pyx":2231
 * 
 *                 offset = self.nEx
 *                 for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
      __pyx_t_9 = &__pyx_v_self->tree->edges_y;
      __pyx_t_8 = __pyx_t_9->begin();
      for (;;) {
        if (!(__pyx_t_8 != __pyx_t_9->end())) break;
        __pyx_t_10 = *__pyx_t_8;
        ++__pyx_t_8;
        __pyx_v_it = __pyx_t_10;

        /* "discretize/tree_ext.pyx":2232
 *                 offset = self.nEx
 *                 for it in self.tree.edges_y:
 *                     edge = it.second             # <<<<<<<<<<<<<<
 *                     if(edge.hanging): continue
 *                     i = (edge.index + offset)*3
 */
        __pyx_t_11 = __pyx_v_it.second;
        __pyx_v_edge = __pyx_t_11;

        /* "discretize/tree_ext.pyx":2233
 *                 for it in self.tree.edges_y:
 *                     edge = it.second
 *                     if(edge.hanging): continue             # <<<<<<<<<<<<<<
 *                     i = (edge.index + offset)*3
 *                     p1 = edge.points[0]
 */
        __pyx_t_3 = (__pyx_v_edge->hanging != 0);
        if (__pyx_t_3) {
          goto __pyx_L10_continue;
        }

        /* "discretize/tree_ext.pyx":2234
 *                     edge = it.second
 *                     if(edge.hanging): continue
 *                     i = (edge.index + offset)*3             # <<<<<<<<<<<<<<
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 */
        __pyx_v_i = ((__pyx_v_edge->index + __pyx_v_offset) * 3);

        /* "discretize/tree_ext.pyx":2235
 *                     if(edge.hanging): continue
 *                     i = (edge.index + offset)*3
 *                     p1 = edge.points[0]             # <<<<<<<<<<<<<<
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 */
        __pyx_v_p1 = (__pyx_v_edge->points[0]);

        /* "discretize/tree_ext.pyx":2236
 *                     i = (edge.index + offset)*3
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]             # <<<<<<<<<<<<<<
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 */
        __pyx_v_p2 = (__pyx_v_edge->points[1]);

        /* "discretize/tree_ext.pyx":2237
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]             # <<<<<<<<<<<<<<
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 * 
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_p1->location[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_p2->location[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_nan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2237, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
        __pyx_t_7 = 0;
        __pyx_t_1 = 0;
        __pyx_t_5 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_X, __pyx_t_6, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2237, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "discretize/tree_ext.pyx":2238
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]             # <<<<<<<<<<<<<<
 * 
 *                 ax.plot(X, Y, 'b-')
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_p1->location[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_p2->location[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_nan); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        __pyx_t_7 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_Y, __pyx_t_1, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2238, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "discretize/tree_ext.pyx":2231
 * 
 *                 offset = self.nEx
 *                 for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
        __pyx_L10_continue:;
      }

      /* "discretize/tree_ext.pyx":2240
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 * 
 *                 ax.plot(X, Y, 'b-')             # <<<<<<<<<<<<<<
 *             else:
 *                 X = np.empty((self.nE*3))
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_X, __pyx_v_Y, __pyx_kp_s_b};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2240, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_X, __pyx_v_Y, __pyx_kp_s_b};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2240, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_v_X);
        __Pyx_GIVEREF(__pyx_v_X);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_13, __pyx_v_X);
        __Pyx_INCREF(__pyx_v_Y);
        __Pyx_GIVEREF(__pyx_v_Y);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_13, __pyx_v_Y);
        __Pyx_INCREF(__pyx_kp_s_b);
        __Pyx_GIVEREF(__pyx_kp_s_b);
        PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_13, __pyx_kp_s_b);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "discretize/tree_ext.pyx":2218
 * 
 *         if grid:
 *             if(self._dim) == 2:             # <<<<<<<<<<<<<<
 *                 X = np.empty((self.nE*3))
 *                 Y = np.empty((self.nE*3))
 */
      goto __pyx_L6;
    }

    /* "discretize/tree_ext.pyx":2242
 *                 ax.plot(X, Y, 'b-')
 *             else:
 *                 X = np.empty((self.nE*3))             # <<<<<<<<<<<<<<
 *                 Y = np.empty((self.nE*3))
 *                 Z = np.empty((self.nE*3))
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_int_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2242, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2242, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2242, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2242, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2242, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_X = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "discretize/tree_ext.pyx":2243
 *             else:
 *                 X = np.empty((self.nE*3))
 *                 Y = np.empty((self.nE*3))             # <<<<<<<<<<<<<<
 *                 Z = np.empty((self.nE*3))
 *                 for it in self.tree.edges_x:
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_int_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2243, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2243, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2243, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2243, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2243, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_Y = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "discretize/tree_ext.pyx":2244
 *                 X = np.empty((self.nE*3))
 *                 Y = np.empty((self.nE*3))
 *                 Z = np.empty((self.nE*3))             # <<<<<<<<<<<<<<
 *                 for it in self.tree.edges_x:
 *                     edge = it.second
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_int_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2244, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2244, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2244, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2244, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2244, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_Z = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "discretize/tree_ext.pyx":2245
 *                 Y = np.empty((self.nE*3))
 *                 Z = np.empty((self.nE*3))
 *                 for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
      __pyx_t_9 = &__pyx_v_self->tree->edges_x;
      __pyx_t_8 = __pyx_t_9->begin();
      for (;;) {
        if (!(__pyx_t_8 != __pyx_t_9->end())) break;
        __pyx_t_10 = *__pyx_t_8;
        ++__pyx_t_8;
        __pyx_v_it = __pyx_t_10;

        /* "discretize/tree_ext.pyx":2246
 *                 Z = np.empty((self.nE*3))
 *                 for it in self.tree.edges_x:
 *                     edge = it.second             # <<<<<<<<<<<<<<
 *                     if(edge.hanging): continue
 *                     i = edge.index*3
 */
        __pyx_t_11 = __pyx_v_it.second;
        __pyx_v_edge = __pyx_t_11;

        /* "discretize/tree_ext.pyx":2247
 *                 for it in self.tree.edges_x:
 *                     edge = it.second
 *                     if(edge.hanging): continue             # <<<<<<<<<<<<<<
 *                     i = edge.index*3
 *                     p1 = edge.points[0]
 */
        __pyx_t_3 = (__pyx_v_edge->hanging != 0);
        if (__pyx_t_3) {
          goto __pyx_L13_continue;
        }

        /* "discretize/tree_ext.pyx":2248
 *                     edge = it.second
 *                     if(edge.hanging): continue
 *                     i = edge.index*3             # <<<<<<<<<<<<<<
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 */
        __pyx_v_i = (__pyx_v_edge->index * 3);

        /* "discretize/tree_ext.pyx":2249
 *                     if(edge.hanging): continue
 *                     i = edge.index*3
 *                     p1 = edge.points[0]             # <<<<<<<<<<<<<<
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 */
        __pyx_v_p1 = (__pyx_v_edge->points[0]);

        /* "discretize/tree_ext.pyx":2250
 *                     i = edge.index*3
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]             # <<<<<<<<<<<<<<
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 */
        __pyx_v_p2 = (__pyx_v_edge->points[1]);

        /* "discretize/tree_ext.pyx":2251
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]             # <<<<<<<<<<<<<<
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 */
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_p1->location[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2251, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_p2->location[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2251, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2251, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_nan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2251, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2251, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
        __pyx_t_1 = 0;
        __pyx_t_7 = 0;
        __pyx_t_5 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_X, __pyx_t_6, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2251, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "discretize/tree_ext.pyx":2252
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]             # <<<<<<<<<<<<<<
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 * 
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_p1->location[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_p2->location[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        __pyx_t_1 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_Y, __pyx_t_7, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2252, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "discretize/tree_ext.pyx":2253
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]             # <<<<<<<<<<<<<<
 * 
 *                 offset = self.nEx
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_p1->location[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2253, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_p2->location[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2253, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2253, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2253, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2253, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
        __pyx_t_7 = 0;
        __pyx_t_1 = 0;
        __pyx_t_6 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_Z, __pyx_t_5, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2253, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "discretize/tree_ext.pyx":2245
 *                 Y = np.empty((self.nE*3))
 *                 Z = np.empty((self.nE*3))
 *                 for it in self.tree.edges_x:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
        __pyx_L13_continue:;
      }

      /* "discretize/tree_ext.pyx":2255
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 * 
 *                 offset = self.nEx             # <<<<<<<<<<<<<<
 *                 for it in self.tree.edges_y:
 *                     edge = it.second
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2255, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = __Pyx_PyInt_As_int_t(__pyx_t_5); if (unlikely((__pyx_t_12 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2255, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_offset = __pyx_t_12;

      /* "discretize/tree_ext.pyx":2256
 * 
 *                 offset = self.nEx
 *                 for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
      __pyx_t_9 = &__pyx_v_self->tree->edges_y;
      __pyx_t_8 = __pyx_t_9->begin();
      for (;;) {
        if (!(__pyx_t_8 != __pyx_t_9->end())) break;
        __pyx_t_10 = *__pyx_t_8;
        ++__pyx_t_8;
        __pyx_v_it = __pyx_t_10;

        /* "discretize/tree_ext.pyx":2257
 *                 offset = self.nEx
 *                 for it in self.tree.edges_y:
 *                     edge = it.second             # <<<<<<<<<<<<<<
 *                     if(edge.hanging): continue
 *                     i = (edge.index+offset)*3
 */
        __pyx_t_11 = __pyx_v_it.second;
        __pyx_v_edge = __pyx_t_11;

        /* "discretize/tree_ext.pyx":2258
 *                 for it in self.tree.edges_y:
 *                     edge = it.second
 *                     if(edge.hanging): continue             # <<<<<<<<<<<<<<
 *                     i = (edge.index+offset)*3
 *                     p1 = edge.points[0]
 */
        __pyx_t_3 = (__pyx_v_edge->hanging != 0);
        if (__pyx_t_3) {
          goto __pyx_L16_continue;
        }

        /* "discretize/tree_ext.pyx":2259
 *                     edge = it.second
 *                     if(edge.hanging): continue
 *                     i = (edge.index+offset)*3             # <<<<<<<<<<<<<<
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 */
        __pyx_v_i = ((__pyx_v_edge->index + __pyx_v_offset) * 3);

        /* "discretize/tree_ext.pyx":2260
 *                     if(edge.hanging): continue
 *                     i = (edge.index+offset)*3
 *                     p1 = edge.points[0]             # <<<<<<<<<<<<<<
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 */
        __pyx_v_p1 = (__pyx_v_edge->points[0]);

        /* "discretize/tree_ext.pyx":2261
 *                     i = (edge.index+offset)*3
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]             # <<<<<<<<<<<<<<
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 */
        __pyx_v_p2 = (__pyx_v_edge->points[1]);

        /* "discretize/tree_ext.pyx":2262
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]             # <<<<<<<<<<<<<<
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 */
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_p1->location[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2262, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_p2->location[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2262, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2262, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_nan); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2262, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2262, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_X, __pyx_t_1, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2262, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "discretize/tree_ext.pyx":2263
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]             # <<<<<<<<<<<<<<
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 * 
 */
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_p1->location[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_p2->location[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_nan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
        __pyx_t_1 = 0;
        __pyx_t_7 = 0;
        __pyx_t_5 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_Y, __pyx_t_6, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2263, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "discretize/tree_ext.pyx":2264
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]             # <<<<<<<<<<<<<<
 * 
 *                 offset += self.nEy
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_p1->location[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_p2->location[2])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        __pyx_t_1 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_Z, __pyx_t_7, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2264, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "discretize/tree_ext.pyx":2256
 * 
 *                 offset = self.nEx
 *                 for it in self.tree.edges_y:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
        __pyx_L16_continue:;
      }

      /* "discretize/tree_ext.pyx":2266
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 * 
 *                 offset += self.nEy             # <<<<<<<<<<<<<<
 *                 for it in self.tree.edges_z:
 *                     edge = it.second
 */
      __pyx_t_7 = __Pyx_PyInt_From_int_t(__pyx_v_offset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nEy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_int_t(__pyx_t_5); if (unlikely((__pyx_t_12 == ((int_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2266, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_offset = __pyx_t_12;

      /* "discretize/tree_ext.pyx":2267
 * 
 *                 offset += self.nEy
 *                 for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
      __pyx_t_9 = &__pyx_v_self->tree->edges_z;
      __pyx_t_8 = __pyx_t_9->begin();
      for (;;) {
        if (!(__pyx_t_8 != __pyx_t_9->end())) break;
        __pyx_t_10 = *__pyx_t_8;
        ++__pyx_t_8;
        __pyx_v_it = __pyx_t_10;

        /* "discretize/tree_ext.pyx":2268
 *                 offset += self.nEy
 *                 for it in self.tree.edges_z:
 *                     edge = it.second             # <<<<<<<<<<<<<<
 *                     if(edge.hanging): continue
 *                     i = (edge.index + offset)*3
 */
        __pyx_t_11 = __pyx_v_it.second;
        __pyx_v_edge = __pyx_t_11;

        /* "discretize/tree_ext.pyx":2269
 *                 for it in self.tree.edges_z:
 *                     edge = it.second
 *                     if(edge.hanging): continue             # <<<<<<<<<<<<<<
 *                     i = (edge.index + offset)*3
 *                     p1 = edge.points[0]
 */
        __pyx_t_3 = (__pyx_v_edge->hanging != 0);
        if (__pyx_t_3) {
          goto __pyx_L19_continue;
        }

        /* "discretize/tree_ext.pyx":2270
 *                     edge = it.second
 *                     if(edge.hanging): continue
 *                     i = (edge.index + offset)*3             # <<<<<<<<<<<<<<
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 */
        __pyx_v_i = ((__pyx_v_edge->index + __pyx_v_offset) * 3);

        /* "discretize/tree_ext.pyx":2271
 *                     if(edge.hanging): continue
 *                     i = (edge.index + offset)*3
 *                     p1 = edge.points[0]             # <<<<<<<<<<<<<<
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 */
        __pyx_v_p1 = (__pyx_v_edge->points[0]);

        /* "discretize/tree_ext.pyx":2272
 *                     i = (edge.index + offset)*3
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]             # <<<<<<<<<<<<<<
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 */
        __pyx_v_p2 = (__pyx_v_edge->points[1]);

        /* "discretize/tree_ext.pyx":2273
 *                     p1 = edge.points[0]
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]             # <<<<<<<<<<<<<<
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 */
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_p1->location[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_p2->location[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
        __pyx_t_5 = 0;
        __pyx_t_1 = 0;
        __pyx_t_6 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_X, __pyx_t_7, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2273, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "discretize/tree_ext.pyx":2274
 *                     p2 = edge.points[1]
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]             # <<<<<<<<<<<<<<
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 * 
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_p1->location[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_p2->location[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_nan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6);
        PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_5);
        __pyx_t_7 = 0;
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_Y, __pyx_t_1, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "discretize/tree_ext.pyx":2275
 *                     X[i : i+3] = [p1.location[0], p2.location[0], np.nan]
 *                     Y[i : i+3] = [p1.location[1], p2.location[1], np.nan]
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]             # <<<<<<<<<<<<<<
 * 
 *                 ax.plot(X, Y, 'b-', zs=Z)
 */
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_p1->location[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_p2->location[2])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_nan); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_7);
        __pyx_t_1 = 0;
        __pyx_t_5 = 0;
        __pyx_t_7 = 0;
        if (__Pyx_PyObject_SetSlice(__pyx_v_Z, __pyx_t_6, __pyx_v_i, (__pyx_v_i + 3), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 2275, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "discretize/tree_ext.pyx":2267
 * 
 *                 offset += self.nEy
 *                 for it in self.tree.edges_z:             # <<<<<<<<<<<<<<
 *                     edge = it.second
 *                     if(edge.hanging): continue
 */
        __pyx_L19_continue:;
      }

      /* "discretize/tree_ext.pyx":2277
 *                     Z[i : i+3] = [p1.location[2], p2.location[2], np.nan]
 * 
 *                 ax.plot(X, Y, 'b-', zs=Z)             # <<<<<<<<<<<<<<
 * 
 *         if cells:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_X);
      __Pyx_GIVEREF(__pyx_v_X);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_X);
      __Pyx_INCREF(__pyx_v_Y);
      __Pyx_GIVEREF(__pyx_v_Y);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_Y);
      __Pyx_INCREF(__pyx_kp_s_b);
      __Pyx_GIVEREF(__pyx_kp_s_b);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_s_b);
      __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_zs, __pyx_v_Z) < 0) __PYX_ERR(0, 2277, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L6:;

    /* "discretize/tree_ext.pyx":2217
 *             Edge *edge
 * 
 *         if grid:             # <<<<<<<<<<<<<<
 *             if(self._dim) == 2:
 *                 X = np.empty((self.nE*3))
 */
  }

  /* "discretize/tree_ext.pyx":2279
 *                 ax.plot(X, Y, 'b-', zs=Z)
 * 
 *         if cells:             # <<<<<<<<<<<<<<
 *             ax.plot(*self.gridCC.T, 'r.')
 *         if cellLine:
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_cells); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2279, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2280
 * 
 *         if cells:
 *             ax.plot(*self.gridCC.T, 'r.')             # <<<<<<<<<<<<<<
 *         if cellLine:
 *             ax.plot(*self.gridCC.T, 'r:')
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridCC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_5, __pyx_tuple__57); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2279
 *                 ax.plot(X, Y, 'b-', zs=Z)
 * 
 *         if cells:             # <<<<<<<<<<<<<<
 *             ax.plot(*self.gridCC.T, 'r.')
 *         if cellLine:
 */
  }

  /* "discretize/tree_ext.pyx":2281
 *         if cells:
 *             ax.plot(*self.gridCC.T, 'r.')
 *         if cellLine:             # <<<<<<<<<<<<<<
 *             ax.plot(*self.gridCC.T, 'r:')
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_cellLine); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2281, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2282
 *             ax.plot(*self.gridCC.T, 'r.')
 *         if cellLine:
 *             ax.plot(*self.gridCC.T, 'r:')             # <<<<<<<<<<<<<<
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')
 *         if nodes:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridCC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_7, __pyx_tuple__58); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":2283
 *         if cellLine:
 *             ax.plot(*self.gridCC.T, 'r:')
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')             # <<<<<<<<<<<<<<
 *         if nodes:
 *             ax.plot(*np.r_[self.gridN, self.gridhN].T, 'ms')
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridCC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_int_neg_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_0);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetItem(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridCC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_int_neg_1);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_int_1);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_13 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_t_6, __pyx_t_5, __pyx_n_s_ro};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2283, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_t_6, __pyx_t_5, __pyx_n_s_ro};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2283, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_13, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_13, __pyx_t_5);
      __Pyx_INCREF(__pyx_n_s_ro);
      __Pyx_GIVEREF(__pyx_n_s_ro);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_13, __pyx_n_s_ro);
      __pyx_t_6 = 0;
      __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":2281
 *         if cells:
 *             ax.plot(*self.gridCC.T, 'r.')
 *         if cellLine:             # <<<<<<<<<<<<<<
 *             ax.plot(*self.gridCC.T, 'r:')
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')
 */
  }

  /* "discretize/tree_ext.pyx":2284
 *             ax.plot(*self.gridCC.T, 'r:')
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')
 *         if nodes:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridN, self.gridhN].T, 'ms')
 *             # Hanging Nodes
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_nodes); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2284, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2285
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')
 *         if nodes:
 *             ax.plot(*np.r_[self.gridN, self.gridhN].T, 'ms')             # <<<<<<<<<<<<<<
 *             # Hanging Nodes
 *             ax.plot(*self.gridhN.T, 'ms', ms=10, mfc='none', mec='m')
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhN); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_T); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_tuple__59); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2287
 *             ax.plot(*np.r_[self.gridN, self.gridhN].T, 'ms')
 *             # Hanging Nodes
 *             ax.plot(*self.gridhN.T, 'ms', ms=10, mfc='none', mec='m')             # <<<<<<<<<<<<<<
 *         if facesX:
 *             ax.plot(*np.r_[self.gridFx, self.gridhFx].T, 'g>')
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhN); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_tuple__60); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ms, __pyx_int_10) < 0) __PYX_ERR(0, 2287, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_mfc, __pyx_n_s_none) < 0) __PYX_ERR(0, 2287, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_mec, __pyx_n_s_m) < 0) __PYX_ERR(0, 2287, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "discretize/tree_ext.pyx":2284
 *             ax.plot(*self.gridCC.T, 'r:')
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')
 *         if nodes:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridN, self.gridhN].T, 'ms')
 *             # Hanging Nodes
 */
  }

  /* "discretize/tree_ext.pyx":2288
 *             # Hanging Nodes
 *             ax.plot(*self.gridhN.T, 'ms', ms=10, mfc='none', mec='m')
 *         if facesX:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridFx, self.gridhFx].T, 'g>')
 *             # Hanging Faces x
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_facesX); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2288, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2289
 *             ax.plot(*self.gridhN.T, 'ms', ms=10, mfc='none', mec='m')
 *         if facesX:
 *             ax.plot(*np.r_[self.gridFx, self.gridhFx].T, 'g>')             # <<<<<<<<<<<<<<
 *             # Hanging Faces x
 *             ax.plot(*self.gridhFx.T, 'gs', ms=10, mfc='none', mec='g')
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_r); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridFx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhFx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_tuple__61); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2291
 *             ax.plot(*np.r_[self.gridFx, self.gridhFx].T, 'g>')
 *             # Hanging Faces x
 *             ax.plot(*self.gridhFx.T, 'gs', ms=10, mfc='none', mec='g')             # <<<<<<<<<<<<<<
 *         if facesY:
 *             ax.plot(*np.r_[self.gridFy, self.gridhFy].T, 'g^')
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhFx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PySequence_Tuple(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_tuple__62); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ms, __pyx_int_10) < 0) __PYX_ERR(0, 2291, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mfc, __pyx_n_s_none) < 0) __PYX_ERR(0, 2291, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mec, __pyx_n_s_g_2) < 0) __PYX_ERR(0, 2291, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":2288
 *             # Hanging Nodes
 *             ax.plot(*self.gridhN.T, 'ms', ms=10, mfc='none', mec='m')
 *         if facesX:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridFx, self.gridhFx].T, 'g>')
 *             # Hanging Faces x
 */
  }

  /* "discretize/tree_ext.pyx":2292
 *             # Hanging Faces x
 *             ax.plot(*self.gridhFx.T, 'gs', ms=10, mfc='none', mec='g')
 *         if facesY:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridFy, self.gridhFy].T, 'g^')
 *             # Hanging Faces y
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_facesY); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2292, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2293
 *             ax.plot(*self.gridhFx.T, 'gs', ms=10, mfc='none', mec='g')
 *         if facesY:
 *             ax.plot(*np.r_[self.gridFy, self.gridhFy].T, 'g^')             # <<<<<<<<<<<<<<
 *             # Hanging Faces y
 *             ax.plot(*self.gridhFy.T, 'gs', ms=10, mfc='none', mec='g')
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridFy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhFy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_T); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_tuple__63); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2295
 *             ax.plot(*np.r_[self.gridFy, self.gridhFy].T, 'g^')
 *             # Hanging Faces y
 *             ax.plot(*self.gridhFy.T, 'gs', ms=10, mfc='none', mec='g')             # <<<<<<<<<<<<<<
 *         if facesZ:
 *             ax.plot(*np.r_[self.gridFz, self.gridhFz].T, 'g^')
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhFy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_tuple__64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ms, __pyx_int_10) < 0) __PYX_ERR(0, 2295, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_mfc, __pyx_n_s_none) < 0) __PYX_ERR(0, 2295, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_mec, __pyx_n_s_g_2) < 0) __PYX_ERR(0, 2295, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "discretize/tree_ext.pyx":2292
 *             # Hanging Faces x
 *             ax.plot(*self.gridhFx.T, 'gs', ms=10, mfc='none', mec='g')
 *         if facesY:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridFy, self.gridhFy].T, 'g^')
 *             # Hanging Faces y
 */
  }

  /* "discretize/tree_ext.pyx":2296
 *             # Hanging Faces y
 *             ax.plot(*self.gridhFy.T, 'gs', ms=10, mfc='none', mec='g')
 *         if facesZ:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridFz, self.gridhFz].T, 'g^')
 *             # Hangin Faces z
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_facesZ); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2296, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2297
 *             ax.plot(*self.gridhFy.T, 'gs', ms=10, mfc='none', mec='g')
 *         if facesZ:
 *             ax.plot(*np.r_[self.gridFz, self.gridhFz].T, 'g^')             # <<<<<<<<<<<<<<
 *             # Hangin Faces z
 *             ax.plot(*self.gridhFz.T, 'gs', ms=10, mfc='none', mec='g')
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_r); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridFz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhFz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_tuple__65); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2299
 *             ax.plot(*np.r_[self.gridFz, self.gridhFz].T, 'g^')
 *             # Hangin Faces z
 *             ax.plot(*self.gridhFz.T, 'gs', ms=10, mfc='none', mec='g')             # <<<<<<<<<<<<<<
 *         if edgesX:
 *             ax.plot(*np.r_[self.gridEx, self.gridhEx].T, 'k>')
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhFz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PySequence_Tuple(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_tuple__66); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ms, __pyx_int_10) < 0) __PYX_ERR(0, 2299, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mfc, __pyx_n_s_none) < 0) __PYX_ERR(0, 2299, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mec, __pyx_n_s_g_2) < 0) __PYX_ERR(0, 2299, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":2296
 *             # Hanging Faces y
 *             ax.plot(*self.gridhFy.T, 'gs', ms=10, mfc='none', mec='g')
 *         if facesZ:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridFz, self.gridhFz].T, 'g^')
 *             # Hangin Faces z
 */
  }

  /* "discretize/tree_ext.pyx":2300
 *             # Hangin Faces z
 *             ax.plot(*self.gridhFz.T, 'gs', ms=10, mfc='none', mec='g')
 *         if edgesX:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridEx, self.gridhEx].T, 'k>')
 *             # Hanging Edges x
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_edgesX); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2300, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2301
 *             ax.plot(*self.gridhFz.T, 'gs', ms=10, mfc='none', mec='g')
 *         if edgesX:
 *             ax.plot(*np.r_[self.gridEx, self.gridhEx].T, 'k>')             # <<<<<<<<<<<<<<
 *             # Hanging Edges x
 *             ax.plot(*self.gridhEx.T, 'ks', ms=10, mfc='none', mec='k')
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridEx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhEx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_T); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_tuple__67); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2303
 *             ax.plot(*np.r_[self.gridEx, self.gridhEx].T, 'k>')
 *             # Hanging Edges x
 *             ax.plot(*self.gridhEx.T, 'ks', ms=10, mfc='none', mec='k')             # <<<<<<<<<<<<<<
 *         if edgesY:
 *             ax.plot(*np.r_[self.gridEy, self.gridhEy].T, 'k>')
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhEx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_tuple__68); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ms, __pyx_int_10) < 0) __PYX_ERR(0, 2303, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_mfc, __pyx_n_s_none) < 0) __PYX_ERR(0, 2303, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_mec, __pyx_n_s_k_2) < 0) __PYX_ERR(0, 2303, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "discretize/tree_ext.pyx":2300
 *             # Hangin Faces z
 *             ax.plot(*self.gridhFz.T, 'gs', ms=10, mfc='none', mec='g')
 *         if edgesX:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridEx, self.gridhEx].T, 'k>')
 *             # Hanging Edges x
 */
  }

  /* "discretize/tree_ext.pyx":2304
 *             # Hanging Edges x
 *             ax.plot(*self.gridhEx.T, 'ks', ms=10, mfc='none', mec='k')
 *         if edgesY:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridEy, self.gridhEy].T, 'k>')
 *             # Hanging Edges y
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_edgesY); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2304, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2305
 *             ax.plot(*self.gridhEx.T, 'ks', ms=10, mfc='none', mec='k')
 *         if edgesY:
 *             ax.plot(*np.r_[self.gridEy, self.gridhEy].T, 'k>')             # <<<<<<<<<<<<<<
 *             # Hanging Edges y
 *             ax.plot(*self.gridhEy.T, 'ks', ms=10, mfc='none', mec='k')
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_r); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridEy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhEy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_tuple__69); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2307
 *             ax.plot(*np.r_[self.gridEy, self.gridhEy].T, 'k>')
 *             # Hanging Edges y
 *             ax.plot(*self.gridhEy.T, 'ks', ms=10, mfc='none', mec='k')             # <<<<<<<<<<<<<<
 *         if edgesZ:
 *             ax.plot(*np.r_[self.gridEz, self.gridhEz].T, 'k>')
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhEy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PySequence_Tuple(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_tuple__70); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ms, __pyx_int_10) < 0) __PYX_ERR(0, 2307, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mfc, __pyx_n_s_none) < 0) __PYX_ERR(0, 2307, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mec, __pyx_n_s_k_2) < 0) __PYX_ERR(0, 2307, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "discretize/tree_ext.pyx":2304
 *             # Hanging Edges x
 *             ax.plot(*self.gridhEx.T, 'ks', ms=10, mfc='none', mec='k')
 *         if edgesY:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridEy, self.gridhEy].T, 'k>')
 *             # Hanging Edges y
 */
  }

  /* "discretize/tree_ext.pyx":2308
 *             # Hanging Edges y
 *             ax.plot(*self.gridhEy.T, 'ks', ms=10, mfc='none', mec='k')
 *         if edgesZ:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridEz, self.gridhEz].T, 'k>')
 *             # Hanging Edges z
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_edgesZ); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2308, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2309
 *             ax.plot(*self.gridhEy.T, 'ks', ms=10, mfc='none', mec='k')
 *         if edgesZ:
 *             ax.plot(*np.r_[self.gridEz, self.gridhEz].T, 'k>')             # <<<<<<<<<<<<<<
 *             # Hanging Edges z
 *             ax.plot(*self.gridhEz.T, 'ks', ms=10, mfc='none', mec='k')
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridEz); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhEz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_T); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_tuple__71); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2311
 *             ax.plot(*np.r_[self.gridEz, self.gridhEz].T, 'k>')
 *             # Hanging Edges z
 *             ax.plot(*self.gridhEz.T, 'ks', ms=10, mfc='none', mec='k')             # <<<<<<<<<<<<<<
 * 
 *         ax.set_xlabel('x1')
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_plot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_gridhEz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_tuple__72); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ms, __pyx_int_10) < 0) __PYX_ERR(0, 2311, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_mfc, __pyx_n_s_none) < 0) __PYX_ERR(0, 2311, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_mec, __pyx_n_s_k_2) < 0) __PYX_ERR(0, 2311, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "discretize/tree_ext.pyx":2308
 *             # Hanging Edges y
 *             ax.plot(*self.gridhEy.T, 'ks', ms=10, mfc='none', mec='k')
 *         if edgesZ:             # <<<<<<<<<<<<<<
 *             ax.plot(*np.r_[self.gridEz, self.gridhEz].T, 'k>')
 *             # Hanging Edges z
 */
  }

  /* "discretize/tree_ext.pyx":2313
 *             ax.plot(*self.gridhEz.T, 'ks', ms=10, mfc='none', mec='k')
 * 
 *         ax.set_xlabel('x1')             # <<<<<<<<<<<<<<
 *         ax.set_ylabel('x2')
 *         if self._dim == 3:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_xlabel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":2314
 * 
 *         ax.set_xlabel('x1')
 *         ax.set_ylabel('x2')             # <<<<<<<<<<<<<<
 *         if self._dim == 3:
 *             ax.set_zlabel('x3')
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_ylabel); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":2315
 *         ax.set_xlabel('x1')
 *         ax.set_ylabel('x2')
 *         if self._dim == 3:             # <<<<<<<<<<<<<<
 *             ax.set_zlabel('x3')
 * 
 */
  __pyx_t_3 = ((__pyx_v_self->_dim == 3) != 0);
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2316
 *         ax.set_ylabel('x2')
 *         if self._dim == 3:
 *             ax.set_zlabel('x3')             # <<<<<<<<<<<<<<
 * 
 *         ax.grid(True)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_zlabel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "discretize/tree_ext.pyx":2315
 *         ax.set_xlabel('x1')
 *         ax.set_ylabel('x2')
 *         if self._dim == 3:             # <<<<<<<<<<<<<<
 *             ax.set_zlabel('x3')
 * 
 */
  }

  /* "discretize/tree_ext.pyx":2318
 *             ax.set_zlabel('x3')
 * 
 *         ax.grid(True)             # <<<<<<<<<<<<<<
 *         if showIt:
 *             plt.show()
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_grid); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":2319
 * 
 *         ax.grid(True)
 *         if showIt:             # <<<<<<<<<<<<<<
 *             plt.show()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_showIt); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2319, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "discretize/tree_ext.pyx":2320
 *         ax.grid(True)
 *         if showIt:
 *             plt.show()             # <<<<<<<<<<<<<<
 * 
 *     def plotImage(self, I, ax=None, showIt=False, grid=False, clim=None):
 */
    if (unlikely(!__pyx_v_plt)) { __Pyx_RaiseUnboundLocalError("plt"); __PYX_ERR(0, 2320, __pyx_L1_error) }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_show); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2320, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2320, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "discretize/tree_ext.pyx":2319
 * 
 *         ax.grid(True)
 *         if showIt:             # <<<<<<<<<<<<<<
 *             plt.show()
 * 
 */
  }

  /* "discretize/tree_ext.pyx":2190
 *         return sp.csr_matrix((V, (I, J)), shape=(locs.shape[0],self.ntN))*Rn
 * 
 *     def plotGrid(self, ax=None, showIt=False,             # <<<<<<<<<<<<<<
 *         grid=True,
 *         cells=False, cellLine=False,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.plotGrid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_matplotlib);
  __Pyx_XDECREF(__pyx_v_plt);
  __Pyx_XDECREF(__pyx_v_colors);
  __Pyx_XDECREF(__pyx_v_cmx);
  __Pyx_XDECREF(__pyx_v_Axes3D);
  __Pyx_XDECREF(__pyx_v_fig);
  __Pyx_XDECREF(__pyx_v_X);
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_Z);
  __Pyx_XDECREF(__pyx_v_ax);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2322
 *             plt.show()
 * 
 *     def plotImage(self, I, ax=None, showIt=False, grid=False, clim=None):             # <<<<<<<<<<<<<<
 *         if self._dim == 3:
 *             raise Exception('Use plot slice?')
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_71plotImage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_71plotImage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_I = 0;
  PyObject *__pyx_v_ax = 0;
  PyObject *__pyx_v_showIt = 0;
  PyObject *__pyx_v_grid = 0;
  PyObject *__pyx_v_clim = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plotImage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_I,&__pyx_n_s_ax,&__pyx_n_s_showIt,&__pyx_n_s_grid,&__pyx_n_s_clim,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_I)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ax);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_showIt);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_grid);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_clim);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plotImage") < 0)) __PYX_ERR(0, 2322, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_I = values[0];
    __pyx_v_ax = values[1];
    __pyx_v_showIt = values[2];
    __pyx_v_grid = values[3];
    __pyx_v_clim = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plotImage", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.plotImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_70plotImage(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_I, __pyx_v_ax, __pyx_v_showIt, __pyx_v_grid, __pyx_v_clim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_70plotImage(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_I, PyObject *__pyx_v_ax, PyObject *__pyx_v_showIt, PyObject *__pyx_v_grid, PyObject *__pyx_v_clim) {
  PyObject *__pyx_v_plt = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_matplotlib = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_Axes3D = NULL;
  PyObject *__pyx_v_colors = NULL;
  PyObject *__pyx_v_cmx = NULL;
  PyObject *__pyx_v_default = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_cm = NULL;
  PyObject *__pyx_v_cNorm = NULL;
  PyObject *__pyx_v_scalarMap = NULL;
  PyObject *__pyx_v_edge_color = NULL;
  Cell *__pyx_v_cell;
  int_t __pyx_v_ii;
  PyObject *__pyx_v_x0 = NULL;
  PyObject *__pyx_v_sz = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  std::vector<Cell *> ::iterator __pyx_t_10;
  std::vector<Cell *>  *__pyx_t_11;
  Cell *__pyx_t_12;
  int_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("plotImage", 0);
  __Pyx_INCREF(__pyx_v_ax);

  /* "discretize/tree_ext.pyx":2323
 * 
 *     def plotImage(self, I, ax=None, showIt=False, grid=False, clim=None):
 *         if self._dim == 3:             # <<<<<<<<<<<<<<
 *             raise Exception('Use plot slice?')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_dim == 3) != 0);
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":2324
 *     def plotImage(self, I, ax=None, showIt=False, grid=False, clim=None):
 *         if self._dim == 3:
 *             raise Exception('Use plot slice?')             # <<<<<<<<<<<<<<
 * 
 *         import matplotlib.pyplot as plt
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2324, __pyx_L1_error)

    /* "discretize/tree_ext.pyx":2323
 * 
 *     def plotImage(self, I, ax=None, showIt=False, grid=False, clim=None):
 *         if self._dim == 3:             # <<<<<<<<<<<<<<
 *             raise Exception('Use plot slice?')
 * 
 */
  }

  /* "discretize/tree_ext.pyx":2326
 *             raise Exception('Use plot slice?')
 * 
 *         import matplotlib.pyplot as plt             # <<<<<<<<<<<<<<
 *         import matplotlib
 *         from mpl_toolkits.mplot3d import Axes3D
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__54);
  __Pyx_GIVEREF(__pyx_n_s__54);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__54);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_matplotlib_pyplot, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_plt = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2327
 * 
 *         import matplotlib.pyplot as plt
 *         import matplotlib             # <<<<<<<<<<<<<<
 *         from mpl_toolkits.mplot3d import Axes3D
 *         import matplotlib.colors as colors
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_matplotlib, 0, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_matplotlib = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2328
 *         import matplotlib.pyplot as plt
 *         import matplotlib
 *         from mpl_toolkits.mplot3d import Axes3D             # <<<<<<<<<<<<<<
 *         import matplotlib.colors as colors
 *         import matplotlib.cm as cmx
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Axes3D);
  __Pyx_GIVEREF(__pyx_n_s_Axes3D);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Axes3D);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_mpl_toolkits_mplot3d, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Axes3D); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_Axes3D = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2329
 *         import matplotlib
 *         from mpl_toolkits.mplot3d import Axes3D
 *         import matplotlib.colors as colors             # <<<<<<<<<<<<<<
 *         import matplotlib.cm as cmx
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__54);
  __Pyx_GIVEREF(__pyx_n_s__54);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__54);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_matplotlib_colors, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_colors = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2330
 *         from mpl_toolkits.mplot3d import Axes3D
 *         import matplotlib.colors as colors
 *         import matplotlib.cm as cmx             # <<<<<<<<<<<<<<
 * 
 *         if ax is None:
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s__54);
  __Pyx_GIVEREF(__pyx_n_s__54);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s__54);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_matplotlib_cm, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_cmx = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2332
 *         import matplotlib.cm as cmx
 * 
 *         if ax is None:             # <<<<<<<<<<<<<<
 *             ax = plt.subplot(111)
 *         default = cm = plt.get_cmap()
 */
  __pyx_t_1 = (__pyx_v_ax == Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "discretize/tree_ext.pyx":2333
 * 
 *         if ax is None:
 *             ax = plt.subplot(111)             # <<<<<<<<<<<<<<
 *         default = cm = plt.get_cmap()
 *         cNorm = colors.Normalize(
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_subplot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_ax, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "discretize/tree_ext.pyx":2332
 *         import matplotlib.cm as cmx
 * 
 *         if ax is None:             # <<<<<<<<<<<<<<
 *             ax = plt.subplot(111)
 *         default = cm = plt.get_cmap()
 */
  }

  /* "discretize/tree_ext.pyx":2334
 *         if ax is None:
 *             ax = plt.subplot(111)
 *         default = cm = plt.get_cmap()             # <<<<<<<<<<<<<<
 *         cNorm = colors.Normalize(
 *             vmin=np.nanmin(I) if clim is None else clim[0],
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_get_cmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2334, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2334, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_default = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_cm = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2335
 *             ax = plt.subplot(111)
 *         default = cm = plt.get_cmap()
 *         cNorm = colors.Normalize(             # <<<<<<<<<<<<<<
 *             vmin=np.nanmin(I) if clim is None else clim[0],
 *             vmax=np.nanmax(I) if clim is None else clim[1])
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_colors, __pyx_n_s_Normalize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "discretize/tree_ext.pyx":2336
 *         default = cm = plt.get_cmap()
 *         cNorm = colors.Normalize(
 *             vmin=np.nanmin(I) if clim is None else clim[0],             # <<<<<<<<<<<<<<
 *             vmax=np.nanmax(I) if clim is None else clim[1])
 * 
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_clim == Py_None);
  if ((__pyx_t_4 != 0)) {
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_nanmin); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_I); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_I};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2336, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_I};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2336, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2336, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_INCREF(__pyx_v_I);
        __Pyx_GIVEREF(__pyx_v_I);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_I);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2336, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_clim, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_vmin, __pyx_t_5) < 0) __PYX_ERR(0, 2336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":2337
 *         cNorm = colors.Normalize(
 *             vmin=np.nanmin(I) if clim is None else clim[0],
 *             vmax=np.nanmax(I) if clim is None else clim[1])             # <<<<<<<<<<<<<<
 * 
 *         scalarMap = cmx.ScalarMappable(norm=cNorm, cmap=default)
 */
  __pyx_t_4 = (__pyx_v_clim == Py_None);
  if ((__pyx_t_4 != 0)) {
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_nanmax); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_I); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_I};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2337, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_I};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2337, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_INCREF(__pyx_v_I);
        __Pyx_GIVEREF(__pyx_v_I);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_I);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_clim, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_vmax, __pyx_t_5) < 0) __PYX_ERR(0, 2336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":2335
 *             ax = plt.subplot(111)
 *         default = cm = plt.get_cmap()
 *         cNorm = colors.Normalize(             # <<<<<<<<<<<<<<
 *             vmin=np.nanmin(I) if clim is None else clim[0],
 *             vmax=np.nanmax(I) if clim is None else clim[1])
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cNorm = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":2339
 *             vmax=np.nanmax(I) if clim is None else clim[1])
 * 
 *         scalarMap = cmx.ScalarMappable(norm=cNorm, cmap=default)             # <<<<<<<<<<<<<<
 *         ax.set_xlim((self.x0[0], self.h[0].sum()))
 *         ax.set_ylim((self.x0[1], self.h[1].sum()))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cmx, __pyx_n_s_ScalarMappable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_norm, __pyx_v_cNorm) < 0) __PYX_ERR(0, 2339, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cmap, __pyx_v_default) < 0) __PYX_ERR(0, 2339, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_scalarMap = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2340
 * 
 *         scalarMap = cmx.ScalarMappable(norm=cNorm, cmap=default)
 *         ax.set_xlim((self.x0[0], self.h[0].sum()))             # <<<<<<<<<<<<<<
 *         ax.set_ylim((self.x0[1], self.h[1].sum()))
 *         edge_color = 'k' if grid else 'none'
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_xlim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_x0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sum); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2340, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_9};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2340, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_9};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2340, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2341
 *         scalarMap = cmx.ScalarMappable(norm=cNorm, cmap=default)
 *         ax.set_xlim((self.x0[0], self.h[0].sum()))
 *         ax.set_ylim((self.x0[1], self.h[1].sum()))             # <<<<<<<<<<<<<<
 *         edge_color = 'k' if grid else 'none'
 *         for cell in self.tree.cells:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_ylim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_x0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2341, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2341, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __pyx_t_9 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2341, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2341, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2341, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2342
 *         ax.set_xlim((self.x0[0], self.h[0].sum()))
 *         ax.set_ylim((self.x0[1], self.h[1].sum()))
 *         edge_color = 'k' if grid else 'none'             # <<<<<<<<<<<<<<
 *         for cell in self.tree.cells:
 *             ii = cell.index
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_grid); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2342, __pyx_L1_error)
  if (__pyx_t_4) {
    __Pyx_INCREF(__pyx_n_s_k_2);
    __pyx_t_3 = __pyx_n_s_k_2;
  } else {
    __Pyx_INCREF(__pyx_n_s_none);
    __pyx_t_3 = __pyx_n_s_none;
  }
  __pyx_v_edge_color = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2343
 *         ax.set_ylim((self.x0[1], self.h[1].sum()))
 *         edge_color = 'k' if grid else 'none'
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ii = cell.index
 *             if np.isnan(I[ii]):
 */
  __pyx_t_11 = &__pyx_v_self->tree->cells;
  __pyx_t_10 = __pyx_t_11->begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_t_11->end())) break;
    __pyx_t_12 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_cell = __pyx_t_12;

    /* "discretize/tree_ext.pyx":2344
 *         edge_color = 'k' if grid else 'none'
 *         for cell in self.tree.cells:
 *             ii = cell.index             # <<<<<<<<<<<<<<
 *             if np.isnan(I[ii]):
 *                 continue
 */
    __pyx_t_13 = __pyx_v_cell->index;
    __pyx_v_ii = __pyx_t_13;

    /* "discretize/tree_ext.pyx":2345
 *         for cell in self.tree.cells:
 *             ii = cell.index
 *             if np.isnan(I[ii]):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isnan); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_I, __pyx_v_ii, int_t, 1, __Pyx_PyInt_From_int_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2345, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2345, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2345, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2345, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2345, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2345, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {

      /* "discretize/tree_ext.pyx":2346
 *             ii = cell.index
 *             if np.isnan(I[ii]):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             x0 = np.array([cell.points[0].location[0], cell.points[0].location[1]])
 */
      goto __pyx_L5_continue;

      /* "discretize/tree_ext.pyx":2345
 *         for cell in self.tree.cells:
 *             ii = cell.index
 *             if np.isnan(I[ii]):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "discretize/tree_ext.pyx":2348
 *                 continue
 * 
 *             x0 = np.array([cell.points[0].location[0], cell.points[0].location[1]])             # <<<<<<<<<<<<<<
 *             sz = np.array([cell.edges[0].length, cell.edges[2].length])
 *             ax.add_patch(
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_cell->points[0])->location[0])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = PyFloat_FromDouble(((__pyx_v_cell->points[0])->location[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __pyx_t_9 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2348, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2348, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_x0, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "discretize/tree_ext.pyx":2349
 * 
 *             x0 = np.array([cell.points[0].location[0], cell.points[0].location[1]])
 *             sz = np.array([cell.edges[0].length, cell.edges[2].length])             # <<<<<<<<<<<<<<
 *             ax.add_patch(
 *                 plt.Rectangle((x0[0], x0[1]), sz[0], sz[1],
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_cell->edges[0])->length); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_cell->edges[2])->length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2349, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2349, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_2};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2349, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sz, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "discretize/tree_ext.pyx":2350
 *             x0 = np.array([cell.points[0].location[0], cell.points[0].location[1]])
 *             sz = np.array([cell.edges[0].length, cell.edges[2].length])
 *             ax.add_patch(             # <<<<<<<<<<<<<<
 *                 plt.Rectangle((x0[0], x0[1]), sz[0], sz[1],
 *                 facecolor=scalarMap.to_rgba(I[ii]),
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_add_patch); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "discretize/tree_ext.pyx":2351
 *             sz = np.array([cell.edges[0].length, cell.edges[2].length])
 *             ax.add_patch(
 *                 plt.Rectangle((x0[0], x0[1]), sz[0], sz[1],             # <<<<<<<<<<<<<<
 *                 facecolor=scalarMap.to_rgba(I[ii]),
 *                 edgecolor=edge_color)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_Rectangle); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_x0, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_x0, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_sz, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_sz, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_2);
    __pyx_t_7 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":2352
 *             ax.add_patch(
 *                 plt.Rectangle((x0[0], x0[1]), sz[0], sz[1],
 *                 facecolor=scalarMap.to_rgba(I[ii]),             # <<<<<<<<<<<<<<
 *                 edgecolor=edge_color)
 *             )
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_scalarMap, __pyx_n_s_to_rgba); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_I, __pyx_v_ii, int_t, 1, __Pyx_PyInt_From_int_t, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_15) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_15, __pyx_t_14};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2352, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_15, __pyx_t_14};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2352, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_14);
        __pyx_t_14 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2352, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_facecolor, __pyx_t_5) < 0) __PYX_ERR(0, 2352, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2353
 *                 plt.Rectangle((x0[0], x0[1]), sz[0], sz[1],
 *                 facecolor=scalarMap.to_rgba(I[ii]),
 *                 edgecolor=edge_color)             # <<<<<<<<<<<<<<
 *             )
 *         # http://stackoverflow.com/questions/8342549/matplotlib-add-colorbar-to-a-sequence-of-line-plots
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_edgecolor, __pyx_v_edge_color) < 0) __PYX_ERR(0, 2352, __pyx_L1_error)

    /* "discretize/tree_ext.pyx":2351
 *             sz = np.array([cell.edges[0].length, cell.edges[2].length])
 *             ax.add_patch(
 *                 plt.Rectangle((x0[0], x0[1]), sz[0], sz[1],             # <<<<<<<<<<<<<<
 *                 facecolor=scalarMap.to_rgba(I[ii]),
 *                 edgecolor=edge_color)
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2350, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2350, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2350, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2350, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2350, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "discretize/tree_ext.pyx":2343
 *         ax.set_ylim((self.x0[1], self.h[1].sum()))
 *         edge_color = 'k' if grid else 'none'
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             ii = cell.index
 *             if np.isnan(I[ii]):
 */
    __pyx_L5_continue:;
  }

  /* "discretize/tree_ext.pyx":2356
 *             )
 *         # http://stackoverflow.com/questions/8342549/matplotlib-add-colorbar-to-a-sequence-of-line-plots
 *         scalarMap._A = []             # <<<<<<<<<<<<<<
 *         ax.set_xlabel('x')
 *         ax.set_ylabel('y')
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_scalarMap, __pyx_n_s_A, __pyx_t_3) < 0) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2357
 *         # http://stackoverflow.com/questions/8342549/matplotlib-add-colorbar-to-a-sequence-of-line-plots
 *         scalarMap._A = []
 *         ax.set_xlabel('x')             # <<<<<<<<<<<<<<
 *         ax.set_ylabel('y')
 *         if showIt:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_xlabel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "discretize/tree_ext.pyx":2358
 *         scalarMap._A = []
 *         ax.set_xlabel('x')
 *         ax.set_ylabel('y')             # <<<<<<<<<<<<<<
 *         if showIt:
 *             plt.show()
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_ylabel); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2359
 *         ax.set_xlabel('x')
 *         ax.set_ylabel('y')
 *         if showIt:             # <<<<<<<<<<<<<<
 *             plt.show()
 *         return [scalarMap]
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_showIt); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2359, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "discretize/tree_ext.pyx":2360
 *         ax.set_ylabel('y')
 *         if showIt:
 *             plt.show()             # <<<<<<<<<<<<<<
 *         return [scalarMap]
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_show); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2360, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "discretize/tree_ext.pyx":2359
 *         ax.set_xlabel('x')
 *         ax.set_ylabel('y')
 *         if showIt:             # <<<<<<<<<<<<<<
 *             plt.show()
 *         return [scalarMap]
 */
  }

  /* "discretize/tree_ext.pyx":2361
 *         if showIt:
 *             plt.show()
 *         return [scalarMap]             # <<<<<<<<<<<<<<
 * 
 *     def plotSlice(self, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_scalarMap);
  __Pyx_GIVEREF(__pyx_v_scalarMap);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_scalarMap);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":2322
 *             plt.show()
 * 
 *     def plotImage(self, I, ax=None, showIt=False, grid=False, clim=None):             # <<<<<<<<<<<<<<
 *         if self._dim == 3:
 *             raise Exception('Use plot slice?')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.plotImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_plt);
  __Pyx_XDECREF(__pyx_v_matplotlib);
  __Pyx_XDECREF(__pyx_v_Axes3D);
  __Pyx_XDECREF(__pyx_v_colors);
  __Pyx_XDECREF(__pyx_v_cmx);
  __Pyx_XDECREF(__pyx_v_default);
  __Pyx_XDECREF(__pyx_v_cm);
  __Pyx_XDECREF(__pyx_v_cNorm);
  __Pyx_XDECREF(__pyx_v_scalarMap);
  __Pyx_XDECREF(__pyx_v_edge_color);
  __Pyx_XDECREF(__pyx_v_x0);
  __Pyx_XDECREF(__pyx_v_sz);
  __Pyx_XDECREF(__pyx_v_ax);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2363
 *         return [scalarMap]
 * 
 *     def plotSlice(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         raise Exception('PlotSlice has not been implemented yet')
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_73plotSlice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_73plotSlice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plotSlice (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "plotSlice", 1))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_72plotSlice(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_72plotSlice(CYTHON_UNUSED struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("plotSlice", 0);

  /* "discretize/tree_ext.pyx":2364
 * 
 *     def plotSlice(self, *args, **kwargs):
 *         raise Exception('PlotSlice has not been implemented yet')             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2364, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":2363
 *         return [scalarMap]
 * 
 *     def plotSlice(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         raise Exception('PlotSlice has not been implemented yet')
 *         pass
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.plotSlice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2367
 *         pass
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         cdef int id, dim = self._dim
 *         indArr = np.empty((self.nC, dim), dtype=np.int)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_75__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_75__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_74__getstate__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_74__getstate__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  int __pyx_v_id;
  int __pyx_v_dim;
  PyObject *__pyx_v_indArr = NULL;
  PyObject *__pyx_v_levels = NULL;
  __Pyx_memviewslice __pyx_v__indArr = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v__levels = { 0, 0, { 0 }, { 0 }, { 0 } };
  Cell *__pyx_v_cell;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<Cell *> ::iterator __pyx_t_9;
  std::vector<Cell *>  *__pyx_t_10;
  Cell *__pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "discretize/tree_ext.pyx":2368
 * 
 *     def __getstate__(self):
 *         cdef int id, dim = self._dim             # <<<<<<<<<<<<<<
 *         indArr = np.empty((self.nC, dim), dtype=np.int)
 *         levels = np.empty((self.nC), dtype=np.int)
 */
  __pyx_t_1 = __pyx_v_self->_dim;
  __pyx_v_dim = __pyx_t_1;

  /* "discretize/tree_ext.pyx":2369
 *     def __getstate__(self):
 *         cdef int id, dim = self._dim
 *         indArr = np.empty((self.nC, dim), dtype=np.int)             # <<<<<<<<<<<<<<
 *         levels = np.empty((self.nC), dtype=np.int)
 *         cdef np.int_t[:, :] _indArr = indArr
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_indArr = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "discretize/tree_ext.pyx":2370
 *         cdef int id, dim = self._dim
 *         indArr = np.empty((self.nC, dim), dtype=np.int)
 *         levels = np.empty((self.nC), dtype=np.int)             # <<<<<<<<<<<<<<
 *         cdef np.int_t[:, :] _indArr = indArr
 *         cdef np.int_t[:] _levels = levels
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_levels = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2371
 *         indArr = np.empty((self.nC, dim), dtype=np.int)
 *         levels = np.empty((self.nC), dtype=np.int)
 *         cdef np.int_t[:, :] _indArr = indArr             # <<<<<<<<<<<<<<
 *         cdef np.int_t[:] _levels = levels
 *         for cell in self.tree.cells:
 */
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int_t(__pyx_v_indArr);
  if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 2371, __pyx_L1_error)
  __pyx_v__indArr = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "discretize/tree_ext.pyx":2372
 *         levels = np.empty((self.nC), dtype=np.int)
 *         cdef np.int_t[:, :] _indArr = indArr
 *         cdef np.int_t[:] _levels = levels             # <<<<<<<<<<<<<<
 *         for cell in self.tree.cells:
 *             for id in range(dim):
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int_t(__pyx_v_levels);
  if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __pyx_v__levels = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "discretize/tree_ext.pyx":2373
 *         cdef np.int_t[:, :] _indArr = indArr
 *         cdef np.int_t[:] _levels = levels
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             for id in range(dim):
 *                 _indArr[cell.index, id] = cell.location_ind[id]
 */
  __pyx_t_10 = &__pyx_v_self->tree->cells;
  __pyx_t_9 = __pyx_t_10->begin();
  for (;;) {
    if (!(__pyx_t_9 != __pyx_t_10->end())) break;
    __pyx_t_11 = *__pyx_t_9;
    ++__pyx_t_9;
    __pyx_v_cell = __pyx_t_11;

    /* "discretize/tree_ext.pyx":2374
 *         cdef np.int_t[:] _levels = levels
 *         for cell in self.tree.cells:
 *             for id in range(dim):             # <<<<<<<<<<<<<<
 *                 _indArr[cell.index, id] = cell.location_ind[id]
 *             _levels[cell.index] = cell.level
 */
    __pyx_t_12 = __pyx_v_dim;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_id = __pyx_t_13;

      /* "discretize/tree_ext.pyx":2375
 *         for cell in self.tree.cells:
 *             for id in range(dim):
 *                 _indArr[cell.index, id] = cell.location_ind[id]             # <<<<<<<<<<<<<<
 *             _levels[cell.index] = cell.level
 *         return indArr, levels
 */
      __pyx_t_14 = __pyx_v_cell->index;
      __pyx_t_15 = __pyx_v_id;
      __pyx_t_16 = -1;
      if (__pyx_t_14 < 0) {
        __pyx_t_14 += __pyx_v__indArr.shape[0];
        if (unlikely(__pyx_t_14 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_14 >= __pyx_v__indArr.shape[0])) __pyx_t_16 = 0;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v__indArr.shape[1];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_15 >= __pyx_v__indArr.shape[1])) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 2375, __pyx_L1_error)
      }
      *((__pyx_t_5numpy_int_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v__indArr.data + __pyx_t_14 * __pyx_v__indArr.strides[0]) ) + __pyx_t_15 * __pyx_v__indArr.strides[1]) )) = (__pyx_v_cell->location_ind[__pyx_v_id]);
    }

    /* "discretize/tree_ext.pyx":2376
 *             for id in range(dim):
 *                 _indArr[cell.index, id] = cell.location_ind[id]
 *             _levels[cell.index] = cell.level             # <<<<<<<<<<<<<<
 *         return indArr, levels
 * 
 */
    __pyx_t_1 = __pyx_v_cell->level;
    __pyx_t_17 = __pyx_v_cell->index;
    __pyx_t_12 = -1;
    if (__pyx_t_17 < 0) {
      __pyx_t_17 += __pyx_v__levels.shape[0];
      if (unlikely(__pyx_t_17 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_17 >= __pyx_v__levels.shape[0])) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 2376, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_int_t *) ( /* dim=0 */ (__pyx_v__levels.data + __pyx_t_17 * __pyx_v__levels.strides[0]) )) = __pyx_t_1;

    /* "discretize/tree_ext.pyx":2373
 *         cdef np.int_t[:, :] _indArr = indArr
 *         cdef np.int_t[:] _levels = levels
 *         for cell in self.tree.cells:             # <<<<<<<<<<<<<<
 *             for id in range(dim):
 *                 _indArr[cell.index, id] = cell.location_ind[id]
 */
  }

  /* "discretize/tree_ext.pyx":2377
 *                 _indArr[cell.index, id] = cell.location_ind[id]
 *             _levels[cell.index] = cell.level
 *         return indArr, levels             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self, state):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_indArr);
  __Pyx_GIVEREF(__pyx_v_indArr);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_indArr);
  __Pyx_INCREF(__pyx_v_levels);
  __Pyx_GIVEREF(__pyx_v_levels);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_levels);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":2367
 *         pass
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         cdef int id, dim = self._dim
 *         indArr = np.empty((self.nC, dim), dtype=np.int)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indArr);
  __Pyx_XDECREF(__pyx_v_levels);
  __PYX_XDEC_MEMVIEW(&__pyx_v__indArr, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v__levels, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2379
 *         return indArr, levels
 * 
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         indArr, levels = state
 *         xs = np.array(self._xs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_77__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_77__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_76__setstate__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_76__setstate__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_indArr = NULL;
  PyObject *__pyx_v_levels = NULL;
  PyObject *__pyx_v_xs = NULL;
  PyObject *__pyx_v_ys = NULL;
  PyObject *__pyx_v_zs = NULL;
  PyObject *__pyx_v_points = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "discretize/tree_ext.pyx":2380
 * 
 *     def __setstate__(self, state):
 *         indArr, levels = state             # <<<<<<<<<<<<<<
 *         xs = np.array(self._xs)
 *         ys = np.array(self._ys)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_state))) || (PyList_CheckExact(__pyx_v_state))) {
    PyObject* sequence = __pyx_v_state;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2380, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_state); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(0, 2380, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2380, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_indArr = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_levels = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2381
 *     def __setstate__(self, state):
 *         indArr, levels = state
 *         xs = np.array(self._xs)             # <<<<<<<<<<<<<<
 *         ys = np.array(self._ys)
 *         if self._dim == 3:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_v_self->_xs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2381, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->_xs, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2381, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2381, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_xs = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2382
 *         indArr, levels = state
 *         xs = np.array(self._xs)
 *         ys = np.array(self._ys)             # <<<<<<<<<<<<<<
 *         if self._dim == 3:
 *             zs = np.array(self._zs)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_v_self->_ys.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2382, __pyx_L1_error)}
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_self->_ys, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_ys = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2383
 *         xs = np.array(self._xs)
 *         ys = np.array(self._ys)
 *         if self._dim == 3:             # <<<<<<<<<<<<<<
 *             zs = np.array(self._zs)
 *             points = np.column_stack((xs[indArr[:, 0]],
 */
  __pyx_t_7 = ((__pyx_v_self->_dim == 3) != 0);
  if (__pyx_t_7) {

    /* "discretize/tree_ext.pyx":2384
 *         ys = np.array(self._ys)
 *         if self._dim == 3:
 *             zs = np.array(self._zs)             # <<<<<<<<<<<<<<
 *             points = np.column_stack((xs[indArr[:, 0]],
 *                                       ys[indArr[:, 1]],
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_v_self->_zs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2384, __pyx_L1_error)}
    __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_self->_zs, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2384, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_zs = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":2385
 *         if self._dim == 3:
 *             zs = np.array(self._zs)
 *             points = np.column_stack((xs[indArr[:, 0]],             # <<<<<<<<<<<<<<
 *                                       ys[indArr[:, 1]],
 *                                       zs[indArr[:, 2]]))
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_column_stack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__83); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetItem(__pyx_v_xs, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2386
 *             zs = np.array(self._zs)
 *             points = np.column_stack((xs[indArr[:, 0]],
 *                                       ys[indArr[:, 1]],             # <<<<<<<<<<<<<<
 *                                       zs[indArr[:, 2]]))
 *         else:
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__85); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_ys, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2387
 *             points = np.column_stack((xs[indArr[:, 0]],
 *                                       ys[indArr[:, 1]],
 *                                       zs[indArr[:, 2]]))             # <<<<<<<<<<<<<<
 *         else:
 *             points = np.column_stack((xs[indArr[:, 0]], ys[indArr[:, 1]]))
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__87); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyObject_GetItem(__pyx_v_zs, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "discretize/tree_ext.pyx":2385
 *         if self._dim == 3:
 *             zs = np.array(self._zs)
 *             points = np.column_stack((xs[indArr[:, 0]],             # <<<<<<<<<<<<<<
 *                                       ys[indArr[:, 1]],
 *                                       zs[indArr[:, 2]]))
 */
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);
    __pyx_t_6 = 0;
    __pyx_t_3 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2385, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2385, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2385, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2385, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2385, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "discretize/tree_ext.pyx":2383
 *         xs = np.array(self._xs)
 *         ys = np.array(self._ys)
 *         if self._dim == 3:             # <<<<<<<<<<<<<<
 *             zs = np.array(self._zs)
 *             points = np.column_stack((xs[indArr[:, 0]],
 */
    goto __pyx_L5;
  }

  /* "discretize/tree_ext.pyx":2389
 *                                       zs[indArr[:, 2]]))
 *         else:
 *             points = np.column_stack((xs[indArr[:, 0]], ys[indArr[:, 1]]))             # <<<<<<<<<<<<<<
 *         self.insert_cells(points, levels)
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_column_stack); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__89); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_GetItem(__pyx_v_xs, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__91); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_GetItem(__pyx_v_ys, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
    __pyx_t_5 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2389, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2389, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2389, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_points = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L5:;

  /* "discretize/tree_ext.pyx":2390
 *         else:
 *             points = np.column_stack((xs[indArr[:, 0]], ys[indArr[:, 1]]))
 *         self.insert_cells(points, levels)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_insert_cells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, __pyx_v_levels};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2390, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_points, __pyx_v_levels};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2390, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_9, __pyx_v_points);
    __Pyx_INCREF(__pyx_v_levels);
    __Pyx_GIVEREF(__pyx_v_levels);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_9, __pyx_v_levels);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":2379
 *         return indArr, levels
 * 
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         indArr, levels = state
 *         xs = np.array(self._xs)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indArr);
  __Pyx_XDECREF(__pyx_v_levels);
  __Pyx_XDECREF(__pyx_v_xs);
  __Pyx_XDECREF(__pyx_v_ys);
  __Pyx_XDECREF(__pyx_v_zs);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2392
 *         self.insert_cells(points, levels)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.nC
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_10discretize_8tree_ext_9_TreeMesh_79__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_10discretize_8tree_ext_9_TreeMesh_79__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_78__len__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_10discretize_8tree_ext_9_TreeMesh_78__len__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "discretize/tree_ext.pyx":2393
 * 
 *     def __len__(self):
 *         return self.nC             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":2392
 *         self.insert_cells(points, levels)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.nC
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2395
 *         return self.nC
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if isinstance(key, slice):
 *             # Get the start, stop, and step from the slice
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_81__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_81__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_80__getitem__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_80__getitem__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self, PyObject *__pyx_v_key) {
  struct __pyx_obj_10discretize_8tree_ext_Cell *__pyx_v_pycell = NULL;
  PyObject *__pyx_v_ii = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  size_t __pyx_t_11;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "discretize/tree_ext.pyx":2396
 * 
 *     def __getitem__(self, key):
 *         if isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             # Get the start, stop, and step from the slice
 *             return [self[ii] for ii in range(*key.indices(len(self)))]
 */
  __pyx_t_1 = PySlice_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":2398
 *         if isinstance(key, slice):
 *             # Get the start, stop, and step from the slice
 *             return [self[ii] for ii in range(*key.indices(len(self)))]             # <<<<<<<<<<<<<<
 *         elif isinstance(key, int):
 *             if key < 0:  # Handle negative indices
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_indices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_Tuple(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2398, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2398, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 2398, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2398, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_ii, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_ii); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":2396
 * 
 *     def __getitem__(self, key):
 *         if isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             # Get the start, stop, and step from the slice
 *             return [self[ii] for ii in range(*key.indices(len(self)))]
 */
  }

  /* "discretize/tree_ext.pyx":2399
 *             # Get the start, stop, and step from the slice
 *             return [self[ii] for ii in range(*key.indices(len(self)))]
 *         elif isinstance(key, int):             # <<<<<<<<<<<<<<
 *             if key < 0:  # Handle negative indices
 *                 key += len(self)
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_key); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":2400
 *             return [self[ii] for ii in range(*key.indices(len(self)))]
 *         elif isinstance(key, int):
 *             if key < 0:  # Handle negative indices             # <<<<<<<<<<<<<<
 *                 key += len(self)
 *             if key >= len(self):
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_key, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2400, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "discretize/tree_ext.pyx":2401
 *         elif isinstance(key, int):
 *             if key < 0:  # Handle negative indices
 *                 key += len(self)             # <<<<<<<<<<<<<<
 *             if key >= len(self):
 *                 raise IndexError(
 */
      __pyx_t_6 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 2401, __pyx_L1_error)
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_key, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "discretize/tree_ext.pyx":2400
 *             return [self[ii] for ii in range(*key.indices(len(self)))]
 *         elif isinstance(key, int):
 *             if key < 0:  # Handle negative indices             # <<<<<<<<<<<<<<
 *                 key += len(self)
 *             if key >= len(self):
 */
    }

    /* "discretize/tree_ext.pyx":2402
 *             if key < 0:  # Handle negative indices
 *                 key += len(self)
 *             if key >= len(self):             # <<<<<<<<<<<<<<
 *                 raise IndexError(
 *                     "The index ({0:d}) is out of range.".format(key)
 */
    __pyx_t_6 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 2402, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_key, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "discretize/tree_ext.pyx":2404
 *             if key >= len(self):
 *                 raise IndexError(
 *                     "The index ({0:d}) is out of range.".format(key)             # <<<<<<<<<<<<<<
 *                 )
 *             pycell = Cell()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_The_index_0_d_is_out_of_range, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2404, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2404, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2404, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2404, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_key);
          __Pyx_GIVEREF(__pyx_v_key);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_key);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2404, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "discretize/tree_ext.pyx":2403
 *                 key += len(self)
 *             if key >= len(self):
 *                 raise IndexError(             # <<<<<<<<<<<<<<
 *                     "The index ({0:d}) is out of range.".format(key)
 *                 )
 */
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 2403, __pyx_L1_error)

      /* "discretize/tree_ext.pyx":2402
 *             if key < 0:  # Handle negative indices
 *                 key += len(self)
 *             if key >= len(self):             # <<<<<<<<<<<<<<
 *                 raise IndexError(
 *                     "The index ({0:d}) is out of range.".format(key)
 */
    }

    /* "discretize/tree_ext.pyx":2406
 *                     "The index ({0:d}) is out of range.".format(key)
 *                 )
 *             pycell = Cell()             # <<<<<<<<<<<<<<
 *             pycell._set(self.tree.cells[key])
 *             return pycell
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10discretize_8tree_ext_Cell), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_pycell = ((struct __pyx_obj_10discretize_8tree_ext_Cell *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "discretize/tree_ext.pyx":2407
 *                 )
 *             pycell = Cell()
 *             pycell._set(self.tree.cells[key])             # <<<<<<<<<<<<<<
 *             return pycell
 *         else:
 */
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_v_key); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 2407, __pyx_L1_error)
    ((struct __pyx_vtabstruct_10discretize_8tree_ext_Cell *)__pyx_v_pycell->__pyx_vtab)->_set(__pyx_v_pycell, (__pyx_v_self->tree->cells[__pyx_t_11]));

    /* "discretize/tree_ext.pyx":2408
 *             pycell = Cell()
 *             pycell._set(self.tree.cells[key])
 *             return pycell             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Invalid argument type.")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_pycell));
    __pyx_r = ((PyObject *)__pyx_v_pycell);
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":2399
 *             # Get the start, stop, and step from the slice
 *             return [self[ii] for ii in range(*key.indices(len(self)))]
 *         elif isinstance(key, int):             # <<<<<<<<<<<<<<
 *             if key < 0:  # Handle negative indices
 *                 key += len(self)
 */
  }

  /* "discretize/tree_ext.pyx":2410
 *             return pycell
 *         else:
 *             raise TypeError("Invalid argument type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2410, __pyx_L1_error)
  }

  /* "discretize/tree_ext.pyx":2395
 *         return self.nC
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if isinstance(key, slice):
 *             # Get the start, stop, and step from the slice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pycell);
  __Pyx_XDECREF(__pyx_v_ii);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2413
 * 
 *     @property
 *     def _ubc_indArr(self):             # <<<<<<<<<<<<<<
 *         if self.__ubc_indArr is not None:
 *             return self.__ubc_indArr
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_ubc_indArr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_ubc_indArr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_ubc_indArr___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_11_ubc_indArr___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_indArr = NULL;
  PyObject *__pyx_v_levels = NULL;
  PyObject *__pyx_v_max_level = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":2414
 *     @property
 *     def _ubc_indArr(self):
 *         if self.__ubc_indArr is not None:             # <<<<<<<<<<<<<<
 *             return self.__ubc_indArr
 *         indArr, levels = self.__getstate__()
 */
  __pyx_t_1 = (__pyx_v_self->__pyx___ubc_indArr != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":2415
 *     def _ubc_indArr(self):
 *         if self.__ubc_indArr is not None:
 *             return self.__ubc_indArr             # <<<<<<<<<<<<<<
 *         indArr, levels = self.__getstate__()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->__pyx___ubc_indArr);
    __pyx_r = __pyx_v_self->__pyx___ubc_indArr;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":2414
 *     @property
 *     def _ubc_indArr(self):
 *         if self.__ubc_indArr is not None:             # <<<<<<<<<<<<<<
 *             return self.__ubc_indArr
 *         indArr, levels = self.__getstate__()
 */
  }

  /* "discretize/tree_ext.pyx":2416
 *         if self.__ubc_indArr is not None:
 *             return self.__ubc_indArr
 *         indArr, levels = self.__getstate__()             # <<<<<<<<<<<<<<
 * 
 *         max_level = self.tree.max_level
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2416, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2416, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2416, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 2416, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2416, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_indArr = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_levels = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":2418
 *         indArr, levels = self.__getstate__()
 * 
 *         max_level = self.tree.max_level             # <<<<<<<<<<<<<<
 * 
 *         levels = 1<<(max_level - levels)
 */
  __pyx_t_3 = __Pyx_PyInt_From_int_t(__pyx_v_self->tree->max_level); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_max_level = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2420
 *         max_level = self.tree.max_level
 * 
 *         levels = 1<<(max_level - levels)             # <<<<<<<<<<<<<<
 * 
 *         indArr[:, 2] = (self._zs.shape[0]-1) - indArr[:, 2]
 */
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_max_level, __pyx_v_levels); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Lshift(__pyx_int_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_levels, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":2422
 *         levels = 1<<(max_level - levels)
 * 
 *         indArr[:, 2] = (self._zs.shape[0]-1) - indArr[:, 2]             # <<<<<<<<<<<<<<
 *         indArr = (indArr - levels[:, None])//2
 *         indArr += 1
 */
  if (unlikely(!__pyx_v_self->_zs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2422, __pyx_L1_error)}
  __pyx_t_5 = PyInt_FromSsize_t(((__pyx_v_self->_zs.shape[0]) - 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__94); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_indArr, __pyx_tuple__96, __pyx_t_4) < 0)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":2423
 * 
 *         indArr[:, 2] = (self._zs.shape[0]-1) - indArr[:, 2]
 *         indArr = (indArr - levels[:, None])//2             # <<<<<<<<<<<<<<
 *         indArr += 1
 * 
 */
  __pyx_t_4 = PyObject_GetItem(__pyx_v_levels, __pyx_tuple__98); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_indArr, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_FloorDivideObjC(__pyx_t_3, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_indArr, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":2424
 *         indArr[:, 2] = (self._zs.shape[0]-1) - indArr[:, 2]
 *         indArr = (indArr - levels[:, None])//2
 *         indArr += 1             # <<<<<<<<<<<<<<
 * 
 *         self.__ubc_indArr = (indArr, levels)
 */
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_indArr, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF_SET(__pyx_v_indArr, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":2426
 *         indArr += 1
 * 
 *         self.__ubc_indArr = (indArr, levels)             # <<<<<<<<<<<<<<
 *         return self.__ubc_indArr
 * 
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_indArr);
  __Pyx_GIVEREF(__pyx_v_indArr);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_indArr);
  __Pyx_INCREF(__pyx_v_levels);
  __Pyx_GIVEREF(__pyx_v_levels);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_levels);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->__pyx___ubc_indArr);
  __Pyx_DECREF(__pyx_v_self->__pyx___ubc_indArr);
  __pyx_v_self->__pyx___ubc_indArr = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "discretize/tree_ext.pyx":2427
 * 
 *         self.__ubc_indArr = (indArr, levels)
 *         return self.__ubc_indArr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->__pyx___ubc_indArr);
  __pyx_r = __pyx_v_self->__pyx___ubc_indArr;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":2413
 * 
 *     @property
 *     def _ubc_indArr(self):             # <<<<<<<<<<<<<<
 *         if self.__ubc_indArr is not None:
 *             return self.__ubc_indArr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._ubc_indArr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indArr);
  __Pyx_XDECREF(__pyx_v_levels);
  __Pyx_XDECREF(__pyx_v_max_level);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2430
 * 
 *     @property
 *     def _ubc_order(self):             # <<<<<<<<<<<<<<
 *         if self.__ubc_order is not None:
 *             return self.__ubc_order
 */

/* Python wrapper */
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_10_ubc_order_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10discretize_8tree_ext_9_TreeMesh_10_ubc_order_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10discretize_8tree_ext_9_TreeMesh_10_ubc_order___get__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10discretize_8tree_ext_9_TreeMesh_10_ubc_order___get__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  PyObject *__pyx_v_indArr = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "discretize/tree_ext.pyx":2431
 *     @property
 *     def _ubc_order(self):
 *         if self.__ubc_order is not None:             # <<<<<<<<<<<<<<
 *             return self.__ubc_order
 *         indArr, _ = self._ubc_indArr
 */
  __pyx_t_1 = (__pyx_v_self->__pyx___ubc_order != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "discretize/tree_ext.pyx":2432
 *     def _ubc_order(self):
 *         if self.__ubc_order is not None:
 *             return self.__ubc_order             # <<<<<<<<<<<<<<
 *         indArr, _ = self._ubc_indArr
 *         self.__ubc_order = np.lexsort((indArr[:, 0], indArr[:, 1], indArr[:, 2]))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->__pyx___ubc_order);
    __pyx_r = __pyx_v_self->__pyx___ubc_order;
    goto __pyx_L0;

    /* "discretize/tree_ext.pyx":2431
 *     @property
 *     def _ubc_order(self):
 *         if self.__ubc_order is not None:             # <<<<<<<<<<<<<<
 *             return self.__ubc_order
 *         indArr, _ = self._ubc_indArr
 */
  }

  /* "discretize/tree_ext.pyx":2433
 *         if self.__ubc_order is not None:
 *             return self.__ubc_order
 *         indArr, _ = self._ubc_indArr             # <<<<<<<<<<<<<<
 *         self.__ubc_order = np.lexsort((indArr[:, 0], indArr[:, 1], indArr[:, 2]))
 *         return self.__ubc_order
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ubc_indArr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2433, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 2433, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2433, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_indArr = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v__ = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "discretize/tree_ext.pyx":2434
 *             return self.__ubc_order
 *         indArr, _ = self._ubc_indArr
 *         self.__ubc_order = np.lexsort((indArr[:, 0], indArr[:, 1], indArr[:, 2]))             # <<<<<<<<<<<<<<
 *         return self.__ubc_order
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_lexsort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__100); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__102); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyObject_GetItem(__pyx_v_indArr, __pyx_tuple__104); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2434, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2434, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_9};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2434, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->__pyx___ubc_order);
  __Pyx_DECREF(__pyx_v_self->__pyx___ubc_order);
  __pyx_v_self->__pyx___ubc_order = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "discretize/tree_ext.pyx":2435
 *         indArr, _ = self._ubc_indArr
 *         self.__ubc_order = np.lexsort((indArr[:, 0], indArr[:, 1], indArr[:, 2]))
 *         return self.__ubc_order             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->__pyx___ubc_order);
  __pyx_r = __pyx_v_self->__pyx___ubc_order;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":2430
 * 
 *     @property
 *     def _ubc_order(self):             # <<<<<<<<<<<<<<
 *         if self.__ubc_order is not None:
 *             return self.__ubc_order
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("discretize.tree_ext._TreeMesh._ubc_order.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indArr);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2437
 *         return self.__ubc_order
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.tree
 *         del self.wrapper
 */

/* Python wrapper */
static void __pyx_pw_10discretize_8tree_ext_9_TreeMesh_83__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10discretize_8tree_ext_9_TreeMesh_83__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10discretize_8tree_ext_9_TreeMesh_82__dealloc__(((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10discretize_8tree_ext_9_TreeMesh_82__dealloc__(struct __pyx_obj_10discretize_8tree_ext__TreeMesh *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "discretize/tree_ext.pyx":2438
 * 
 *     def __dealloc__(self):
 *         del self.tree             # <<<<<<<<<<<<<<
 *         del self.wrapper
 * 
 */
  delete __pyx_v_self->tree;

  /* "discretize/tree_ext.pyx":2439
 *     def __dealloc__(self):
 *         del self.tree
 *         del self.wrapper             # <<<<<<<<<<<<<<
 * 
 * cdef inline double _clip01(double x) nogil:
 */
  delete __pyx_v_self->wrapper;

  /* "discretize/tree_ext.pyx":2437
 *         return self.__ubc_order
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.tree
 *         del self.wrapper
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "discretize/tree_ext.pyx":2441
 *         del self.wrapper
 * 
 * cdef inline double _clip01(double x) nogil:             # <<<<<<<<<<<<<<
 *     return min(1, max(x, 0))
 * 
 */

static CYTHON_INLINE double __pyx_f_10discretize_8tree_ext__clip01(double __pyx_v_x) {
  double __pyx_r;
  long __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;

  /* "discretize/tree_ext.pyx":2442
 * 
 * cdef inline double _clip01(double x) nogil:
 *     return min(1, max(x, 0))             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = __pyx_v_x;
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_1 = 1;
  if (((__pyx_t_2 < __pyx_t_1) != 0)) {
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "discretize/tree_ext.pyx":2441
 *         del self.wrapper
 * 
 * cdef inline double _clip01(double x) nogil:             # <<<<<<<<<<<<<<
 *     return min(1, max(x, 0))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "discretize/tree_ext.pyx":2445
 * 
 * @cython.cdivision(True)
 * cdef void _project_point_to_edge(double *p, double *p0, double *p1,             # <<<<<<<<<<<<<<
 *                                  int dim, double *out) nogil:
 *     # dim can equal 2 or 3
 */

static void __pyx_f_10discretize_8tree_ext__project_point_to_edge(double *__pyx_v_p, double *__pyx_v_p0, double *__pyx_v_p1, int __pyx_v_dim, double *__pyx_v_out) {
  double __pyx_v_v1;
  double __pyx_v_v2;
  double __pyx_v_t;
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "discretize/tree_ext.pyx":2451
 *     # Projects a point onto a line segment
 * 
 *     cdef double v1=0.0, v2=0.0, t = 0.0             # <<<<<<<<<<<<<<
 *     cdef int i
 * 
 */
  __pyx_v_v1 = 0.0;
  __pyx_v_v2 = 0.0;
  __pyx_v_t = 0.0;

  /* "discretize/tree_ext.pyx":2454
 *     cdef int i
 * 
 *     for i in range(dim):             # <<<<<<<<<<<<<<
 *         v1 += (p[i] - p0[i])*(p1[i] - p0[i])
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])
 */
  __pyx_t_1 = __pyx_v_dim;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "discretize/tree_ext.pyx":2455
 * 
 *     for i in range(dim):
 *         v1 += (p[i] - p0[i])*(p1[i] - p0[i])             # <<<<<<<<<<<<<<
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])
 *     t = _clip01(v1/v2)
 */
    __pyx_v_v1 = (__pyx_v_v1 + (((__pyx_v_p[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i])) * ((__pyx_v_p1[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i]))));

    /* "discretize/tree_ext.pyx":2456
 *     for i in range(dim):
 *         v1 += (p[i] - p0[i])*(p1[i] - p0[i])
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])             # <<<<<<<<<<<<<<
 *     t = _clip01(v1/v2)
 *     for i in range(dim):
 */
    __pyx_v_v2 = (__pyx_v_v2 + (((__pyx_v_p1[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i])) * ((__pyx_v_p1[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i]))));
  }

  /* "discretize/tree_ext.pyx":2457
 *         v1 += (p[i] - p0[i])*(p1[i] - p0[i])
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])
 *     t = _clip01(v1/v2)             # <<<<<<<<<<<<<<
 *     for i in range(dim):
 *         out[i] = (1.0 - t)*p0[i] + t*p1[i]
 */
  __pyx_v_t = __pyx_f_10discretize_8tree_ext__clip01((__pyx_v_v1 / __pyx_v_v2));

  /* "discretize/tree_ext.pyx":2458
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])
 *     t = _clip01(v1/v2)
 *     for i in range(dim):             # <<<<<<<<<<<<<<
 *         out[i] = (1.0 - t)*p0[i] + t*p1[i]
 * 
 */
  __pyx_t_1 = __pyx_v_dim;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "discretize/tree_ext.pyx":2459
 *     t = _clip01(v1/v2)
 *     for i in range(dim):
 *         out[i] = (1.0 - t)*p0[i] + t*p1[i]             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
    (__pyx_v_out[__pyx_v_i]) = (((1.0 - __pyx_v_t) * (__pyx_v_p0[__pyx_v_i])) + (__pyx_v_t * (__pyx_v_p1[__pyx_v_i])));
  }

  /* "discretize/tree_ext.pyx":2445
 * 
 * @cython.cdivision(True)
 * cdef void _project_point_to_edge(double *p, double *p0, double *p1,             # <<<<<<<<<<<<<<
 *                                  int dim, double *out) nogil:
 *     # dim can equal 2 or 3
 */

  /* function exit code */
}

/* "discretize/tree_ext.pyx":2462
 * 
 * @cython.cdivision(True)
 * cdef void _project_point_to_triangle(double *p, double *p0, double *p1, double *p2,             # <<<<<<<<<<<<<<
 *                                     int dim, double *out) nogil:
 *     #dim can equal 2 or 3
 */

static void __pyx_f_10discretize_8tree_ext__project_point_to_triangle(double *__pyx_v_p, double *__pyx_v_p0, double *__pyx_v_p1, double *__pyx_v_p2, int __pyx_v_dim, double *__pyx_v_out) {
  double __pyx_v_bary[3];
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "discretize/tree_ext.pyx":2467
 *     cdef double[3] bary
 *     cdef int i
 *     _barycentric_triangle(p, p0, p1, p2, bary, dim)             # <<<<<<<<<<<<<<
 *     if bary[0] < 0:
 *         _project_point_to_edge(p, p1, p2, dim, out)
 */
  __pyx_f_10discretize_8tree_ext__barycentric_triangle(__pyx_v_p, __pyx_v_p0, __pyx_v_p1, __pyx_v_p2, __pyx_v_bary, __pyx_v_dim);

  /* "discretize/tree_ext.pyx":2468
 *     cdef int i
 *     _barycentric_triangle(p, p0, p1, p2, bary, dim)
 *     if bary[0] < 0:             # <<<<<<<<<<<<<<
 *         _project_point_to_edge(p, p1, p2, dim, out)
 *     elif bary[1] < 0:
 */
  __pyx_t_1 = (((__pyx_v_bary[0]) < 0.0) != 0);
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":2469
 *     _barycentric_triangle(p, p0, p1, p2, bary, dim)
 *     if bary[0] < 0:
 *         _project_point_to_edge(p, p1, p2, dim, out)             # <<<<<<<<<<<<<<
 *     elif bary[1] < 0:
 *         _project_point_to_edge(p, p0, p2, dim, out)
 */
    __pyx_f_10discretize_8tree_ext__project_point_to_edge(__pyx_v_p, __pyx_v_p1, __pyx_v_p2, __pyx_v_dim, __pyx_v_out);

    /* "discretize/tree_ext.pyx":2468
 *     cdef int i
 *     _barycentric_triangle(p, p0, p1, p2, bary, dim)
 *     if bary[0] < 0:             # <<<<<<<<<<<<<<
 *         _project_point_to_edge(p, p1, p2, dim, out)
 *     elif bary[1] < 0:
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":2470
 *     if bary[0] < 0:
 *         _project_point_to_edge(p, p1, p2, dim, out)
 *     elif bary[1] < 0:             # <<<<<<<<<<<<<<
 *         _project_point_to_edge(p, p0, p2, dim, out)
 *     elif bary[2] < 0:
 */
  __pyx_t_1 = (((__pyx_v_bary[1]) < 0.0) != 0);
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":2471
 *         _project_point_to_edge(p, p1, p2, dim, out)
 *     elif bary[1] < 0:
 *         _project_point_to_edge(p, p0, p2, dim, out)             # <<<<<<<<<<<<<<
 *     elif bary[2] < 0:
 *         _project_point_to_edge(p, p0, p1, dim, out)
 */
    __pyx_f_10discretize_8tree_ext__project_point_to_edge(__pyx_v_p, __pyx_v_p0, __pyx_v_p2, __pyx_v_dim, __pyx_v_out);

    /* "discretize/tree_ext.pyx":2470
 *     if bary[0] < 0:
 *         _project_point_to_edge(p, p1, p2, dim, out)
 *     elif bary[1] < 0:             # <<<<<<<<<<<<<<
 *         _project_point_to_edge(p, p0, p2, dim, out)
 *     elif bary[2] < 0:
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":2472
 *     elif bary[1] < 0:
 *         _project_point_to_edge(p, p0, p2, dim, out)
 *     elif bary[2] < 0:             # <<<<<<<<<<<<<<
 *         _project_point_to_edge(p, p0, p1, dim, out)
 *     else:
 */
  __pyx_t_1 = (((__pyx_v_bary[2]) < 0.0) != 0);
  if (__pyx_t_1) {

    /* "discretize/tree_ext.pyx":2473
 *         _project_point_to_edge(p, p0, p2, dim, out)
 *     elif bary[2] < 0:
 *         _project_point_to_edge(p, p0, p1, dim, out)             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dim):
 */
    __pyx_f_10discretize_8tree_ext__project_point_to_edge(__pyx_v_p, __pyx_v_p0, __pyx_v_p1, __pyx_v_dim, __pyx_v_out);

    /* "discretize/tree_ext.pyx":2472
 *     elif bary[1] < 0:
 *         _project_point_to_edge(p, p0, p2, dim, out)
 *     elif bary[2] < 0:             # <<<<<<<<<<<<<<
 *         _project_point_to_edge(p, p0, p1, dim, out)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "discretize/tree_ext.pyx":2475
 *         _project_point_to_edge(p, p0, p1, dim, out)
 *     else:
 *         for i in range(dim):             # <<<<<<<<<<<<<<
 *             out[i] = bary[0]*p0[i] + bary[1]*p1[i] + bary[2]*p2[i]
 * 
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_dim;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "discretize/tree_ext.pyx":2476
 *     else:
 *         for i in range(dim):
 *             out[i] = bary[0]*p0[i] + bary[1]*p1[i] + bary[2]*p2[i]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      (__pyx_v_out[__pyx_v_i]) = ((((__pyx_v_bary[0]) * (__pyx_v_p0[__pyx_v_i])) + ((__pyx_v_bary[1]) * (__pyx_v_p1[__pyx_v_i]))) + ((__pyx_v_bary[2]) * (__pyx_v_p2[__pyx_v_i])));
    }
  }
  __pyx_L3:;

  /* "discretize/tree_ext.pyx":2462
 * 
 * @cython.cdivision(True)
 * cdef void _project_point_to_triangle(double *p, double *p0, double *p1, double *p2,             # <<<<<<<<<<<<<<
 *                                     int dim, double *out) nogil:
 *     #dim can equal 2 or 3
 */

  /* function exit code */
}

/* "discretize/tree_ext.pyx":2480
 * 
 * @cython.cdivision(True)
 * cdef void _barycentric_edge(double *p, double *p0, double *p1, double *bary, int dim) nogil:             # <<<<<<<<<<<<<<
 *     cdef double v1=0.0, v2=0.0
 *     cdef int i
 */

static void __pyx_f_10discretize_8tree_ext__barycentric_edge(double *__pyx_v_p, double *__pyx_v_p0, double *__pyx_v_p1, double *__pyx_v_bary, int __pyx_v_dim) {
  double __pyx_v_v1;
  double __pyx_v_v2;
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "discretize/tree_ext.pyx":2481
 * @cython.cdivision(True)
 * cdef void _barycentric_edge(double *p, double *p0, double *p1, double *bary, int dim) nogil:
 *     cdef double v1=0.0, v2=0.0             # <<<<<<<<<<<<<<
 *     cdef int i
 * 
 */
  __pyx_v_v1 = 0.0;
  __pyx_v_v2 = 0.0;

  /* "discretize/tree_ext.pyx":2484
 *     cdef int i
 * 
 *     for i in range(dim):             # <<<<<<<<<<<<<<
 *         v1 += (p[i] - p0[i])*(p1[i] - p0[i])
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])
 */
  __pyx_t_1 = __pyx_v_dim;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "discretize/tree_ext.pyx":2485
 * 
 *     for i in range(dim):
 *         v1 += (p[i] - p0[i])*(p1[i] - p0[i])             # <<<<<<<<<<<<<<
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])
 *     bary[1] = v1/v2
 */
    __pyx_v_v1 = (__pyx_v_v1 + (((__pyx_v_p[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i])) * ((__pyx_v_p1[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i]))));

    /* "discretize/tree_ext.pyx":2486
 *     for i in range(dim):
 *         v1 += (p[i] - p0[i])*(p1[i] - p0[i])
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])             # <<<<<<<<<<<<<<
 *     bary[1] = v1/v2
 *     bary[0] = 1 - bary[1]
 */
    __pyx_v_v2 = (__pyx_v_v2 + (((__pyx_v_p1[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i])) * ((__pyx_v_p1[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i]))));
  }

  /* "discretize/tree_ext.pyx":2487
 *         v1 += (p[i] - p0[i])*(p1[i] - p0[i])
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])
 *     bary[1] = v1/v2             # <<<<<<<<<<<<<<
 *     bary[0] = 1 - bary[1]
 * 
 */
  (__pyx_v_bary[1]) = (__pyx_v_v1 / __pyx_v_v2);

  /* "discretize/tree_ext.pyx":2488
 *         v2 += (p1[i] - p0[i])*(p1[i] - p0[i])
 *     bary[1] = v1/v2
 *     bary[0] = 1 - bary[1]             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  (__pyx_v_bary[0]) = (1.0 - (__pyx_v_bary[1]));

  /* "discretize/tree_ext.pyx":2480
 * 
 * @cython.cdivision(True)
 * cdef void _barycentric_edge(double *p, double *p0, double *p1, double *bary, int dim) nogil:             # <<<<<<<<<<<<<<
 *     cdef double v1=0.0, v2=0.0
 *     cdef int i
 */

  /* function exit code */
}

/* "discretize/tree_ext.pyx":2491
 * 
 * @cython.cdivision(True)
 * cdef void _barycentric_triangle(double *p, double *p0, double *p1, double *p2,             # <<<<<<<<<<<<<<
 *                             double *bary, int dim) nogil:
 *     cdef double d00=0, d01=0, d11=0, d20=0, d21=0
 */

static void __pyx_f_10discretize_8tree_ext__barycentric_triangle(double *__pyx_v_p, double *__pyx_v_p0, double *__pyx_v_p1, double *__pyx_v_p2, double *__pyx_v_bary, int __pyx_v_dim) {
  double __pyx_v_d00;
  double __pyx_v_d01;
  double __pyx_v_d11;
  double __pyx_v_d20;
  double __pyx_v_d21;
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "discretize/tree_ext.pyx":2493
 * cdef void _barycentric_triangle(double *p, double *p0, double *p1, double *p2,
 *                             double *bary, int dim) nogil:
 *     cdef double d00=0, d01=0, d11=0, d20=0, d21=0             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(dim):
 */
  __pyx_v_d00 = 0.0;
  __pyx_v_d01 = 0.0;
  __pyx_v_d11 = 0.0;
  __pyx_v_d20 = 0.0;
  __pyx_v_d21 = 0.0;

  /* "discretize/tree_ext.pyx":2495
 *     cdef double d00=0, d01=0, d11=0, d20=0, d21=0
 *     cdef int i
 *     for i in range(dim):             # <<<<<<<<<<<<<<
 *         bary[0] = p1[i] - p0[i]
 *         bary[1] = p2[i] - p0[i]
 */
  __pyx_t_1 = __pyx_v_dim;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "discretize/tree_ext.pyx":2496
 *     cdef int i
 *     for i in range(dim):
 *         bary[0] = p1[i] - p0[i]             # <<<<<<<<<<<<<<
 *         bary[1] = p2[i] - p0[i]
 *         bary[2] = p[i] - p0[i]
 */
    (__pyx_v_bary[0]) = ((__pyx_v_p1[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i]));

    /* "discretize/tree_ext.pyx":2497
 *     for i in range(dim):
 *         bary[0] = p1[i] - p0[i]
 *         bary[1] = p2[i] - p0[i]             # <<<<<<<<<<<<<<
 *         bary[2] = p[i] - p0[i]
 * 
 */
    (__pyx_v_bary[1]) = ((__pyx_v_p2[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i]));

    /* "discretize/tree_ext.pyx":2498
 *         bary[0] = p1[i] - p0[i]
 *         bary[1] = p2[i] - p0[i]
 *         bary[2] = p[i] - p0[i]             # <<<<<<<<<<<<<<
 * 
 *         d00 += bary[0]*bary[0]
 */
    (__pyx_v_bary[2]) = ((__pyx_v_p[__pyx_v_i]) - (__pyx_v_p0[__pyx_v_i]));

    /* "discretize/tree_ext.pyx":2500
 *         bary[2] = p[i] - p0[i]
 * 
 *         d00 += bary[0]*bary[0]             # <<<<<<<<<<<<<<
 *         d01 += bary[0]*bary[1]
 *         d11 += bary[1]*bary[1]
 */
    __pyx_v_d00 = (__pyx_v_d00 + ((__pyx_v_bary[0]) * (__pyx_v_bary[0])));

    /* "discretize/tree_ext.pyx":2501
 * 
 *         d00 += bary[0]*bary[0]
 *         d01 += bary[0]*bary[1]             # <<<<<<<<<<<<<<
 *         d11 += bary[1]*bary[1]
 *         d20 += bary[2]*bary[0]
 */
    __pyx_v_d01 = (__pyx_v_d01 + ((__pyx_v_bary[0]) * (__pyx_v_bary[1])));

    /* "discretize/tree_ext.pyx":2502
 *         d00 += bary[0]*bary[0]
 *         d01 += bary[0]*bary[1]
 *         d11 += bary[1]*bary[1]             # <<<<<<<<<<<<<<
 *         d20 += bary[2]*bary[0]
 *         d21 += bary[2]*bary[1]
 */
    __pyx_v_d11 = (__pyx_v_d11 + ((__pyx_v_bary[1]) * (__pyx_v_bary[1])));

    /* "discretize/tree_ext.pyx":2503
 *         d01 += bary[0]*bary[1]
 *         d11 += bary[1]*bary[1]
 *         d20 += bary[2]*bary[0]             # <<<<<<<<<<<<<<
 *         d21 += bary[2]*bary[1]
 * 
 */
    __pyx_v_d20 = (__pyx_v_d20 + ((__pyx_v_bary[2]) * (__pyx_v_bary[0])));

    /* "discretize/tree_ext.pyx":2504
 *         d11 += bary[1]*bary[1]
 *         d20 += bary[2]*bary[0]
 *         d21 += bary[2]*bary[1]             # <<<<<<<<<<<<<<
 * 
 *     bary[0] = 1.0/(d00*d11 - d01*d01)
 */
    __pyx_v_d21 = (__pyx_v_d21 + ((__pyx_v_bary[2]) * (__pyx_v_bary[1])));
  }

  /* "discretize/tree_ext.pyx":2506
 *         d21 += bary[2]*bary[1]
 * 
 *     bary[0] = 1.0/(d00*d11 - d01*d01)             # <<<<<<<<<<<<<<
 *     bary[1] = (d11*d20 - d01*d21)*bary[0]
 *     bary[2] = (d00*d21 - d01*d20)*bary[0]
 */
  (__pyx_v_bary[0]) = (1.0 / ((__pyx_v_d00 * __pyx_v_d11) - (__pyx_v_d01 * __pyx_v_d01)));

  /* "discretize/tree_ext.pyx":2507
 * 
 *     bary[0] = 1.0/(d00*d11 - d01*d01)
 *     bary[1] = (d11*d20 - d01*d21)*bary[0]             # <<<<<<<<<<<<<<
 *     bary[2] = (d00*d21 - d01*d20)*bary[0]
 *     bary[0] = 1.0 - bary[1] - bary[2]
 */
  (__pyx_v_bary[1]) = (((__pyx_v_d11 * __pyx_v_d20) - (__pyx_v_d01 * __pyx_v_d21)) * (__pyx_v_bary[0]));

  /* "discretize/tree_ext.pyx":2508
 *     bary[0] = 1.0/(d00*d11 - d01*d01)
 *     bary[1] = (d11*d20 - d01*d21)*bary[0]
 *     bary[2] = (d00*d21 - d01*d20)*bary[0]             # <<<<<<<<<<<<<<
 *     bary[0] = 1.0 - bary[1] - bary[2]
 */
  (__pyx_v_bary[2]) = (((__pyx_v_d00 * __pyx_v_d21) - (__pyx_v_d01 * __pyx_v_d20)) * (__pyx_v_bary[0]));

  /* "discretize/tree_ext.pyx":2509
 *     bary[1] = (d11*d20 - d01*d21)*bary[0]
 *     bary[2] = (d00*d21 - d01*d20)*bary[0]
 *     bary[0] = 1.0 - bary[1] - bary[2]             # <<<<<<<<<<<<<<
 */
  (__pyx_v_bary[0]) = ((1.0 - (__pyx_v_bary[1])) - (__pyx_v_bary[2]));

  /* "discretize/tree_ext.pyx":2491
 * 
 * @cython.cdivision(True)
 * cdef void _barycentric_triangle(double *p, double *p0, double *p1, double *p2,             # <<<<<<<<<<<<<<
 *                             double *bary, int dim) nogil:
 *     cdef double d00=0, d01=0, d11=0, d20=0, d21=0
 */

  /* function exit code */
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 218, __pyx_L1_error)

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 222, __pyx_L1_error)

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 259, __pyx_L1_error)

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 278, __pyx_L1_error)
      break;
    }

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 796, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 799, __pyx_L1_error)

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__109, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 803, __pyx_L1_error)

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__110, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 823, __pyx_L1_error)

        /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 987, __pyx_L3_error)

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":988
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__111, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 993, __pyx_L3_error)

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__112, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 999, __pyx_L3_error)

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__113, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_double", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_double", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(double *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c_2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(2, 120, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(2, 120, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 120, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 120, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 121, __pyx_L3_error)
    } else {

      /* "View.MemoryView":121
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(2, 120, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(2, 120, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":127
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 127, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(2, 127, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":128
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":130
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":131
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__114, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 131, __pyx_L1_error)

    /* "View.MemoryView":130
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":133
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":134
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 134, __pyx_L1_error)

    /* "View.MemoryView":133
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":136
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":137
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__116, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":136
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":138
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(2, 138, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":139
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_self->_format); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(2, 139, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_6;

  /* "View.MemoryView":142
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":143
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":145
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":146
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(2, 146, __pyx_L1_error)

    /* "View.MemoryView":145
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":149
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(2, 149, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dim = __pyx_t_8;
    __pyx_v_idx = __pyx_t_7;
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":150
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":151
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_3 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(2, 151, __pyx_L1_error)

      /* "View.MemoryView":150
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":152
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":149
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "View.MemoryView":155
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 155, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":156
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":157
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":155
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":158
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c_2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 158, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":159
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":160
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c_2);
    __Pyx_GIVEREF(__pyx_n_u_c_2);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c_2;

    /* "View.MemoryView":158
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":162
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(2, 162, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":164
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":167
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":168
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 168, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":169
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":172
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":173
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":174
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 174, __pyx_L1_error)

      /* "View.MemoryView":173
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":176
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":177
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":178
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(2, 178, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(2, 178, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "View.MemoryView":179
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":180
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":176
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":169
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":120
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":183
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":184
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c_2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 185, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":186
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":187
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 187, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":188
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":189
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__119, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 190, __pyx_L1_error)

    /* "View.MemoryView":189
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":191
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":192
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":193
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":194
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":195
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":196
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":197
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":198
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":200
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":201
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":200
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":203
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":205
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":183
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":209
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":210
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":211
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":210
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":212
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":214
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":213
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":216
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":212
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":217
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":209
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":220
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":221
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":220
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":225
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":226
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":229
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":230
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":229
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":232
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":233
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":232
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":235
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":236
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(2, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":235
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":240
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":244
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":245
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":244
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":247
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":248
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(2, 248, __pyx_L1_error)

    /* "View.MemoryView":247
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":249
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":251
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":240
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":277
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 277, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":278
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":277
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":279
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":280
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":279
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":294
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":296
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":300
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":302
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":303
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":302
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":305
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":294
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":341
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(2, 341, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 341, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 341, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 341, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":342
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":343
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":344
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":345
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 345, __pyx_L1_error)

    /* "View.MemoryView":346
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":347
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":348
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":346
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":344
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":351
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":352
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":353
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":351
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":354
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":355
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":356
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":357
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 357, __pyx_L1_error)

      /* "View.MemoryView":356
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":354
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":359
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":360
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":359
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":362
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":364
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":366
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":341
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":368
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyThread_type_lock __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":369
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":370
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":369
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  }

  /* "View.MemoryView":374
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":375
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":376
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":377
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":378
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":380
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_5 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":379
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_5;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_6;

          /* "View.MemoryView":378
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":381
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":376
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":383
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":374
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":368
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":385
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":387
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":389
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 389, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 389, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 389, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 389, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":390
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 390, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(2, 390, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":389
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":392
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":385
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":395
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":396
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":397
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":396
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":399
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 399, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 399, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":402
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 402, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":403
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":402
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":405
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == NULL)) __PYX_ERR(2, 405, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":406
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":395
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":408
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":409
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 409, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 409, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":411
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 411, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":412
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":413
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 413, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "View.MemoryView":414
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":413
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":416
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 416, __pyx_L1_error)
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "View.MemoryView":411
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":418
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":408
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":420
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":421
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":423
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->flags | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":424
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 424, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":423
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 423, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "View.MemoryView":425
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(2, 425, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":426
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_None);
        __pyx_r = Py_None;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":422
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L11_try_end:;
    }

    /* "View.MemoryView":421
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":428
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":420
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":430
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":434
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(2, 434, __pyx_L1_error)

  /* "View.MemoryView":435
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(2, 435, __pyx_L1_error)

  /* "View.MemoryView":436
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":434
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 434, __pyx_L1_error)

  /* "View.MemoryView":430
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":438
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":440
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":447
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":448
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":449
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":450
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 450, __pyx_L1_error)

      /* "View.MemoryView":449
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":451
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":447
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":453
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":455
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":456
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":457
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":456
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":459
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 459, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":463
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":464
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 464, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "View.MemoryView":463
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":465
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":468
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __pyx_L6_error:;
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      __Pyx_PyThreadState_assign
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":438
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":470
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":471
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(2, 471, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":472
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":470
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":474
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":477
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":480
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":482
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 482, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 482, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 482, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 482, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 482, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 482, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":486
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":487
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 487, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":486
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":488
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "View.MemoryView":483
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 483, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9) < 0) __PYX_ERR(2, 483, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);

      /* "View.MemoryView":484
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 484, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 484, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":481
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":474
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":490
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":493
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":498
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":499
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 499, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":498
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":501
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 501, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 501, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":503
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(2, 503, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":504
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":503
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":504
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":490
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":507
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  char *__pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":508
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":509
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_2;

    /* "View.MemoryView":508
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":511
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":513
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":514
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_2;

    /* "View.MemoryView":513
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":516
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L4:;

  /* "View.MemoryView":518
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":519
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_2;

    /* "View.MemoryView":518
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":521
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":523
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":524
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_3;

    /* "View.MemoryView":523
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":526
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":528
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_4 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":529
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_5 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_5;

  /* "View.MemoryView":530
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = 0
 */
  __pyx_t_6 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_6;

  /* "View.MemoryView":531
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.obj = self
 */
  __pyx_t_6 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_6;

  /* "View.MemoryView":532
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":533
 *         info.len = self.view.len
 *         info.readonly = 0
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":507
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

  /* function exit code */
  __pyx_r = 0;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":539
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":540
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(2, 540, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":541
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == 0)) __PYX_ERR(2, 541, __pyx_L1_error)

  /* "View.MemoryView":542
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":539
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":545
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":546
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":545
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":549
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":550
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":549
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":556
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 556, __pyx_L1_error)

    /* "View.MemoryView":554
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":558
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 558, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":562
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":563
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__122, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":562
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":565
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(2, 565, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":561
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":568
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":569
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":568
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":572
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":573
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":572
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":576
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":577
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":576
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":580
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":581
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":582
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":584
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":585
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":587
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":581
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":589
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":580
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":591
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":592
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":593
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":592
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":595
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":591
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":597
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":598
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":599
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":598
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":597
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":601
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":602
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":601
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":608
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":609
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":614
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":615
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":617
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":619
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":621
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":622
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":627
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":617
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":629
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":631
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":633
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":634
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 634, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":639
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":629
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":644
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":645
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":646
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":643
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":649
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":650
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":649
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":652
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":657
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":658
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":657
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":660
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":662
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":663
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":664
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":665
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 665, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 665, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 665, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 665, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 665, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":666
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":667
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":668
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 668, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 668, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__123);
            __Pyx_GIVEREF(__pyx_slice__123);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__123);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 668, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":669
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":667
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":671
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__124); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 671, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":672
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":666
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":674
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_1) {

        /* "View.MemoryView":675
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(2, 675, __pyx_L1_error)

        /* "View.MemoryView":674
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":677
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":678
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 678, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":665
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":680
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(2, 680, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":681
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":682
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__125);
        __Pyx_GIVEREF(__pyx_slice__125);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__125);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 682, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":681
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":684
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":652
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":686
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":687
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":688
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":689
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 689, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 689, __pyx_L1_error)

      /* "View.MemoryView":688
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":686
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":696
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":697
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":704
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst)));

  /* "View.MemoryView":708
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(2, 708, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":710
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":711
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 711, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":712
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":710
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":714
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":715
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":721
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":722
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":727
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":728
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":732
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 732, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 732, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 732, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 732, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":733
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":737
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 737, __pyx_L1_error)

      /* "View.MemoryView":734
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(2, 734, __pyx_L1_error)

      /* "View.MemoryView":733
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":740
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":741
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":742
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":743
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":744
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":740
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":746
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 746, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 746, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":747
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 747, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 747, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":748
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 748, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 748, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 748, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":750
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":751
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":752
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":754
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(2, 754, __pyx_L1_error)

      /* "View.MemoryView":760
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":732
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":762
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":763
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":764
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 764, __pyx_L1_error) }

    /* "View.MemoryView":765
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 765, __pyx_L1_error) }

    /* "View.MemoryView":763
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 763, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":762
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":768
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":769
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":768
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 768, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":696
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":816
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":818
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 818, __pyx_L1_error)

      /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":821
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":823
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":824
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 824, __pyx_L1_error)

      /* "View.MemoryView":823
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":827
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":828
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":829
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":830
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":831
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":830
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":828
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":832
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":833
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":834
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":833
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":836
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":832
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":827
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":838
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":839
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":838
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":841
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":843
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":844
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":845
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":846
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":847
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":846
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":844
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":848
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":848
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":843
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":851
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":852
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":851
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":854
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":856
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":857
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":856
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":861
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":864
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":867
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":870
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":871
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":872
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":876
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":878
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":883
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":885
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":886
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 885, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":888
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":890
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":898
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":899
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":903
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(2, 903, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(2, 903, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":904
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":906
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":907
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":909
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":912
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":914
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(2, 914, __pyx_L1_error)

      /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":916
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 917, __pyx_L1_error)

    /* "View.MemoryView":916
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":919
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":921
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":923
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;

  /* "View.MemoryView":930
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":932
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":933
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":937
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":938
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":939
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_4 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_4;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":940
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_4 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_4;

    /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "View.MemoryView":943
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_8 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 943, __pyx_L1_error)

      /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":945
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":962
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":963
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":962
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":965
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":966
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":967
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":966
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":969
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":965
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":971
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":972
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":973
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == 0)) __PYX_ERR(2, 973, __pyx_L1_error)

    /* "View.MemoryView":972
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":975
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":971
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":978
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":979
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":978
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":993
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":994
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "View.MemoryView":993
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":999
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1001
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1002
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1004
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1005
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1007
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1008
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1009
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1010
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1011
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     result.flags = PyBUF_RECORDS
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1013
 *     Py_INCREF(Py_None)
 * 
 *     result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

  /* "View.MemoryView":1015
 *     result.flags = PyBUF_RECORDS
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1016
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1019
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1020
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1021
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1022
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1023
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L5_break;

      /* "View.MemoryView":1021
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "View.MemoryView":1025
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1026
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1027
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1027, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1029
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1030
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1032
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":985
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1035
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1038
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1039
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 1039, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1040
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1038
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1042
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1043
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1035
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1046
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1050
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1051
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1052
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1054
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1055
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1057
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_dim = __pyx_t_3;

    /* "View.MemoryView":1058
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1059
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1060
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_4 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_4 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_4;
  }

  /* "View.MemoryView":1046
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1066
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1067
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1070
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1077
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1078
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1079
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1077
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1081
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1082
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1084
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1086
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1070
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1092
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1093
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1094
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1093
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1096
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1092
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1099
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1104
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1105
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1107
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1108
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1109
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1110
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1108
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1112
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1113
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1114
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1115
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1113
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1117
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1118
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1117
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1120
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1099
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1123
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1130
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1131
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1132
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1133
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1135
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1137
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1138
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent));

      /* "View.MemoryView":1136
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1140
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1141
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize);

        /* "View.MemoryView":1142
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1143
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1135
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1145
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1146
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1150
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1151
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1123
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1153
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1156
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1153
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1160
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1163
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1165
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1166
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1168
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1160
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1171
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1180
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1181
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_idx = __pyx_t_3;

      /* "View.MemoryView":1182
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1183
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1180
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1185
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1L; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1186
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1187
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1189
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1171
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1192
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;

  /* "View.MemoryView":1203
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1204
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1206
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1207
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1208
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 1208, __pyx_L1_error)

    /* "View.MemoryView":1207
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1211
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1212
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1213
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1214
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1215
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1217
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  __pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order);

  /* "View.MemoryView":1221
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1222
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1223
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1222
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1225
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1226
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size);

    /* "View.MemoryView":1225
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1228
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1230
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1192
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1235
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1238
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1237
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(2, 1237, __pyx_L1_error)

  /* "View.MemoryView":1235
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1241
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1242
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1242, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1242, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1242, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 1242, __pyx_L1_error)

  /* "View.MemoryView":1241
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1245
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1246
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1247
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1247, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1247, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1247, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 1247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 1247, __pyx_L1_error)

    /* "View.MemoryView":1246
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1249
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(2, 1249, __pyx_L1_error)
  }

  /* "View.MemoryView":1245
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;

  /* "View.MemoryView":1260
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1261
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1263
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1264
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1265
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1268
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1269
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1268
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1270
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1271
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1270
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1273
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1275
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_5; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1276
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1277
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1278
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1279
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1277
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1281
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_4 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 1281, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1276
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1283
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1284
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_4 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 1284, __pyx_L1_error)

      /* "View.MemoryView":1283
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1286
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1288
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1289
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1288
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1291
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_6 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_6 == NULL)) __PYX_ERR(2, 1291, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_6;

    /* "View.MemoryView":1292
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1286
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1294
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1297
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1298
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1297
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1299
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1299
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1302
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1304
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1305
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim));

      /* "View.MemoryView":1306
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1307
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1308
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1302
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1294
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1310
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "View.MemoryView":1313
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == 0)) __PYX_ERR(2, 1313, __pyx_L1_error)

    /* "View.MemoryView":1314
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == 0)) __PYX_ERR(2, 1314, __pyx_L1_error)

    /* "View.MemoryView":1310
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1316
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1317
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1318
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1320
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1321
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1324
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1328
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1330
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1L; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1331
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1332
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1333
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1335
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1336
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1337
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1338
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1324
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1346
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1350
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1351
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1350
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1346
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1355
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1358
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1355
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1361
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1365
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1366
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_3 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_3) {

      /* "View.MemoryView":1367
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_3 = (__pyx_v_inc != 0);
      if (__pyx_t_3) {

        /* "View.MemoryView":1368
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1367
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1370
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1366
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1372
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1373
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1375
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1361
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1381
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1384
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1385
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1387
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1381
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "View.MemoryView":1395
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1396
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1398
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1399
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1400
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize);

      /* "View.MemoryView":1401
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1398
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1403
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1404
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1406
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}
static struct __pyx_vtabstruct_10discretize_8tree_ext_Cell __pyx_vtable_10discretize_8tree_ext_Cell;

static PyObject *__pyx_tp_new_10discretize_8tree_ext_Cell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10discretize_8tree_ext_Cell *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10discretize_8tree_ext_Cell *)o);
  p->__pyx_vtab = __pyx_vtabptr_10discretize_8tree_ext_Cell;
  return o;
}

static void __pyx_tp_dealloc_10discretize_8tree_ext_Cell(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_5nodes_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell_center(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_6center_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell_x0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_2x0_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell_h(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_1h_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell_dim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_3dim_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_5index_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell_neighbors(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_9neighbors_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell__index_loc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_10_index_loc_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_4Cell__level(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_4Cell_6_level_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_10discretize_8tree_ext_Cell[] = {
  {(char *)"nodes", __pyx_getprop_10discretize_8tree_ext_4Cell_nodes, 0, (char *)0, 0},
  {(char *)"center", __pyx_getprop_10discretize_8tree_ext_4Cell_center, 0, (char *)0, 0},
  {(char *)"x0", __pyx_getprop_10discretize_8tree_ext_4Cell_x0, 0, (char *)0, 0},
  {(char *)"h", __pyx_getprop_10discretize_8tree_ext_4Cell_h, 0, (char *)0, 0},
  {(char *)"dim", __pyx_getprop_10discretize_8tree_ext_4Cell_dim, 0, (char *)0, 0},
  {(char *)"index", __pyx_getprop_10discretize_8tree_ext_4Cell_index, 0, (char *)0, 0},
  {(char *)"neighbors", __pyx_getprop_10discretize_8tree_ext_4Cell_neighbors, 0, (char *)0, 0},
  {(char *)"_index_loc", __pyx_getprop_10discretize_8tree_ext_4Cell__index_loc, 0, (char *)0, 0},
  {(char *)"_level", __pyx_getprop_10discretize_8tree_ext_4Cell__level, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10discretize_8tree_ext_Cell = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.Cell", /*tp_name*/
  sizeof(struct __pyx_obj_10discretize_8tree_ext_Cell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10discretize_8tree_ext_Cell, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10discretize_8tree_ext_Cell, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10discretize_8tree_ext_Cell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10discretize_8tree_ext__TreeMesh(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10discretize_8tree_ext__TreeMesh *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)o);
  p->_gridCC = Py_None; Py_INCREF(Py_None);
  p->_gridN = Py_None; Py_INCREF(Py_None);
  p->_gridhN = Py_None; Py_INCREF(Py_None);
  p->_gridEx = Py_None; Py_INCREF(Py_None);
  p->_gridEy = Py_None; Py_INCREF(Py_None);
  p->_gridEz = Py_None; Py_INCREF(Py_None);
  p->_gridhEx = Py_None; Py_INCREF(Py_None);
  p->_gridhEy = Py_None; Py_INCREF(Py_None);
  p->_gridhEz = Py_None; Py_INCREF(Py_None);
  p->_gridFx = Py_None; Py_INCREF(Py_None);
  p->_gridFy = Py_None; Py_INCREF(Py_None);
  p->_gridFz = Py_None; Py_INCREF(Py_None);
  p->_gridhFx = Py_None; Py_INCREF(Py_None);
  p->_gridhFy = Py_None; Py_INCREF(Py_None);
  p->_gridhFz = Py_None; Py_INCREF(Py_None);
  p->_h_gridded = Py_None; Py_INCREF(Py_None);
  p->_vol = Py_None; Py_INCREF(Py_None);
  p->_area = Py_None; Py_INCREF(Py_None);
  p->_edge = Py_None; Py_INCREF(Py_None);
  p->_aveFx2CC = Py_None; Py_INCREF(Py_None);
  p->_aveFy2CC = Py_None; Py_INCREF(Py_None);
  p->_aveFz2CC = Py_None; Py_INCREF(Py_None);
  p->_aveF2CC = Py_None; Py_INCREF(Py_None);
  p->_aveF2CCV = Py_None; Py_INCREF(Py_None);
  p->_aveN2CC = Py_None; Py_INCREF(Py_None);
  p->_aveEx2CC = Py_None; Py_INCREF(Py_None);
  p->_aveEy2CC = Py_None; Py_INCREF(Py_None);
  p->_aveEz2CC = Py_None; Py_INCREF(Py_None);
  p->_aveE2CC = Py_None; Py_INCREF(Py_None);
  p->_aveE2CCV = Py_None; Py_INCREF(Py_None);
  p->_faceDiv = Py_None; Py_INCREF(Py_None);
  p->_edgeCurl = Py_None; Py_INCREF(Py_None);
  p->_nodalGrad = Py_None; Py_INCREF(Py_None);
  p->__pyx___ubc_order = Py_None; Py_INCREF(Py_None);
  p->__pyx___ubc_indArr = Py_None; Py_INCREF(Py_None);
  p->_xs.data = NULL;
  p->_xs.memview = NULL;
  p->_ys.data = NULL;
  p->_ys.memview = NULL;
  p->_zs.data = NULL;
  p->_zs.memview = NULL;
  p->_x0.data = NULL;
  p->_x0.memview = NULL;
  if (unlikely(__pyx_pw_10discretize_8tree_ext_9_TreeMesh_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10discretize_8tree_ext__TreeMesh(PyObject *o) {
  struct __pyx_obj_10discretize_8tree_ext__TreeMesh *p = (struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10discretize_8tree_ext_9_TreeMesh_83__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_gridCC);
  Py_CLEAR(p->_gridN);
  Py_CLEAR(p->_gridhN);
  Py_CLEAR(p->_gridEx);
  Py_CLEAR(p->_gridEy);
  Py_CLEAR(p->_gridEz);
  Py_CLEAR(p->_gridhEx);
  Py_CLEAR(p->_gridhEy);
  Py_CLEAR(p->_gridhEz);
  Py_CLEAR(p->_gridFx);
  Py_CLEAR(p->_gridFy);
  Py_CLEAR(p->_gridFz);
  Py_CLEAR(p->_gridhFx);
  Py_CLEAR(p->_gridhFy);
  Py_CLEAR(p->_gridhFz);
  Py_CLEAR(p->_h_gridded);
  Py_CLEAR(p->_vol);
  Py_CLEAR(p->_area);
  Py_CLEAR(p->_edge);
  Py_CLEAR(p->_aveFx2CC);
  Py_CLEAR(p->_aveFy2CC);
  Py_CLEAR(p->_aveFz2CC);
  Py_CLEAR(p->_aveF2CC);
  Py_CLEAR(p->_aveF2CCV);
  Py_CLEAR(p->_aveN2CC);
  Py_CLEAR(p->_aveEx2CC);
  Py_CLEAR(p->_aveEy2CC);
  Py_CLEAR(p->_aveEz2CC);
  Py_CLEAR(p->_aveE2CC);
  Py_CLEAR(p->_aveE2CCV);
  Py_CLEAR(p->_faceDiv);
  Py_CLEAR(p->_edgeCurl);
  Py_CLEAR(p->_nodalGrad);
  Py_CLEAR(p->__pyx___ubc_order);
  Py_CLEAR(p->__pyx___ubc_indArr);
  __PYX_XDEC_MEMVIEW(&p->_xs, 1);
  __PYX_XDEC_MEMVIEW(&p->_ys, 1);
  __PYX_XDEC_MEMVIEW(&p->_zs, 1);
  __PYX_XDEC_MEMVIEW(&p->_x0, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10discretize_8tree_ext__TreeMesh(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10discretize_8tree_ext__TreeMesh *p = (struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)o;
  if (p->_gridCC) {
    e = (*v)(p->_gridCC, a); if (e) return e;
  }
  if (p->_gridN) {
    e = (*v)(p->_gridN, a); if (e) return e;
  }
  if (p->_gridhN) {
    e = (*v)(p->_gridhN, a); if (e) return e;
  }
  if (p->_gridEx) {
    e = (*v)(p->_gridEx, a); if (e) return e;
  }
  if (p->_gridEy) {
    e = (*v)(p->_gridEy, a); if (e) return e;
  }
  if (p->_gridEz) {
    e = (*v)(p->_gridEz, a); if (e) return e;
  }
  if (p->_gridhEx) {
    e = (*v)(p->_gridhEx, a); if (e) return e;
  }
  if (p->_gridhEy) {
    e = (*v)(p->_gridhEy, a); if (e) return e;
  }
  if (p->_gridhEz) {
    e = (*v)(p->_gridhEz, a); if (e) return e;
  }
  if (p->_gridFx) {
    e = (*v)(p->_gridFx, a); if (e) return e;
  }
  if (p->_gridFy) {
    e = (*v)(p->_gridFy, a); if (e) return e;
  }
  if (p->_gridFz) {
    e = (*v)(p->_gridFz, a); if (e) return e;
  }
  if (p->_gridhFx) {
    e = (*v)(p->_gridhFx, a); if (e) return e;
  }
  if (p->_gridhFy) {
    e = (*v)(p->_gridhFy, a); if (e) return e;
  }
  if (p->_gridhFz) {
    e = (*v)(p->_gridhFz, a); if (e) return e;
  }
  if (p->_h_gridded) {
    e = (*v)(p->_h_gridded, a); if (e) return e;
  }
  if (p->_vol) {
    e = (*v)(p->_vol, a); if (e) return e;
  }
  if (p->_area) {
    e = (*v)(p->_area, a); if (e) return e;
  }
  if (p->_edge) {
    e = (*v)(p->_edge, a); if (e) return e;
  }
  if (p->_aveFx2CC) {
    e = (*v)(p->_aveFx2CC, a); if (e) return e;
  }
  if (p->_aveFy2CC) {
    e = (*v)(p->_aveFy2CC, a); if (e) return e;
  }
  if (p->_aveFz2CC) {
    e = (*v)(p->_aveFz2CC, a); if (e) return e;
  }
  if (p->_aveF2CC) {
    e = (*v)(p->_aveF2CC, a); if (e) return e;
  }
  if (p->_aveF2CCV) {
    e = (*v)(p->_aveF2CCV, a); if (e) return e;
  }
  if (p->_aveN2CC) {
    e = (*v)(p->_aveN2CC, a); if (e) return e;
  }
  if (p->_aveEx2CC) {
    e = (*v)(p->_aveEx2CC, a); if (e) return e;
  }
  if (p->_aveEy2CC) {
    e = (*v)(p->_aveEy2CC, a); if (e) return e;
  }
  if (p->_aveEz2CC) {
    e = (*v)(p->_aveEz2CC, a); if (e) return e;
  }
  if (p->_aveE2CC) {
    e = (*v)(p->_aveE2CC, a); if (e) return e;
  }
  if (p->_aveE2CCV) {
    e = (*v)(p->_aveE2CCV, a); if (e) return e;
  }
  if (p->_faceDiv) {
    e = (*v)(p->_faceDiv, a); if (e) return e;
  }
  if (p->_edgeCurl) {
    e = (*v)(p->_edgeCurl, a); if (e) return e;
  }
  if (p->_nodalGrad) {
    e = (*v)(p->_nodalGrad, a); if (e) return e;
  }
  if (p->__pyx___ubc_order) {
    e = (*v)(p->__pyx___ubc_order, a); if (e) return e;
  }
  if (p->__pyx___ubc_indArr) {
    e = (*v)(p->__pyx___ubc_indArr, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10discretize_8tree_ext__TreeMesh(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10discretize_8tree_ext__TreeMesh *p = (struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)o;
  tmp = ((PyObject*)p->_gridCC);
  p->_gridCC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridN);
  p->_gridN = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridhN);
  p->_gridhN = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridEx);
  p->_gridEx = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridEy);
  p->_gridEy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridEz);
  p->_gridEz = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridhEx);
  p->_gridhEx = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridhEy);
  p->_gridhEy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridhEz);
  p->_gridhEz = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridFx);
  p->_gridFx = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridFy);
  p->_gridFy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridFz);
  p->_gridFz = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridhFx);
  p->_gridhFx = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridhFy);
  p->_gridhFy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gridhFz);
  p->_gridhFz = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_h_gridded);
  p->_h_gridded = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_vol);
  p->_vol = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_area);
  p->_area = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_edge);
  p->_edge = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveFx2CC);
  p->_aveFx2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveFy2CC);
  p->_aveFy2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveFz2CC);
  p->_aveFz2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveF2CC);
  p->_aveF2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveF2CCV);
  p->_aveF2CCV = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveN2CC);
  p->_aveN2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveEx2CC);
  p->_aveEx2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveEy2CC);
  p->_aveEy2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveEz2CC);
  p->_aveEz2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveE2CC);
  p->_aveE2CC = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_aveE2CCV);
  p->_aveE2CCV = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_faceDiv);
  p->_faceDiv = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_edgeCurl);
  p->_edgeCurl = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_nodalGrad);
  p->_nodalGrad = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___ubc_order);
  p->__pyx___ubc_order = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___ubc_indArr);
  p->__pyx___ubc_indArr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_10discretize_8tree_ext__TreeMesh(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_xC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2xC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_x0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2x0_1__get__(o);
}

static int __pyx_setprop_10discretize_8tree_ext_9_TreeMesh_x0(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2x0_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_fill(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4fill_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_maxLevel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8maxLevel_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nN(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nN_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntN(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntN_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhN(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhN_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nE_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhE_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntE(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntE_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nEx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nEy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nEz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nEz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntEx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntEy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntEz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntEz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhEx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhEy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhEz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhEz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nF(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_2nF_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhF(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nhF_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntF(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3ntF_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nFx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nFy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nFz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3nFz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntFx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntFy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntFz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4ntFz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhFx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhFy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhFz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4nhFz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridCC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridCC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridN(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_5gridN_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhN(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridhN_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_h_gridded(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_9h_gridded_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridEx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhEx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridEy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhEy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridEz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridEz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhEz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhEz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridFx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridFy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridFz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_6gridFz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhFx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFx_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhFy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFy_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhFz(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7gridhFz_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_vol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3vol_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_area(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4area_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_edge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_4edge_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_faceDiv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7faceDiv_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_edgeCurl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8edgeCurl_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nodalGrad(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_9nodalGrad_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveEx2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEx2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveEy2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEy2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveEz2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveEz2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveE2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveE2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveE2CCV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveE2CCV_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveFx2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFx2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveFy2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFy2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveFz2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveFz2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveF2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveF2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveF2CCV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_8aveF2CCV_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveN2CC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_7aveN2CC_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh__ubc_indArr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_11_ubc_indArr_1__get__(o);
}

static PyObject *__pyx_getprop_10discretize_8tree_ext_9_TreeMesh__ubc_order(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10discretize_8tree_ext_9_TreeMesh_10_ubc_order_1__get__(o);
}

static PyMethodDef __pyx_methods_10discretize_8tree_ext__TreeMesh[] = {
  {"refine", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_5refine, METH_VARARGS|METH_KEYWORDS, 0},
  {"insert_cells", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_7insert_cells, METH_VARARGS|METH_KEYWORDS, 0},
  {"finalize", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_9finalize, METH_NOARGS, 0},
  {"number", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_11number, METH_NOARGS, 0},
  {"_faceDiv2D", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_13_faceDiv2D, METH_NOARGS, 0},
  {"_faceDiv3D", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_15_faceDiv3D, METH_NOARGS, 0},
  {"_aveCC2FxStencil", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_17_aveCC2FxStencil, METH_NOARGS, 0},
  {"_aveCC2FyStencil", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_19_aveCC2FyStencil, METH_NOARGS, 0},
  {"_aveCC2FzStencil", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_21_aveCC2FzStencil, METH_NOARGS, 0},
  {"_cellGradxStencil", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_23_cellGradxStencil, METH_NOARGS, 0},
  {"_cellGradyStencil", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_25_cellGradyStencil, METH_NOARGS, 0},
  {"_cellGradzStencil", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_27_cellGradzStencil, METH_NOARGS, 0},
  {"_deflate_edges_x", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_29_deflate_edges_x, METH_NOARGS, 0},
  {"_deflate_edges_y", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_31_deflate_edges_y, METH_NOARGS, 0},
  {"_deflate_edges_z", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_33_deflate_edges_z, METH_NOARGS, 0},
  {"_deflate_edges", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_35_deflate_edges, METH_NOARGS, 0},
  {"_deflate_faces", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_37_deflate_faces, METH_NOARGS, 0},
  {"_deflate_faces_x", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_39_deflate_faces_x, METH_NOARGS, 0},
  {"_deflate_faces_y", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_41_deflate_faces_y, METH_NOARGS, 0},
  {"_deflate_faces_z", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_43_deflate_faces_z, METH_NOARGS, 0},
  {"_deflate_nodes", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_45_deflate_nodes, METH_NOARGS, 0},
  {"_get_containing_cell_index", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_47_get_containing_cell_index, METH_O, 0},
  {"_getFaceP", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_49_getFaceP, METH_VARARGS|METH_KEYWORDS, 0},
  {"_getFacePxx", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_51_getFacePxx, METH_NOARGS, 0},
  {"_getFacePxxx", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_53_getFacePxxx, METH_NOARGS, 0},
  {"_getEdgeP", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_55_getEdgeP, METH_VARARGS|METH_KEYWORDS, 0},
  {"_getEdgePxx", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_57_getEdgePxx, METH_NOARGS, 0},
  {"_getEdgePxxx", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_59_getEdgePxxx, METH_NOARGS, 0},
  {"_cull_outer_simplices", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_61_cull_outer_simplices, METH_VARARGS|METH_KEYWORDS, 0},
  {"_get_grid_triang", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_63_get_grid_triang, METH_VARARGS|METH_KEYWORDS, 0},
  {"getInterpolationMat", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_65getInterpolationMat, METH_VARARGS|METH_KEYWORDS, 0},
  {"_getNodeIntMat", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_67_getNodeIntMat, METH_VARARGS|METH_KEYWORDS, 0},
  {"plotGrid", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_69plotGrid, METH_VARARGS|METH_KEYWORDS, 0},
  {"plotImage", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_71plotImage, METH_VARARGS|METH_KEYWORDS, 0},
  {"plotSlice", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_73plotSlice, METH_VARARGS|METH_KEYWORDS, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_75__getstate__, METH_NOARGS, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_10discretize_8tree_ext_9_TreeMesh_77__setstate__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10discretize_8tree_ext__TreeMesh[] = {
  {(char *)"xC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_xC, 0, (char *)0, 0},
  {(char *)"x0", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_x0, __pyx_setprop_10discretize_8tree_ext_9_TreeMesh_x0, (char *)0, 0},
  {(char *)"fill", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_fill, 0, (char *)"\n        How filled is the mesh compared to a TensorMesh?\n        As a fraction: [0, 1].\n        ", 0},
  {(char *)"maxLevel", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_maxLevel, 0, (char *)"\n        The maximum level used, which may be\n        less than `levels`.\n        ", 0},
  {(char *)"nC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nC, 0, (char *)0, 0},
  {(char *)"nN", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nN, 0, (char *)0, 0},
  {(char *)"ntN", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntN, 0, (char *)0, 0},
  {(char *)"nhN", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhN, 0, (char *)0, 0},
  {(char *)"nE", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nE, 0, (char *)0, 0},
  {(char *)"nhE", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhE, 0, (char *)0, 0},
  {(char *)"ntE", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntE, 0, (char *)0, 0},
  {(char *)"nEx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nEx, 0, (char *)0, 0},
  {(char *)"nEy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nEy, 0, (char *)0, 0},
  {(char *)"nEz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nEz, 0, (char *)0, 0},
  {(char *)"ntEx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntEx, 0, (char *)0, 0},
  {(char *)"ntEy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntEy, 0, (char *)0, 0},
  {(char *)"ntEz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntEz, 0, (char *)0, 0},
  {(char *)"nhEx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhEx, 0, (char *)0, 0},
  {(char *)"nhEy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhEy, 0, (char *)0, 0},
  {(char *)"nhEz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhEz, 0, (char *)0, 0},
  {(char *)"nF", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nF, 0, (char *)0, 0},
  {(char *)"nhF", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhF, 0, (char *)0, 0},
  {(char *)"ntF", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntF, 0, (char *)0, 0},
  {(char *)"nFx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nFx, 0, (char *)0, 0},
  {(char *)"nFy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nFy, 0, (char *)0, 0},
  {(char *)"nFz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nFz, 0, (char *)0, 0},
  {(char *)"ntFx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntFx, 0, (char *)0, 0},
  {(char *)"ntFy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntFy, 0, (char *)0, 0},
  {(char *)"ntFz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_ntFz, 0, (char *)0, 0},
  {(char *)"nhFx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhFx, 0, (char *)0, 0},
  {(char *)"nhFy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhFy, 0, (char *)0, 0},
  {(char *)"nhFz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nhFz, 0, (char *)0, 0},
  {(char *)"gridCC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridCC, 0, (char *)"\n        Returns an M by N numpy array with the center locations of all cells\n        in order. M is the number of cells and N=2,3 is the dimension of the\n        mesh.\n        ", 0},
  {(char *)"gridN", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridN, 0, (char *)"\n        Returns an M by N numpy array with the widths of all cells in order.\n        M is the number of nodes and N=2,3 is the dimension of the mesh.\n        ", 0},
  {(char *)"gridhN", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhN, 0, (char *)0, 0},
  {(char *)"h_gridded", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_h_gridded, 0, (char *)"\n        Returns an (nC, dim) numpy array with the widths of all cells in order\n        ", 0},
  {(char *)"gridEx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridEx, 0, (char *)0, 0},
  {(char *)"gridhEx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhEx, 0, (char *)0, 0},
  {(char *)"gridEy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridEy, 0, (char *)0, 0},
  {(char *)"gridhEy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhEy, 0, (char *)0, 0},
  {(char *)"gridEz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridEz, 0, (char *)0, 0},
  {(char *)"gridhEz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhEz, 0, (char *)0, 0},
  {(char *)"gridFx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridFx, 0, (char *)0, 0},
  {(char *)"gridFy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridFy, 0, (char *)0, 0},
  {(char *)"gridFz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridFz, 0, (char *)0, 0},
  {(char *)"gridhFx", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhFx, 0, (char *)0, 0},
  {(char *)"gridhFy", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhFy, 0, (char *)0, 0},
  {(char *)"gridhFz", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_gridhFz, 0, (char *)0, 0},
  {(char *)"vol", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_vol, 0, (char *)0, 0},
  {(char *)"area", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_area, 0, (char *)0, 0},
  {(char *)"edge", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_edge, 0, (char *)0, 0},
  {(char *)"faceDiv", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_faceDiv, 0, (char *)0, 0},
  {(char *)"edgeCurl", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_edgeCurl, 0, (char *)0, 0},
  {(char *)"nodalGrad", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_nodalGrad, 0, (char *)0, 0},
  {(char *)"aveEx2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveEx2CC, 0, (char *)0, 0},
  {(char *)"aveEy2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveEy2CC, 0, (char *)0, 0},
  {(char *)"aveEz2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveEz2CC, 0, (char *)0, 0},
  {(char *)"aveE2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveE2CC, 0, (char *)0, 0},
  {(char *)"aveE2CCV", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveE2CCV, 0, (char *)0, 0},
  {(char *)"aveFx2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveFx2CC, 0, (char *)0, 0},
  {(char *)"aveFy2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveFy2CC, 0, (char *)0, 0},
  {(char *)"aveFz2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveFz2CC, 0, (char *)0, 0},
  {(char *)"aveF2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveF2CC, 0, (char *)"Construct the averaging operator on cell faces to cell centers.", 0},
  {(char *)"aveF2CCV", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveF2CCV, 0, (char *)"Construct the averaging operator on cell faces to cell centers.", 0},
  {(char *)"aveN2CC", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh_aveN2CC, 0, (char *)0, 0},
  {(char *)"_ubc_indArr", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh__ubc_indArr, 0, (char *)0, 0},
  {(char *)"_ubc_order", __pyx_getprop_10discretize_8tree_ext_9_TreeMesh__ubc_order, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__TreeMesh = {
  __pyx_pw_10discretize_8tree_ext_9_TreeMesh_79__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_10discretize_8tree_ext__TreeMesh, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__TreeMesh = {
  __pyx_pw_10discretize_8tree_ext_9_TreeMesh_79__len__, /*mp_length*/
  __pyx_pw_10discretize_8tree_ext_9_TreeMesh_81__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10discretize_8tree_ext__TreeMesh = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext._TreeMesh", /*tp_name*/
  sizeof(struct __pyx_obj_10discretize_8tree_ext__TreeMesh), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10discretize_8tree_ext__TreeMesh, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__TreeMesh, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__TreeMesh, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10discretize_8tree_ext__TreeMesh, /*tp_traverse*/
  __pyx_tp_clear_10discretize_8tree_ext__TreeMesh, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10discretize_8tree_ext__TreeMesh, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10discretize_8tree_ext__TreeMesh, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10discretize_8tree_ext_9_TreeMesh_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10discretize_8tree_ext__TreeMesh, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct__refine[8];
static int __pyx_freecount_10discretize_8tree_ext___pyx_scope_struct__refine = 0;

static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct__refine(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct__refine > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine)))) {
    o = (PyObject*)__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct__refine[--__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct__refine];
    memset(o, 0, sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct__refine(PyObject *o) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_level);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct__refine < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine)))) {
    __pyx_freelist_10discretize_8tree_ext___pyx_scope_struct__refine[__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct__refine++] = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct__refine(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *)o;
  if (p->__pyx_v_level) {
    e = (*v)(p->__pyx_v_level, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct__refine(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine *)o;
  tmp = ((PyObject*)p->__pyx_v_level);
  p->__pyx_v_level = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10discretize_8tree_ext___pyx_scope_struct__refine = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.__pyx_scope_struct__refine", /*tp_name*/
  sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct__refine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct__refine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct__refine, /*tp_traverse*/
  __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct__refine, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct__refine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx[8];
static int __pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx = 0;

static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx)))) {
    o = (PyObject*)__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx[--__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx];
    memset(o, 0, sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx(PyObject *o) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx)))) {
    __pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx[__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx++] = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.__pyx_scope_struct_1__getFacePxx", /*tp_name*/
  sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx, /*tp_traverse*/
  __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx[8];
static int __pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx = 0;

static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx)))) {
    o = (PyObject*)__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx[--__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx];
    memset(o, 0, sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx(PyObject *o) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx)))) {
    __pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx[__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx++] = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.__pyx_scope_struct_2__getFacePxxx", /*tp_name*/
  sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx, /*tp_traverse*/
  __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx[8];
static int __pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx = 0;

static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx)))) {
    o = (PyObject*)__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx[--__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx];
    memset(o, 0, sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx(PyObject *o) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx)))) {
    __pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx[__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx++] = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.__pyx_scope_struct_3__getEdgePxx", /*tp_name*/
  sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx, /*tp_traverse*/
  __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx[8];
static int __pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx = 0;

static PyObject *__pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx)))) {
    o = (PyObject*)__pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx[--__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx];
    memset(o, 0, sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx(PyObject *o) {
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx)))) {
    __pyx_freelist_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx[__pyx_freecount_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx++] = ((struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *p = (struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10discretize_8tree_ext__TreeMesh *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.__pyx_scope_struct_4__getEdgePxxx", /*tp_name*/
  sizeof(struct __pyx_obj_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx, /*tp_traverse*/
  __pyx_tp_clear_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  0, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "discretize.tree_ext._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "tree_ext",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_3d, __pyx_k_3d, sizeof(__pyx_k_3d), 0, 0, 1, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_Axes, __pyx_k_Axes, sizeof(__pyx_k_Axes), 0, 0, 1, 1},
  {&__pyx_n_s_Axes3D, __pyx_k_Axes3D, sizeof(__pyx_k_Axes3D), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_n_s_CC, __pyx_k_CC, sizeof(__pyx_k_CC), 0, 0, 1, 1},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Delaunay, __pyx_k_Delaunay, sizeof(__pyx_k_Delaunay), 0, 0, 1, 1},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Ex, __pyx_k_Ex, sizeof(__pyx_k_Ex), 0, 0, 1, 1},
  {&__pyx_n_s_Ey, __pyx_k_Ey, sizeof(__pyx_k_Ey), 0, 0, 1, 1},
  {&__pyx_n_s_Ez, __pyx_k_Ez, sizeof(__pyx_k_Ez), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_Fx, __pyx_k_Fx, sizeof(__pyx_k_Fx), 0, 0, 1, 1},
  {&__pyx_n_s_Fy, __pyx_k_Fy, sizeof(__pyx_k_Fy), 0, 0, 1, 1},
  {&__pyx_n_s_Fz, __pyx_k_Fz, sizeof(__pyx_k_Fz), 0, 0, 1, 1},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_argument_type, __pyx_k_Invalid_argument_type, sizeof(__pyx_k_Invalid_argument_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Last_character_of_edge_string_mu, __pyx_k_Last_character_of_edge_string_mu, sizeof(__pyx_k_Last_character_of_edge_string_mu), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_Normalize, __pyx_k_Normalize, sizeof(__pyx_k_Normalize), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_kp_s_PlotSlice_has_not_been_implement, __pyx_k_PlotSlice_has_not_been_implement, sizeof(__pyx_k_PlotSlice_has_not_been_implement), 0, 0, 1, 0},
  {&__pyx_n_s_Pxx, __pyx_k_Pxx, sizeof(__pyx_k_Pxx), 0, 0, 1, 1},
  {&__pyx_n_s_Pxxx, __pyx_k_Pxxx, sizeof(__pyx_k_Pxxx), 0, 0, 1, 1},
  {&__pyx_n_s_Rectangle, __pyx_k_Rectangle, sizeof(__pyx_k_Rectangle), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_ScalarMappable, __pyx_k_ScalarMappable, sizeof(__pyx_k_ScalarMappable), 0, 0, 1, 1},
  {&__pyx_n_s_Sentinel, __pyx_k_Sentinel, sizeof(__pyx_k_Sentinel), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_kp_s_The_index_0_d_is_out_of_range, __pyx_k_The_index_0_d_is_out_of_range, sizeof(__pyx_k_The_index_0_d_is_out_of_range), 0, 0, 1, 0},
  {&__pyx_kp_s_There_are_no_z_edges_in_2D, __pyx_k_There_are_no_z_edges_in_2D, sizeof(__pyx_k_There_are_no_z_edges_in_2D), 0, 0, 1, 0},
  {&__pyx_kp_s_There_are_no_z_faces_in_2D, __pyx_k_There_are_no_z_faces_in_2D, sizeof(__pyx_k_There_are_no_z_faces_in_2D), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_kp_s_Unable_to_interpolate_from_Z_edg, __pyx_k_Unable_to_interpolate_from_Z_edg, sizeof(__pyx_k_Unable_to_interpolate_from_Z_edg), 0, 0, 1, 0},
  {&__pyx_kp_s_Use_plot_slice, __pyx_k_Use_plot_slice, sizeof(__pyx_k_Use_plot_slice), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_josephcapriotti_codes_dis, __pyx_k_Users_josephcapriotti_codes_dis, sizeof(__pyx_k_Users_josephcapriotti_codes_dis), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__54, __pyx_k__54, sizeof(__pyx_k__54), 0, 0, 1, 1},
  {&__pyx_n_s_add_patch, __pyx_k_add_patch, sizeof(__pyx_k_add_patch), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asArray_N_x_Dim, __pyx_k_asArray_N_x_Dim, sizeof(__pyx_k_asArray_N_x_Dim), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_atleast_2d, __pyx_k_atleast_2d, sizeof(__pyx_k_atleast_2d), 0, 0, 1, 1},
  {&__pyx_n_s_aveEx2CC, __pyx_k_aveEx2CC, sizeof(__pyx_k_aveEx2CC), 0, 0, 1, 1},
  {&__pyx_n_s_aveEy2CC, __pyx_k_aveEy2CC, sizeof(__pyx_k_aveEy2CC), 0, 0, 1, 1},
  {&__pyx_n_s_aveEz2CC, __pyx_k_aveEz2CC, sizeof(__pyx_k_aveEz2CC), 0, 0, 1, 1},
  {&__pyx_n_s_aveFx2CC, __pyx_k_aveFx2CC, sizeof(__pyx_k_aveFx2CC), 0, 0, 1, 1},
  {&__pyx_n_s_aveFy2CC, __pyx_k_aveFy2CC, sizeof(__pyx_k_aveFy2CC), 0, 0, 1, 1},
  {&__pyx_n_s_aveFz2CC, __pyx_k_aveFz2CC, sizeof(__pyx_k_aveFz2CC), 0, 0, 1, 1},
  {&__pyx_n_s_ax, __pyx_k_ax, sizeof(__pyx_k_ax), 0, 0, 1, 1},
  {&__pyx_kp_s_ax_must_be_an_Axes, __pyx_k_ax_must_be_an_Axes, sizeof(__pyx_k_ax_must_be_an_Axes), 0, 0, 1, 0},
  {&__pyx_n_s_axes, __pyx_k_axes, sizeof(__pyx_k_axes), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_kp_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 0},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_block_diag, __pyx_k_block_diag, sizeof(__pyx_k_block_diag), 0, 0, 1, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cKDTree, __pyx_k_cKDTree, sizeof(__pyx_k_cKDTree), 0, 0, 1, 1},
  {&__pyx_n_s_c_2, __pyx_k_c_2, sizeof(__pyx_k_c_2), 0, 0, 1, 1},
  {&__pyx_n_u_c_2, __pyx_k_c_2, sizeof(__pyx_k_c_2), 0, 1, 0, 1},
  {&__pyx_n_s_cellLine, __pyx_k_cellLine, sizeof(__pyx_k_cellLine), 0, 0, 1, 1},
  {&__pyx_n_s_cells, __pyx_k_cells, sizeof(__pyx_k_cells), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_clim, __pyx_k_clim, sizeof(__pyx_k_clim), 0, 0, 1, 1},
  {&__pyx_n_s_cmap, __pyx_k_cmap, sizeof(__pyx_k_cmap), 0, 0, 1, 1},
  {&__pyx_n_s_column_stack, __pyx_k_column_stack, sizeof(__pyx_k_column_stack), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_convex_hull, __pyx_k_convex_hull, sizeof(__pyx_k_convex_hull), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_csr_matrix, __pyx_k_csr_matrix, sizeof(__pyx_k_csr_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_cull_dir, __pyx_k_cull_dir, sizeof(__pyx_k_cull_dir), 0, 0, 1, 1},
  {&__pyx_n_s_cull_outer_simplices, __pyx_k_cull_outer_simplices, sizeof(__pyx_k_cull_outer_simplices), 0, 0, 1, 1},
  {&__pyx_n_s_cumsum, __pyx_k_cumsum, sizeof(__pyx_k_cumsum), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_edges, __pyx_k_deflate_edges, sizeof(__pyx_k_deflate_edges), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_edges_x, __pyx_k_deflate_edges_x, sizeof(__pyx_k_deflate_edges_x), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_edges_y, __pyx_k_deflate_edges_y, sizeof(__pyx_k_deflate_edges_y), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_edges_z, __pyx_k_deflate_edges_z, sizeof(__pyx_k_deflate_edges_z), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_faces, __pyx_k_deflate_faces, sizeof(__pyx_k_deflate_faces), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_faces_x, __pyx_k_deflate_faces_x, sizeof(__pyx_k_deflate_faces_x), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_faces_y, __pyx_k_deflate_faces_y, sizeof(__pyx_k_deflate_faces_y), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_faces_z, __pyx_k_deflate_faces_z, sizeof(__pyx_k_deflate_faces_z), 0, 0, 1, 1},
  {&__pyx_n_s_deflate_nodes, __pyx_k_deflate_nodes, sizeof(__pyx_k_deflate_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_dim, __pyx_k_dim, sizeof(__pyx_k_dim), 0, 0, 1, 1},
  {&__pyx_n_s_discretize, __pyx_k_discretize, sizeof(__pyx_k_discretize), 0, 0, 1, 1},
  {&__pyx_n_s_discretize_tree_ext, __pyx_k_discretize_tree_ext, sizeof(__pyx_k_discretize_tree_ext), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_edge, __pyx_k_edge, sizeof(__pyx_k_edge), 0, 0, 1, 1},
  {&__pyx_n_s_edgecolor, __pyx_k_edgecolor, sizeof(__pyx_k_edgecolor), 0, 0, 1, 1},
  {&__pyx_n_s_edgesX, __pyx_k_edgesX, sizeof(__pyx_k_edgesX), 0, 0, 1, 1},
  {&__pyx_n_s_edgesY, __pyx_k_edgesY, sizeof(__pyx_k_edgesY), 0, 0, 1, 1},
  {&__pyx_n_s_edgesZ, __pyx_k_edgesZ, sizeof(__pyx_k_edgesZ), 0, 0, 1, 1},
  {&__pyx_n_s_einsum, __pyx_k_einsum, sizeof(__pyx_k_einsum), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_empty_like, __pyx_k_empty_like, sizeof(__pyx_k_empty_like), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eps, __pyx_k_eps, sizeof(__pyx_k_eps), 0, 0, 1, 1},
  {&__pyx_n_s_equations, __pyx_k_equations, sizeof(__pyx_k_equations), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_fXp, __pyx_k_fXp, sizeof(__pyx_k_fXp), 0, 0, 1, 1},
  {&__pyx_n_s_fYp, __pyx_k_fYp, sizeof(__pyx_k_fYp), 0, 0, 1, 1},
  {&__pyx_n_s_fZp, __pyx_k_fZp, sizeof(__pyx_k_fZp), 0, 0, 1, 1},
  {&__pyx_n_s_faceDiv2D, __pyx_k_faceDiv2D, sizeof(__pyx_k_faceDiv2D), 0, 0, 1, 1},
  {&__pyx_n_s_faceDiv3D, __pyx_k_faceDiv3D, sizeof(__pyx_k_faceDiv3D), 0, 0, 1, 1},
  {&__pyx_n_s_facecolor, __pyx_k_facecolor, sizeof(__pyx_k_facecolor), 0, 0, 1, 1},
  {&__pyx_n_s_facesX, __pyx_k_facesX, sizeof(__pyx_k_facesX), 0, 0, 1, 1},
  {&__pyx_n_s_facesY, __pyx_k_facesY, sizeof(__pyx_k_facesY), 0, 0, 1, 1},
  {&__pyx_n_s_facesZ, __pyx_k_facesZ, sizeof(__pyx_k_facesZ), 0, 0, 1, 1},
  {&__pyx_n_s_figure, __pyx_k_figure, sizeof(__pyx_k_figure), 0, 0, 1, 1},
  {&__pyx_n_s_finalize, __pyx_k_finalize, sizeof(__pyx_k_finalize), 0, 0, 1, 1},
  {&__pyx_n_s_find_simplex, __pyx_k_find_simplex, sizeof(__pyx_k_find_simplex), 0, 0, 1, 1},
  {&__pyx_n_s_finfo, __pyx_k_finfo, sizeof(__pyx_k_finfo), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_full, __pyx_k_full, sizeof(__pyx_k_full), 0, 0, 1, 1},
  {&__pyx_n_s_function, __pyx_k_function, sizeof(__pyx_k_function), 0, 0, 1, 1},
  {&__pyx_kp_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 0},
  {&__pyx_n_s_g_2, __pyx_k_g_2, sizeof(__pyx_k_g_2), 0, 0, 1, 1},
  {&__pyx_kp_s_g_3, __pyx_k_g_3, sizeof(__pyx_k_g_3), 0, 0, 1, 0},
  {&__pyx_n_s_getEdgeP, __pyx_k_getEdgeP, sizeof(__pyx_k_getEdgeP), 0, 0, 1, 1},
  {&__pyx_n_s_getEdgePxx_locals_Pxx, __pyx_k_getEdgePxx_locals_Pxx, sizeof(__pyx_k_getEdgePxx_locals_Pxx), 0, 0, 1, 1},
  {&__pyx_n_s_getEdgePxxx_locals_Pxxx, __pyx_k_getEdgePxxx_locals_Pxxx, sizeof(__pyx_k_getEdgePxxx_locals_Pxxx), 0, 0, 1, 1},
  {&__pyx_n_s_getFaceP, __pyx_k_getFaceP, sizeof(__pyx_k_getFaceP), 0, 0, 1, 1},
  {&__pyx_n_s_getFacePxx_locals_Pxx, __pyx_k_getFacePxx_locals_Pxx, sizeof(__pyx_k_getFacePxx_locals_Pxx), 0, 0, 1, 1},
  {&__pyx_n_s_getFacePxxx_locals_Pxxx, __pyx_k_getFacePxxx_locals_Pxxx, sizeof(__pyx_k_getFacePxxx_locals_Pxxx), 0, 0, 1, 1},
  {&__pyx_n_s_getNodeIntMat, __pyx_k_getNodeIntMat, sizeof(__pyx_k_getNodeIntMat), 0, 0, 1, 1},
  {&__pyx_n_s_get_cmap, __pyx_k_get_cmap, sizeof(__pyx_k_get_cmap), 0, 0, 1, 1},
  {&__pyx_n_s_get_grid_triang, __pyx_k_get_grid_triang, sizeof(__pyx_k_get_grid_triang), 0, 0, 1, 1},
  {&__pyx_n_s_getnnz, __pyx_k_getnnz, sizeof(__pyx_k_getnnz), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_grid, __pyx_k_grid, sizeof(__pyx_k_grid), 0, 0, 1, 1},
  {&__pyx_n_s_gridCC, __pyx_k_gridCC, sizeof(__pyx_k_gridCC), 0, 0, 1, 1},
  {&__pyx_n_s_gridEx, __pyx_k_gridEx, sizeof(__pyx_k_gridEx), 0, 0, 1, 1},
  {&__pyx_n_s_gridEy, __pyx_k_gridEy, sizeof(__pyx_k_gridEy), 0, 0, 1, 1},
  {&__pyx_n_s_gridEz, __pyx_k_gridEz, sizeof(__pyx_k_gridEz), 0, 0, 1, 1},
  {&__pyx_n_s_gridFx, __pyx_k_gridFx, sizeof(__pyx_k_gridFx), 0, 0, 1, 1},
  {&__pyx_n_s_gridFy, __pyx_k_gridFy, sizeof(__pyx_k_gridFy), 0, 0, 1, 1},
  {&__pyx_n_s_gridFz, __pyx_k_gridFz, sizeof(__pyx_k_gridFz), 0, 0, 1, 1},
  {&__pyx_n_s_gridN, __pyx_k_gridN, sizeof(__pyx_k_gridN), 0, 0, 1, 1},
  {&__pyx_n_s_gridhEx, __pyx_k_gridhEx, sizeof(__pyx_k_gridhEx), 0, 0, 1, 1},
  {&__pyx_n_s_gridhEy, __pyx_k_gridhEy, sizeof(__pyx_k_gridhEy), 0, 0, 1, 1},
  {&__pyx_n_s_gridhEz, __pyx_k_gridhEz, sizeof(__pyx_k_gridhEz), 0, 0, 1, 1},
  {&__pyx_n_s_gridhFx, __pyx_k_gridhFx, sizeof(__pyx_k_gridhFx), 0, 0, 1, 1},
  {&__pyx_n_s_gridhFy, __pyx_k_gridhFy, sizeof(__pyx_k_gridhFy), 0, 0, 1, 1},
  {&__pyx_n_s_gridhFz, __pyx_k_gridhFz, sizeof(__pyx_k_gridhFz), 0, 0, 1, 1},
  {&__pyx_n_s_gridhN, __pyx_k_gridhN, sizeof(__pyx_k_gridhN), 0, 0, 1, 1},
  {&__pyx_n_s_gs, __pyx_k_gs, sizeof(__pyx_k_gs), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_hstack, __pyx_k_hstack, sizeof(__pyx_k_hstack), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_kp_s_ikj_ij_ik, __pyx_k_ikj_ij_ik, sizeof(__pyx_k_ikj_ij_ik), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
  {&__pyx_n_s_insert_cells, __pyx_k_insert_cells, sizeof(__pyx_k_insert_cells), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_integer_types, __pyx_k_integer_types, sizeof(__pyx_k_integer_types), 0, 0, 1, 1},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_kp_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 0},
  {&__pyx_n_s_k_2, __pyx_k_k_2, sizeof(__pyx_k_k_2), 0, 0, 1, 1},
  {&__pyx_n_s_ks, __pyx_k_ks, sizeof(__pyx_k_ks), 0, 0, 1, 1},
  {&__pyx_n_s_levels, __pyx_k_levels, sizeof(__pyx_k_levels), 0, 0, 1, 1},
  {&__pyx_n_s_lexsort, __pyx_k_lexsort, sizeof(__pyx_k_lexsort), 0, 0, 1, 1},
  {&__pyx_n_s_locType, __pyx_k_locType, sizeof(__pyx_k_locType), 0, 0, 1, 1},
  {&__pyx_kp_s_locType_must_be_one_of_N_CC_Ex_E, __pyx_k_locType_must_be_one_of_N_CC_Ex_E, sizeof(__pyx_k_locType_must_be_one_of_N_CC_Ex_E), 0, 0, 1, 0},
  {&__pyx_n_s_locs, __pyx_k_locs, sizeof(__pyx_k_locs), 0, 0, 1, 1},
  {&__pyx_n_s_log2, __pyx_k_log2, sizeof(__pyx_k_log2), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib, __pyx_k_matplotlib, sizeof(__pyx_k_matplotlib), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_cm, __pyx_k_matplotlib_cm, sizeof(__pyx_k_matplotlib_cm), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_colors, __pyx_k_matplotlib_colors, sizeof(__pyx_k_matplotlib_colors), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_pyplot, __pyx_k_matplotlib_pyplot, sizeof(__pyx_k_matplotlib_pyplot), 0, 0, 1, 1},
  {&__pyx_n_s_mec, __pyx_k_mec, sizeof(__pyx_k_mec), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mfc, __pyx_k_mfc, sizeof(__pyx_k_mfc), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_mpl_toolkits_mplot3d, __pyx_k_mpl_toolkits_mplot3d, sizeof(__pyx_k_mpl_toolkits_mplot3d), 0, 0, 1, 1},
  {&__pyx_n_s_ms, __pyx_k_ms, sizeof(__pyx_k_ms), 0, 0, 1, 1},
  {&__pyx_n_s_nC, __pyx_k_nC, sizeof(__pyx_k_nC), 0, 0, 1, 1},
  {&__pyx_n_s_nE, __pyx_k_nE, sizeof(__pyx_k_nE), 0, 0, 1, 1},
  {&__pyx_n_s_nEx, __pyx_k_nEx, sizeof(__pyx_k_nEx), 0, 0, 1, 1},
  {&__pyx_n_s_nEy, __pyx_k_nEy, sizeof(__pyx_k_nEy), 0, 0, 1, 1},
  {&__pyx_n_s_nEz, __pyx_k_nEz, sizeof(__pyx_k_nEz), 0, 0, 1, 1},
  {&__pyx_n_s_nF, __pyx_k_nF, sizeof(__pyx_k_nF), 0, 0, 1, 1},
  {&__pyx_n_s_nFx, __pyx_k_nFx, sizeof(__pyx_k_nFx), 0, 0, 1, 1},
  {&__pyx_n_s_nFy, __pyx_k_nFy, sizeof(__pyx_k_nFy), 0, 0, 1, 1},
  {&__pyx_n_s_nFz, __pyx_k_nFz, sizeof(__pyx_k_nFz), 0, 0, 1, 1},
  {&__pyx_n_s_nN, __pyx_k_nN, sizeof(__pyx_k_nN), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
  {&__pyx_n_s_nanmax, __pyx_k_nanmax, sizeof(__pyx_k_nanmax), 0, 0, 1, 1},
  {&__pyx_n_s_nanmin, __pyx_k_nanmin, sizeof(__pyx_k_nanmin), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_neighbors, __pyx_k_neighbors, sizeof(__pyx_k_neighbors), 0, 0, 1, 1},
  {&__pyx_n_s_nhE, __pyx_k_nhE, sizeof(__pyx_k_nhE), 0, 0, 1, 1},
  {&__pyx_n_s_nhEx, __pyx_k_nhEx, sizeof(__pyx_k_nhEx), 0, 0, 1, 1},
  {&__pyx_n_s_nhEy, __pyx_k_nhEy, sizeof(__pyx_k_nhEy), 0, 0, 1, 1},
  {&__pyx_n_s_nhEz, __pyx_k_nhEz, sizeof(__pyx_k_nhEz), 0, 0, 1, 1},
  {&__pyx_n_s_nhF, __pyx_k_nhF, sizeof(__pyx_k_nhF), 0, 0, 1, 1},
  {&__pyx_n_s_nhFx, __pyx_k_nhFx, sizeof(__pyx_k_nhFx), 0, 0, 1, 1},
  {&__pyx_n_s_nhFy, __pyx_k_nhFy, sizeof(__pyx_k_nhFy), 0, 0, 1, 1},
  {&__pyx_n_s_nhFz, __pyx_k_nhFz, sizeof(__pyx_k_nhFz), 0, 0, 1, 1},
  {&__pyx_n_s_nhN, __pyx_k_nhN, sizeof(__pyx_k_nhN), 0, 0, 1, 1},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
  {&__pyx_n_s_nonzero, __pyx_k_nonzero, sizeof(__pyx_k_nonzero), 0, 0, 1, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nsimplex, __pyx_k_nsimplex, sizeof(__pyx_k_nsimplex), 0, 0, 1, 1},
  {&__pyx_n_s_ntE, __pyx_k_ntE, sizeof(__pyx_k_ntE), 0, 0, 1, 1},
  {&__pyx_n_s_ntEx, __pyx_k_ntEx, sizeof(__pyx_k_ntEx), 0, 0, 1, 1},
  {&__pyx_n_s_ntEy, __pyx_k_ntEy, sizeof(__pyx_k_ntEy), 0, 0, 1, 1},
  {&__pyx_n_s_ntEz, __pyx_k_ntEz, sizeof(__pyx_k_ntEz), 0, 0, 1, 1},
  {&__pyx_n_s_ntF, __pyx_k_ntF, sizeof(__pyx_k_ntF), 0, 0, 1, 1},
  {&__pyx_n_s_ntFx, __pyx_k_ntFx, sizeof(__pyx_k_ntFx), 0, 0, 1, 1},
  {&__pyx_n_s_ntFy, __pyx_k_ntFy, sizeof(__pyx_k_ntFy), 0, 0, 1, 1},
  {&__pyx_n_s_ntFz, __pyx_k_ntFz, sizeof(__pyx_k_ntFz), 0, 0, 1, 1},
  {&__pyx_n_s_ntN, __pyx_k_ntN, sizeof(__pyx_k_ntN), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_plot, __pyx_k_plot, sizeof(__pyx_k_plot), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_projection, __pyx_k_projection, sizeof(__pyx_k_projection), 0, 0, 1, 1},
  {&__pyx_n_s_properties_utils, __pyx_k_properties_utils, sizeof(__pyx_k_properties_utils), 0, 0, 1, 1},
  {&__pyx_n_s_ps, __pyx_k_ps, sizeof(__pyx_k_ps), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_query, __pyx_k_query, sizeof(__pyx_k_query), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_kp_s_r_2, __pyx_k_r_2, sizeof(__pyx_k_r_2), 0, 0, 1, 0},
  {&__pyx_kp_s_r_3, __pyx_k_r_3, sizeof(__pyx_k_r_3), 0, 0, 1, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_refine_locals_lambda, __pyx_k_refine_locals_lambda, sizeof(__pyx_k_refine_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_ro, __pyx_k_ro, sizeof(__pyx_k_ro), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_spatial, __pyx_k_scipy_spatial, sizeof(__pyx_k_scipy_spatial), 0, 0, 1, 1},
  {&__pyx_n_s_set_xlabel, __pyx_k_set_xlabel, sizeof(__pyx_k_set_xlabel), 0, 0, 1, 1},
  {&__pyx_n_s_set_xlim, __pyx_k_set_xlim, sizeof(__pyx_k_set_xlim), 0, 0, 1, 1},
  {&__pyx_n_s_set_ylabel, __pyx_k_set_ylabel, sizeof(__pyx_k_set_ylabel), 0, 0, 1, 1},
  {&__pyx_n_s_set_ylim, __pyx_k_set_ylim, sizeof(__pyx_k_set_ylim), 0, 0, 1, 1},
  {&__pyx_n_s_set_zlabel, __pyx_k_set_zlabel, sizeof(__pyx_k_set_zlabel), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_show, __pyx_k_show, sizeof(__pyx_k_show), 0, 0, 1, 1},
  {&__pyx_n_s_showIt, __pyx_k_showIt, sizeof(__pyx_k_showIt), 0, 0, 1, 1},
  {&__pyx_n_s_simplices, __pyx_k_simplices, sizeof(__pyx_k_simplices), 0, 0, 1, 1},
  {&__pyx_n_s_simps, __pyx_k_simps, sizeof(__pyx_k_simps), 0, 0, 1, 1},
  {&__pyx_n_s_six, __pyx_k_six, sizeof(__pyx_k_six), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sp, __pyx_k_sp, sizeof(__pyx_k_sp), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_subplot, __pyx_k_subplot, sizeof(__pyx_k_subplot), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_rgba, __pyx_k_to_rgba, sizeof(__pyx_k_to_rgba), 0, 0, 1, 1},
  {&__pyx_n_s_tocsr, __pyx_k_tocsr, sizeof(__pyx_k_tocsr), 0, 0, 1, 1},
  {&__pyx_n_s_transform, __pyx_k_transform, sizeof(__pyx_k_transform), 0, 0, 1, 1},
  {&__pyx_n_s_transform_2, __pyx_k_transform_2, sizeof(__pyx_k_transform_2), 0, 0, 1, 1},
  {&__pyx_n_s_ubc_indArr, __pyx_k_ubc_indArr, sizeof(__pyx_k_ubc_indArr), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_utils, __pyx_k_utils, sizeof(__pyx_k_utils), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_neighbor_vertices, __pyx_k_vertex_neighbor_vertices, sizeof(__pyx_k_vertex_neighbor_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_to_simplex, __pyx_k_vertex_to_simplex, sizeof(__pyx_k_vertex_to_simplex), 0, 0, 1, 1},
  {&__pyx_n_s_vertices, __pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_vmax, __pyx_k_vmax, sizeof(__pyx_k_vmax), 0, 0, 1, 1},
  {&__pyx_n_s_vmin, __pyx_k_vmin, sizeof(__pyx_k_vmin), 0, 0, 1, 1},
  {&__pyx_n_s_where, __pyx_k_where, sizeof(__pyx_k_where), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x0, __pyx_k_x0, sizeof(__pyx_k_x0), 0, 0, 1, 1},
  {&__pyx_kp_s_x0_must_be_a_list_tuple_or_numpy, __pyx_k_x0_must_be_a_list_tuple_or_numpy, sizeof(__pyx_k_x0_must_be_a_list_tuple_or_numpy), 0, 0, 1, 0},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_x3, __pyx_k_x3, sizeof(__pyx_k_x3), 0, 0, 1, 1},
  {&__pyx_n_s_xEdge, __pyx_k_xEdge, sizeof(__pyx_k_xEdge), 0, 0, 1, 1},
  {&__pyx_n_s_xFace, __pyx_k_xFace, sizeof(__pyx_k_xFace), 0, 0, 1, 1},
  {&__pyx_n_s_xy, __pyx_k_xy, sizeof(__pyx_k_xy), 0, 0, 1, 1},
  {&__pyx_n_s_xyz, __pyx_k_xyz, sizeof(__pyx_k_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_xz, __pyx_k_xz, sizeof(__pyx_k_xz), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_yEdge, __pyx_k_yEdge, sizeof(__pyx_k_yEdge), 0, 0, 1, 1},
  {&__pyx_n_s_yFace, __pyx_k_yFace, sizeof(__pyx_k_yFace), 0, 0, 1, 1},
  {&__pyx_n_s_yz, __pyx_k_yz, sizeof(__pyx_k_yz), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zEdge, __pyx_k_zEdge, sizeof(__pyx_k_zEdge), 0, 0, 1, 1},
  {&__pyx_n_s_zFace, __pyx_k_zFace, sizeof(__pyx_k_zFace), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zerosOutside, __pyx_k_zerosOutside, sizeof(__pyx_k_zerosOutside), 0, 0, 1, 1},
  {&__pyx_n_s_zs, __pyx_k_zs, sizeof(__pyx_k_zs), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 2403, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2410, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 989, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 146, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(2, 149, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(2, 396, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(2, 599, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "discretize/tree_ext.pyx":177
 * 
 *         xs = np.empty(nx2 + 1, dtype=float)
 *         xs[::2] = np.cumsum(np.r_[x0[0], h[0]])             # <<<<<<<<<<<<<<
 *         xs[1::2] = (xs[:-1:2] + xs[2::2])/2
 *         self._xs = xs
 */
  __pyx_slice_ = PySlice_New(Py_None, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);

  /* "discretize/tree_ext.pyx":178
 *         xs = np.empty(nx2 + 1, dtype=float)
 *         xs[::2] = np.cumsum(np.r_[x0[0], h[0]])
 *         xs[1::2] = (xs[:-1:2] + xs[2::2])/2             # <<<<<<<<<<<<<<
 *         self._xs = xs
 *         self.ls[0] = int(np.log2(len(h[0])))
 */
  __pyx_slice__2 = PySlice_New(Py_None, __pyx_int_neg_1, __pyx_int_2); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);
  __pyx_slice__3 = PySlice_New(__pyx_int_2, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice__3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__3);
  __Pyx_GIVEREF(__pyx_slice__3);
  __pyx_slice__4 = PySlice_New(__pyx_int_1, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice__4)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__4);
  __Pyx_GIVEREF(__pyx_slice__4);

  /* "discretize/tree_ext.pyx":183
 * 
 *         ys = np.empty(ny2 + 1, dtype=float)
 *         ys[::2] = np.cumsum(np.r_[x0[1],h[1]])             # <<<<<<<<<<<<<<
 *         ys[1::2] = (ys[:-1:2] + ys[2::2])/2
 *         self._ys = ys
 */
  __pyx_slice__5 = PySlice_New(Py_None, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "discretize/tree_ext.pyx":184
 *         ys = np.empty(ny2 + 1, dtype=float)
 *         ys[::2] = np.cumsum(np.r_[x0[1],h[1]])
 *         ys[1::2] = (ys[:-1:2] + ys[2::2])/2             # <<<<<<<<<<<<<<
 *         self._ys = ys
 *         self.ls[1] = int(np.log2(len(h[1])))
 */
  __pyx_slice__6 = PySlice_New(Py_None, __pyx_int_neg_1, __pyx_int_2); if (unlikely(!__pyx_slice__6)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__6);
  __Pyx_GIVEREF(__pyx_slice__6);
  __pyx_slice__7 = PySlice_New(__pyx_int_2, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice__7)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__7);
  __Pyx_GIVEREF(__pyx_slice__7);
  __pyx_slice__8 = PySlice_New(__pyx_int_1, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice__8)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__8);
  __Pyx_GIVEREF(__pyx_slice__8);

  /* "discretize/tree_ext.pyx":192
 * 
 *             zs = np.empty(nz2 + 1, dtype=float)
 *             zs[::2] = np.cumsum(np.r_[x0[2],h[2]])             # <<<<<<<<<<<<<<
 *             zs[1::2] = (zs[:-1:2] + zs[2::2])/2
 *             self._zs = zs
 */
  __pyx_slice__9 = PySlice_New(Py_None, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__9);
  __Pyx_GIVEREF(__pyx_slice__9);

  /* "discretize/tree_ext.pyx":193
 *             zs = np.empty(nz2 + 1, dtype=float)
 *             zs[::2] = np.cumsum(np.r_[x0[2],h[2]])
 *             zs[1::2] = (zs[:-1:2] + zs[2::2])/2             # <<<<<<<<<<<<<<
 *             self._zs = zs
 *             self.ls[2] = int(np.log2(len(h[2])))
 */
  __pyx_slice__10 = PySlice_New(Py_None, __pyx_int_neg_1, __pyx_int_2); if (unlikely(!__pyx_slice__10)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__10);
  __Pyx_GIVEREF(__pyx_slice__10);
  __pyx_slice__11 = PySlice_New(__pyx_int_2, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice__11)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__11);
  __Pyx_GIVEREF(__pyx_slice__11);
  __pyx_slice__12 = PySlice_New(__pyx_int_1, Py_None, __pyx_int_2); if (unlikely(!__pyx_slice__12)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__12);
  __Pyx_GIVEREF(__pyx_slice__12);

  /* "discretize/tree_ext.pyx":197
 *             self.ls[2] = int(np.log2(len(h[2])))
 *         else:
 *             self._zs = np.zeros(1, dtype=float)             # <<<<<<<<<<<<<<
 *             self.ls[2] = 1
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "discretize/tree_ext.pyx":293
 *             return # do nothing!!
 *         if not isinstance(x0, (list, tuple, np.ndarray)):
 *             raise ValueError('x0 must be a list, tuple or numpy array')             # <<<<<<<<<<<<<<
 *         self._x0 = np.asarray(x0, dtype=np.float64)
 *         cdef int_t dim = self._x0.shape[0]
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_x0_must_be_a_list_tuple_or_numpy); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "discretize/tree_ext.pyx":1094
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "discretize/tree_ext.pyx":1112
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].faces[0].index
 *                         I[2*ind    ] = ind
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_int_4); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "discretize/tree_ext.pyx":1145
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "discretize/tree_ext.pyx":1163
 *                     V[2*ind + 1] = 0.5
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index
 *                         I[2*ind    ] = ind
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_int_4); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "discretize/tree_ext.pyx":1226
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(2): # two neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].edges[2].index
 *                         I[2*ind    ] = ind
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "discretize/tree_ext.pyx":1244
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(4): # four neighbors in +x direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[2*i].faces[0].index #0 2 4 6
 *                         I[2*ind    ] = ind
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_int_4); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "discretize/tree_ext.pyx":1277
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(2): # two neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[i].edges[0].index
 *                         I[2*ind    ] = ind
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "discretize/tree_ext.pyx":1295
 *                     V[2*ind + 1] =  1.0
 *                 else:
 *                     for i in range(4): # four neighbors in +y direction             # <<<<<<<<<<<<<<
 *                         ind = next_cell.children[(i>>1)*4 + i%2].faces[2].index #0, 1, 4, 5
 *                         I[2*ind    ] = ind
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_int_4); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "discretize/tree_ext.pyx":1362
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEx, self.ntEx))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)             # <<<<<<<<<<<<<<
 *         while(last_ind > self.nEx):
 *             Rh = Rh*Rh
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "discretize/tree_ext.pyx":1365
 *         while(last_ind > self.nEx):
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)             # <<<<<<<<<<<<<<
 *         Rh = Rh[:, : last_ind]
 *         return Rh
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "discretize/tree_ext.pyx":1366
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEx)
 *         Rh = Rh[:, : last_ind]             # <<<<<<<<<<<<<<
 *         return Rh
 * 
 */
  __pyx_slice__25 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__25)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__25);
  __Pyx_GIVEREF(__pyx_slice__25);

  /* "discretize/tree_ext.pyx":1395
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEy, self.ntEy))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)             # <<<<<<<<<<<<<<
 *         while(last_ind > self.nEy):
 *             Rh = Rh*Rh
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "discretize/tree_ext.pyx":1398
 *         while(last_ind > self.nEy):
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)             # <<<<<<<<<<<<<<
 *         Rh = Rh[:, : last_ind]
 *         return Rh
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "discretize/tree_ext.pyx":1399
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEy)
 *         Rh = Rh[:, : last_ind]             # <<<<<<<<<<<<<<
 *         return Rh
 * 
 */
  __pyx_slice__28 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__28)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__28);
  __Pyx_GIVEREF(__pyx_slice__28);

  /* "discretize/tree_ext.pyx":1428
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntEz, self.ntEz))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)             # <<<<<<<<<<<<<<
 *         while(last_ind > self.nEz):
 *             Rh = Rh*Rh
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "discretize/tree_ext.pyx":1431
 *         while(last_ind > self.nEz):
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)             # <<<<<<<<<<<<<<
 *         Rh = Rh[:, : last_ind]
 *         return Rh
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "discretize/tree_ext.pyx":1432
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nEz)
 *         Rh = Rh[:, : last_ind]             # <<<<<<<<<<<<<<
 *         return Rh
 * 
 */
  __pyx_slice__31 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__31)) __PYX_ERR(0, 1432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__31);
  __Pyx_GIVEREF(__pyx_slice__31);

  /* "discretize/tree_ext.pyx":1543
 *         Rh = sp.csr_matrix((V, (I, J)), shape=(self.ntN, self.ntN))
 *         # Test if it needs to be deflated again, (if any parents were also hanging)
 *         last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)             # <<<<<<<<<<<<<<
 *         while(last_ind > self.nN):
 *             Rh = Rh*Rh
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "discretize/tree_ext.pyx":1546
 *         while(last_ind > self.nN):
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)             # <<<<<<<<<<<<<<
 *         Rh = Rh[:, : last_ind]
 *         return Rh
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "discretize/tree_ext.pyx":1547
 *             Rh = Rh*Rh
 *             last_ind = max(np.nonzero(Rh.getnnz(0)>0)[0][-1], self.nN)
 *         Rh = Rh[:, : last_ind]             # <<<<<<<<<<<<<<
 *         return Rh
 * 
 */
  __pyx_slice__34 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__34)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__34);
  __Pyx_GIVEREF(__pyx_slice__34);

  /* "discretize/tree_ext.pyx":1608
 *             return self._aveEz2CC
 *         if self._dim == 2:
 *             raise Exception('There are no z-edges in 2D')             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I,J
 *         cdef np.float64_t[:] V
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_There_are_no_z_edges_in_2D); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "discretize/tree_ext.pyx":1714
 *             return self._aveFz2CC
 *         if self._dim == 2:
 *             raise Exception('There are no z-faces in 2D')             # <<<<<<<<<<<<<<
 *         cdef np.int64_t[:] I,J
 *         cdef np.float64_t[:] V
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_There_are_no_z_faces_in_2D); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "discretize/tree_ext.pyx":1841
 * 
 *     def _getFacePxx(self):
 *         def Pxx(xFace, yFace):             # <<<<<<<<<<<<<<
 *             return self._getFaceP(xFace, yFace, None)
 *         return Pxx
 */
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_n_s_xFace, __pyx_n_s_yFace); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_josephcapriotti_codes_dis, __pyx_n_s_Pxx, 1841, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 1841, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":1846
 * 
 *     def _getFacePxxx(self):
 *         def Pxxx(xFace, yFace, zFace):             # <<<<<<<<<<<<<<
 *             return self._getFaceP(xFace, yFace, zFace)
 *         return Pxxx
 */
  __pyx_tuple__39 = PyTuple_Pack(3, __pyx_n_s_xFace, __pyx_n_s_yFace, __pyx_n_s_zFace); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_josephcapriotti_codes_dis, __pyx_n_s_Pxxx, 1846, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 1846, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":1871
 *                 edges[2] = int(zEdge[-1]) #0, 1, 2, 3
 *         except ValueError:
 *             raise Exception('Last character of edge string must be 0, 1, 2, or 3')             # <<<<<<<<<<<<<<
 * 
 *         offsets[0] = 0
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_Last_character_of_edge_string_mu); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 1871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "discretize/tree_ext.pyx":1897
 * 
 *     def _getEdgePxx(self):
 *         def Pxx(xEdge, yEdge):             # <<<<<<<<<<<<<<
 *             return self._getEdgeP(xEdge, yEdge, None)
 *         return Pxx
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_xEdge, __pyx_n_s_yEdge); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 1897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_josephcapriotti_codes_dis, __pyx_n_s_Pxx, 1897, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 1897, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":1902
 * 
 *     def _getEdgePxxx(self):
 *         def Pxxx(xEdge, yEdge, zEdge):             # <<<<<<<<<<<<<<
 *             return self._getEdgeP(xEdge, yEdge, zEdge)
 *         return Pxxx
 */
  __pyx_tuple__44 = PyTuple_Pack(3, __pyx_n_s_xEdge, __pyx_n_s_yEdge, __pyx_n_s_zEdge); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_josephcapriotti_codes_dis, __pyx_n_s_Pxxx, 1902, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 1902, __pyx_L1_error)

  /* "discretize/tree_ext.pyx":1988
 *         triang.nsimplex = triang.simplices.shape[0]
 * 
 *         p[:-1][is_inside] = np.arange(triang.nsimplex, dtype=p.dtype)             # <<<<<<<<<<<<<<
 * 
 *         #neighbors need to be renumbered
 */
  __pyx_slice__46 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__46)) __PYX_ERR(0, 1988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__46);
  __Pyx_GIVEREF(__pyx_slice__46);

  /* "discretize/tree_ext.pyx":2007
 *         locs = utils.asArray_N_x_Dim(locs, self.dim)
 *         if locType not in ['N', 'CC', "Ex", "Ey", "Ez", "Fx", "Fy", "Fz"]:
 *             raise Exception('locType must be one of N, CC, Ex, Ey, Ez, Fx, Fy, or Fz')             # <<<<<<<<<<<<<<
 *         if locType == 'N':
 *             return self._getNodeIntMat(locs, zerosOutside)
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_locType_must_be_one_of_N_CC_Ex_E); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 2007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "discretize/tree_ext.pyx":2013
 * 
 *         if self._dim == 2 and locType in ['Ez','Fz']:
 *             raise Exception('Unable to interpolate from Z edges/face in 2D')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.int64_t[:, :] simplices = tri.simplices.astype(np.int64)
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_interpolate_from_Z_edg); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 2013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "discretize/tree_ext.pyx":2047
 * 
 *         trans = tri.transform[npsimps]
 *         shift = np.array(points) - trans[:, dim]             # <<<<<<<<<<<<<<
 *         bs = np.einsum('ikj,ij->ik', trans[:, :dim], shift)
 *         bs = np.c_[bs, 1 - bs.sum(axis=1)]
 */
  __pyx_slice__49 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__49)) __PYX_ERR(0, 2047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__49);
  __Pyx_GIVEREF(__pyx_slice__49);

  /* "discretize/tree_ext.pyx":2048
 *         trans = tri.transform[npsimps]
 *         shift = np.array(points) - trans[:, dim]
 *         bs = np.einsum('ikj,ij->ik', trans[:, :dim], shift)             # <<<<<<<<<<<<<<
 *         bs = np.c_[bs, 1 - bs.sum(axis=1)]
 * 
 */
  __pyx_slice__50 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__50)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__50);
  __Pyx_GIVEREF(__pyx_slice__50);

  /* "discretize/tree_ext.pyx":2119
 *                 J += self.nEx + self.nEy
 * 
 *         return sp.csr_matrix((V.reshape(-1), (I.reshape(-1), J.reshape(-1))),             # <<<<<<<<<<<<<<
 *                              shape=(n_points,n_grid))
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "discretize/tree_ext.pyx":2203
 *             import matplotlib.cm as cmx
 *             if(self._dim == 2):
 *                 ax = plt.subplot(111)             # <<<<<<<<<<<<<<
 *             else:
 *                 from mpl_toolkits.mplot3d import Axes3D
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_int_111); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 2203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "discretize/tree_ext.pyx":2206
 *             else:
 *                 from mpl_toolkits.mplot3d import Axes3D
 *                 ax = plt.subplot(111, projection='3d')             # <<<<<<<<<<<<<<
 *         else:
 *             assert isinstance(ax,matplotlib.axes.Axes), "ax must be an Axes!"
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_int_111); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "discretize/tree_ext.pyx":2280
 * 
 *         if cells:
 *             ax.plot(*self.gridCC.T, 'r.')             # <<<<<<<<<<<<<<
 *         if cellLine:
 *             ax.plot(*self.gridCC.T, 'r:')
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_r_2); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 2280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "discretize/tree_ext.pyx":2282
 *             ax.plot(*self.gridCC.T, 'r.')
 *         if cellLine:
 *             ax.plot(*self.gridCC.T, 'r:')             # <<<<<<<<<<<<<<
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')
 *         if nodes:
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_r_3); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 2282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "discretize/tree_ext.pyx":2285
 *             ax.plot(self.gridCC[[0,-1],0], self.gridCC[[0,-1],1], 'ro')
 *         if nodes:
 *             ax.plot(*np.r_[self.gridN, self.gridhN].T, 'ms')             # <<<<<<<<<<<<<<
 *             # Hanging Nodes
 *             ax.plot(*self.gridhN.T, 'ms', ms=10, mfc='none', mec='m')
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_n_s_ms); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 2285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "discretize/tree_ext.pyx":2287
 *             ax.plot(*np.r_[self.gridN, self.gridhN].T, 'ms')
 *             # Hanging Nodes
 *             ax.plot(*self.gridhN.T, 'ms', ms=10, mfc='none', mec='m')             # <<<<<<<<<<<<<<
 *         if facesX:
 *             ax.plot(*np.r_[self.gridFx, self.gridhFx].T, 'g>')
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_n_s_ms); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 2287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "discretize/tree_ext.pyx":2289
 *             ax.plot(*self.gridhN.T, 'ms', ms=10, mfc='none', mec='m')
 *         if facesX:
 *             ax.plot(*np.r_[self.gridFx, self.gridhFx].T, 'g>')             # <<<<<<<<<<<<<<
 *             # Hanging Faces x
 *             ax.plot(*self.gridhFx.T, 'gs', ms=10, mfc='none', mec='g')
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_g); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "discretize/tree_ext.pyx":2291
 *             ax.plot(*np.r_[self.gridFx, self.gridhFx].T, 'g>')
 *             # Hanging Faces x
 *             ax.plot(*self.gridhFx.T, 'gs', ms=10, mfc='none', mec='g')             # <<<<<<<<<<<<<<
 *         if facesY:
 *             ax.plot(*np.r_[self.gridFy, self.gridhFy].T, 'g^')
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_n_s_gs); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 2291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "discretize/tree_ext.pyx":2293
 *             ax.plot(*self.gridhFx.T, 'gs', ms=10, mfc='none', mec='g')
 *         if facesY:
 *             ax.plot(*np.r_[self.gridFy, self.gridhFy].T, 'g^')             # <<<<<<<<<<<<<<
 *             # Hanging Faces y
 *             ax.plot(*self.gridhFy.T, 'gs', ms=10, mfc='none', mec='g')
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_g_3); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 2293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "discretize/tree_ext.pyx":2295
 *             ax.plot(*np.r_[self.gridFy, self.gridhFy].T, 'g^')
 *             # Hanging Faces y
 *             ax.plot(*self.gridhFy.T, 'gs', ms=10, mfc='none', mec='g')             # <<<<<<<<<<<<<<
 *         if facesZ:
 *             ax.plot(*np.r_[self.gridFz, self.gridhFz].T, 'g^')
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_n_s_gs); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 2295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "discretize/tree_ext.pyx":2297
 *             ax.plot(*self.gridhFy.T, 'gs', ms=10, mfc='none', mec='g')
 *         if facesZ:
 *             ax.plot(*np.r_[self.gridFz, self.gridhFz].T, 'g^')             # <<<<<<<<<<<<<<
 *             # Hangin Faces z
 *             ax.plot(*self.gridhFz.T, 'gs', ms=10, mfc='none', mec='g')
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_g_3); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 2297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "discretize/tree_ext.pyx":2299
 *             ax.plot(*np.r_[self.gridFz, self.gridhFz].T, 'g^')
 *             # Hangin Faces z
 *             ax.plot(*self.gridhFz.T, 'gs', ms=10, mfc='none', mec='g')             # <<<<<<<<<<<<<<
 *         if edgesX:
 *             ax.plot(*np.r_[self.gridEx, self.gridhEx].T, 'k>')
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_n_s_gs); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 2299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "discretize/tree_ext.pyx":2301
 *             ax.plot(*self.gridhFz.T, 'gs', ms=10, mfc='none', mec='g')
 *         if edgesX:
 *             ax.plot(*np.r_[self.gridEx, self.gridhEx].T, 'k>')             # <<<<<<<<<<<<<<
 *             # Hanging Edges x
 *             ax.plot(*self.gridhEx.T, 'ks', ms=10, mfc='none', mec='k')
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_k); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 2301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "discretize/tree_ext.pyx":2303
 *             ax.plot(*np.r_[self.gridEx, self.gridhEx].T, 'k>')
 *             # Hanging Edges x
 *             ax.plot(*self.gridhEx.T, 'ks', ms=10, mfc='none', mec='k')             # <<<<<<<<<<<<<<
 *         if edgesY:
 *             ax.plot(*np.r_[self.gridEy, self.gridhEy].T, 'k>')
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_n_s_ks); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "discretize/tree_ext.pyx":2305
 *             ax.plot(*self.gridhEx.T, 'ks', ms=10, mfc='none', mec='k')
 *         if edgesY:
 *             ax.plot(*np.r_[self.gridEy, self.gridhEy].T, 'k>')             # <<<<<<<<<<<<<<
 *             # Hanging Edges y
 *             ax.plot(*self.gridhEy.T, 'ks', ms=10, mfc='none', mec='k')
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_k); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 2305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "discretize/tree_ext.pyx":2307
 *             ax.plot(*np.r_[self.gridEy, self.gridhEy].T, 'k>')
 *             # Hanging Edges y
 *             ax.plot(*self.gridhEy.T, 'ks', ms=10, mfc='none', mec='k')             # <<<<<<<<<<<<<<
 *         if edgesZ:
 *             ax.plot(*np.r_[self.gridEz, self.gridhEz].T, 'k>')
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_n_s_ks); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "discretize/tree_ext.pyx":2309
 *             ax.plot(*self.gridhEy.T, 'ks', ms=10, mfc='none', mec='k')
 *         if edgesZ:
 *             ax.plot(*np.r_[self.gridEz, self.gridhEz].T, 'k>')             # <<<<<<<<<<<<<<
 *             # Hanging Edges z
 *             ax.plot(*self.gridhEz.T, 'ks', ms=10, mfc='none', mec='k')
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_k); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "discretize/tree_ext.pyx":2311
 *             ax.plot(*np.r_[self.gridEz, self.gridhEz].T, 'k>')
 *             # Hanging Edges z
 *             ax.plot(*self.gridhEz.T, 'ks', ms=10, mfc='none', mec='k')             # <<<<<<<<<<<<<<
 * 
 *         ax.set_xlabel('x1')
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_ks); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 2311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "discretize/tree_ext.pyx":2313
 *             ax.plot(*self.gridhEz.T, 'ks', ms=10, mfc='none', mec='k')
 * 
 *         ax.set_xlabel('x1')             # <<<<<<<<<<<<<<
 *         ax.set_ylabel('x2')
 *         if self._dim == 3:
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_n_s_x1); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "discretize/tree_ext.pyx":2314
 * 
 *         ax.set_xlabel('x1')
 *         ax.set_ylabel('x2')             # <<<<<<<<<<<<<<
 *         if self._dim == 3:
 *             ax.set_zlabel('x3')
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_n_s_x2); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 2314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "discretize/tree_ext.pyx":2316
 *         ax.set_ylabel('x2')
 *         if self._dim == 3:
 *             ax.set_zlabel('x3')             # <<<<<<<<<<<<<<
 * 
 *         ax.grid(True)
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_n_s_x3); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 2316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "discretize/tree_ext.pyx":2318
 *             ax.set_zlabel('x3')
 * 
 *         ax.grid(True)             # <<<<<<<<<<<<<<
 *         if showIt:
 *             plt.show()
 */
  __pyx_tuple__76 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "discretize/tree_ext.pyx":2324
 *     def plotImage(self, I, ax=None, showIt=False, grid=False, clim=None):
 *         if self._dim == 3:
 *             raise Exception('Use plot slice?')             # <<<<<<<<<<<<<<
 * 
 *         import matplotlib.pyplot as plt
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_Use_plot_slice); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 2324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "discretize/tree_ext.pyx":2333
 * 
 *         if ax is None:
 *             ax = plt.subplot(111)             # <<<<<<<<<<<<<<
 *         default = cm = plt.get_cmap()
 *         cNorm = colors.Normalize(
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_int_111); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 2333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "discretize/tree_ext.pyx":2357
 *         # http://stackoverflow.com/questions/8342549/matplotlib-add-colorbar-to-a-sequence-of-line-plots
 *         scalarMap._A = []
 *         ax.set_xlabel('x')             # <<<<<<<<<<<<<<
 *         ax.set_ylabel('y')
 *         if showIt:
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_n_s_x); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "discretize/tree_ext.pyx":2358
 *         scalarMap._A = []
 *         ax.set_xlabel('x')
 *         ax.set_ylabel('y')             # <<<<<<<<<<<<<<
 *         if showIt:
 *             plt.show()
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_n_s_y); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 2358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "discretize/tree_ext.pyx":2364
 * 
 *     def plotSlice(self, *args, **kwargs):
 *         raise Exception('PlotSlice has not been implemented yet')             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_PlotSlice_has_not_been_implement); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "discretize/tree_ext.pyx":2385
 *         if self._dim == 3:
 *             zs = np.array(self._zs)
 *             points = np.column_stack((xs[indArr[:, 0]],             # <<<<<<<<<<<<<<
 *                                       ys[indArr[:, 1]],
 *                                       zs[indArr[:, 2]]))
 */
  __pyx_slice__82 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__82)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__82);
  __Pyx_GIVEREF(__pyx_slice__82);
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_slice__82, __pyx_int_0); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "discretize/tree_ext.pyx":2386
 *             zs = np.array(self._zs)
 *             points = np.column_stack((xs[indArr[:, 0]],
 *                                       ys[indArr[:, 1]],             # <<<<<<<<<<<<<<
 *                                       zs[indArr[:, 2]]))
 *         else:
 */
  __pyx_slice__84 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__84)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__84);
  __Pyx_GIVEREF(__pyx_slice__84);
  __pyx_tuple__85 = PyTuple_Pack(2, __pyx_slice__84, __pyx_int_1); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 2386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "discretize/tree_ext.pyx":2387
 *             points = np.column_stack((xs[indArr[:, 0]],
 *                                       ys[indArr[:, 1]],
 *                                       zs[indArr[:, 2]]))             # <<<<<<<<<<<<<<
 *         else:
 *             points = np.column_stack((xs[indArr[:, 0]], ys[indArr[:, 1]]))
 */
  __pyx_slice__86 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__86)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__86);
  __Pyx_GIVEREF(__pyx_slice__86);
  __pyx_tuple__87 = PyTuple_Pack(2, __pyx_slice__86, __pyx_int_2); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 2387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "discretize/tree_ext.pyx":2389
 *                                       zs[indArr[:, 2]]))
 *         else:
 *             points = np.column_stack((xs[indArr[:, 0]], ys[indArr[:, 1]]))             # <<<<<<<<<<<<<<
 *         self.insert_cells(points, levels)
 * 
 */
  __pyx_slice__88 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__88)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__88);
  __Pyx_GIVEREF(__pyx_slice__88);
  __pyx_tuple__89 = PyTuple_Pack(2, __pyx_slice__88, __pyx_int_0); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_slice__90 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__90)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__90);
  __Pyx_GIVEREF(__pyx_slice__90);
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_slice__90, __pyx_int_1); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 2389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "discretize/tree_ext.pyx":2410
 *             return pycell
 *         else:
 *             raise TypeError("Invalid argument type.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_kp_s_Invalid_argument_type); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 2410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "discretize/tree_ext.pyx":2422
 *         levels = 1<<(max_level - levels)
 * 
 *         indArr[:, 2] = (self._zs.shape[0]-1) - indArr[:, 2]             # <<<<<<<<<<<<<<
 *         indArr = (indArr - levels[:, None])//2
 *         indArr += 1
 */
  __pyx_slice__93 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__93)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__93);
  __Pyx_GIVEREF(__pyx_slice__93);
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_slice__93, __pyx_int_2); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_slice__95 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__95)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__95);
  __Pyx_GIVEREF(__pyx_slice__95);
  __pyx_tuple__96 = PyTuple_Pack(2, __pyx_slice__95, __pyx_int_2); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "discretize/tree_ext.pyx":2423
 * 
 *         indArr[:, 2] = (self._zs.shape[0]-1) - indArr[:, 2]
 *         indArr = (indArr - levels[:, None])//2             # <<<<<<<<<<<<<<
 *         indArr += 1
 * 
 */
  __pyx_slice__97 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__97)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__97);
  __Pyx_GIVEREF(__pyx_slice__97);
  __pyx_tuple__98 = PyTuple_Pack(2, __pyx_slice__97, Py_None); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "discretize/tree_ext.pyx":2434
 *             return self.__ubc_order
 *         indArr, _ = self._ubc_indArr
 *         self.__ubc_order = np.lexsort((indArr[:, 0], indArr[:, 1], indArr[:, 2]))             # <<<<<<<<<<<<<<
 *         return self.__ubc_order
 * 
 */
  __pyx_slice__99 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__99)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__99);
  __Pyx_GIVEREF(__pyx_slice__99);
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_slice__99, __pyx_int_0); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_slice__101 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__101)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__101);
  __Pyx_GIVEREF(__pyx_slice__101);
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_slice__101, __pyx_int_1); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_slice__103 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__103)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__103);
  __Pyx_GIVEREF(__pyx_slice__103);
  __pyx_tuple__104 = PyTuple_Pack(2, __pyx_slice__103, __pyx_int_2); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 2434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(1, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__110 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":989
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "../../anaconda/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__113 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(1, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "View.MemoryView":131
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__114 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(2, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "View.MemoryView":134
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__115 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "View.MemoryView":137
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_n_s_ASCII); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(2, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "View.MemoryView":146
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(2, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "View.MemoryView":174
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(2, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "View.MemoryView":190
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(2, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "View.MemoryView":484
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(2, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "View.MemoryView":556
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(2, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "View.MemoryView":563
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__122 = PyTuple_New(1); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(2, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__122, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "View.MemoryView":668
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__123 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__123)) __PYX_ERR(2, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__123);
  __Pyx_GIVEREF(__pyx_slice__123);

  /* "View.MemoryView":671
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
  __pyx_slice__124 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__124)) __PYX_ERR(2, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__124);
  __Pyx_GIVEREF(__pyx_slice__124);

  /* "View.MemoryView":682
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
  __pyx_slice__125 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__125)) __PYX_ERR(2, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__125);
  __Pyx_GIVEREF(__pyx_slice__125);

  /* "View.MemoryView":689
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(2, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);

  /* "View.MemoryView":282
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__127 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(2, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "View.MemoryView":283
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(2, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "View.MemoryView":284
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(2, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "View.MemoryView":287
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "View.MemoryView":288
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__131 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_111 = PyInt_FromLong(111); if (unlikely(!__pyx_int_111)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inittree_ext(void); /*proto*/
PyMODINIT_FUNC inittree_ext(void)
#else
PyMODINIT_FUNC PyInit_tree_ext(void); /*proto*/
PyMODINIT_FUNC PyInit_tree_ext(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyThread_type_lock __pyx_t_3[8];
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_tree_ext(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("tree_ext", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_discretize__tree_ext) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "discretize.tree_ext")) {
      if (unlikely(PyDict_SetItemString(modules, "discretize.tree_ext", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_10discretize_8tree_ext_Cell = &__pyx_vtable_10discretize_8tree_ext_Cell;
  __pyx_vtable_10discretize_8tree_ext_Cell._set = (void (*)(struct __pyx_obj_10discretize_8tree_ext_Cell *, Cell *))__pyx_f_10discretize_8tree_ext_4Cell__set;
  if (PyType_Ready(&__pyx_type_10discretize_8tree_ext_Cell) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_type_10discretize_8tree_ext_Cell.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10discretize_8tree_ext_Cell.tp_dict, __pyx_vtabptr_10discretize_8tree_ext_Cell) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Cell", (PyObject *)&__pyx_type_10discretize_8tree_ext_Cell) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_ptype_10discretize_8tree_ext_Cell = &__pyx_type_10discretize_8tree_ext_Cell;
  if (PyType_Ready(&__pyx_type_10discretize_8tree_ext__TreeMesh) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_type_10discretize_8tree_ext__TreeMesh.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "_TreeMesh", (PyObject *)&__pyx_type_10discretize_8tree_ext__TreeMesh) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_ptype_10discretize_8tree_ext__TreeMesh = &__pyx_type_10discretize_8tree_ext__TreeMesh;
  if (PyType_Ready(&__pyx_type_10discretize_8tree_ext___pyx_scope_struct__refine) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_type_10discretize_8tree_ext___pyx_scope_struct__refine.tp_print = 0;
  __pyx_ptype_10discretize_8tree_ext___pyx_scope_struct__refine = &__pyx_type_10discretize_8tree_ext___pyx_scope_struct__refine;
  if (PyType_Ready(&__pyx_type_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx) < 0) __PYX_ERR(0, 1840, __pyx_L1_error)
  __pyx_type_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx.tp_print = 0;
  __pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx = &__pyx_type_10discretize_8tree_ext___pyx_scope_struct_1__getFacePxx;
  if (PyType_Ready(&__pyx_type_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx) < 0) __PYX_ERR(0, 1845, __pyx_L1_error)
  __pyx_type_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx.tp_print = 0;
  __pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx = &__pyx_type_10discretize_8tree_ext___pyx_scope_struct_2__getFacePxxx;
  if (PyType_Ready(&__pyx_type_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx) < 0) __PYX_ERR(0, 1896, __pyx_L1_error)
  __pyx_type_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx.tp_print = 0;
  __pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx = &__pyx_type_10discretize_8tree_ext___pyx_scope_struct_3__getEdgePxx;
  if (PyType_Ready(&__pyx_type_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx) < 0) __PYX_ERR(0, 1901, __pyx_L1_error)
  __pyx_type_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx.tp_print = 0;
  __pyx_ptype_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx = &__pyx_type_10discretize_8tree_ext___pyx_scope_struct_4__getEdgePxxx;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 103, __pyx_L1_error)
  __pyx_type___pyx_array.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(2, 103, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 275, __pyx_L1_error)
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 326, __pyx_L1_error)
  __pyx_type___pyx_memoryview.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(2, 326, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 951, __pyx_L1_error)
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(2, 951, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "discretize/tree_ext.pyx":8
 * from tree cimport int_t, Tree as c_Tree, PyWrapper, Node, Edge, Face, Cell as c_Cell
 * 
 * import scipy.sparse as sp             # <<<<<<<<<<<<<<
 * from scipy.spatial import Delaunay, cKDTree
 * from six import integer_types
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__54);
  __Pyx_GIVEREF(__pyx_n_s__54);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__54);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sp, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":9
 * 
 * import scipy.sparse as sp
 * from scipy.spatial import Delaunay, cKDTree             # <<<<<<<<<<<<<<
 * from six import integer_types
 * import numpy as np
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Delaunay);
  __Pyx_GIVEREF(__pyx_n_s_Delaunay);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Delaunay);
  __Pyx_INCREF(__pyx_n_s_cKDTree);
  __Pyx_GIVEREF(__pyx_n_s_cKDTree);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_cKDTree);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_spatial, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Delaunay); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Delaunay, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_cKDTree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cKDTree, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":10
 * import scipy.sparse as sp
 * from scipy.spatial import Delaunay, cKDTree
 * from six import integer_types             # <<<<<<<<<<<<<<
 * import numpy as np
 * from properties.utils import Sentinel
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_integer_types);
  __Pyx_GIVEREF(__pyx_n_s_integer_types);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_integer_types);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_six, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_integer_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_integer_types, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":11
 * from scipy.spatial import Delaunay, cKDTree
 * from six import integer_types
 * import numpy as np             # <<<<<<<<<<<<<<
 * from properties.utils import Sentinel
 * from discretize import utils
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":12
 * from six import integer_types
 * import numpy as np
 * from properties.utils import Sentinel             # <<<<<<<<<<<<<<
 * from discretize import utils
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Sentinel);
  __Pyx_GIVEREF(__pyx_n_s_Sentinel);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Sentinel);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_properties_utils, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Sentinel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Sentinel, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "discretize/tree_ext.pyx":13
 * import numpy as np
 * from properties.utils import Sentinel
 * from discretize import utils             # <<<<<<<<<<<<<<
 * 
 * cdef class Cell:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_utils);
  __Pyx_GIVEREF(__pyx_n_s_utils);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_utils);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_discretize, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_utils); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_utils, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "discretize/tree_ext.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * cimport cython
 * cimport numpy as np
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":207
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":282
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__127, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":283
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":284
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":287
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":288
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__131, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":312
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":313
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_3[0] = PyThread_allocate_lock();
  __pyx_t_3[1] = PyThread_allocate_lock();
  __pyx_t_3[2] = PyThread_allocate_lock();
  __pyx_t_3[3] = PyThread_allocate_lock();
  __pyx_t_3[4] = PyThread_allocate_lock();
  __pyx_t_3[5] = PyThread_allocate_lock();
  __pyx_t_3[6] = PyThread_allocate_lock();
  __pyx_t_3[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_3, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":535
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":981
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(2, 981, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init discretize.tree_ext", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init discretize.tree_ext");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* SetItemInt */
    static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
      static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* KeywordStringCheck */
      static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseArgTupleInvalid */
      static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
      static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
      static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* BufferFormatCheck */
      static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

/* MemviewSliceInit */
        static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (!buf) {
        PyErr_SetString(PyExc_ValueError,
            "buf is NULL.");
        goto fail;
    } else if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
static CYTHON_INLINE void __pyx_fatalerror(const char *fmt, ...) {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    Py_FatalError(msg);
    va_end(vargs);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return;
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* BufferIndexError */
        static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* None */
        static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
        static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* PyObjectCallNoArg */
            #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseException */
              #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* None */
                static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* pyobject_as_double */
                static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if (0) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* SliceObject */
                static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyIntBinop */
                #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RshiftObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            return PyInt_FromLong(a >> b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_rshift(op1, op2);
            }
        }
                x = a >> b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla >> llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRshift : PyNumber_Rshift)(op1, op2);
}
#endif

/* PyIntBinop */
                #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = a % b;
            x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_remainder(op1, op2);
            }
        }
                x = a % b;
                x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla % llb;
                llx += ((llx != 0) & ((llx ^ llb) < 0)) * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRemainder : PyNumber_Remainder)(op1, op2);
}
#endif

/* None */
                static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SaveResetException */
                #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
                #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
                #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* BytesEquals */
                  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
                  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntBinop */
                  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* PyIntBinop */
                  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* Import */
                  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
                  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* SliceObject */
                  static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* RaiseTooManyValuesToUnpack */
                  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
                  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
                  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
                  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
                  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            if (unlikely(b == -1 && ((unsigned long)a) == 0-(unsigned long)a))
                return PyInt_Type.tp_as_number->nb_floor_divide(op1, op2);
            else {
                long q, r;
                q = a / b;
                r = a - q*b;
                q -= ((r != 0) & ((r ^ b) < 0));
                x = q;
            }
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_floor_divide(op1, op2);
            }
        }
                {
                    long q, r;
                    q = a / b;
                    r = a - q*b;
                    q -= ((r != 0) & ((r ^ b) < 0));
                    x = q;
                }
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                {
                    PY_LONG_LONG q, r;
                    q = lla / llb;
                    r = lla - q*llb;
                    q -= ((r != 0) & ((r ^ llb) < 0));
                    llx = q;
                }
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceFloorDivide : PyNumber_FloorDivide)(op1, op2);
}
#endif

/* RaiseNoneIterError */
                  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
                  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ArgTypeTest */
                  static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* GetAttr */
                  static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* decode_c_string */
                  static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* SwapException */
                  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* None */
                  static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* SetVTable */
                  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* CodeObjectCache */
                  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


                  /* MemviewSliceIsContig */
                  static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs,
                             char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
                  static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
                  static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntToPy */
                  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int_t(int_t value) {
    const int_t neg_one = (int_t) -1, const_zero = (int_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
                  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* MemviewDtypeToObject */
                  static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

/* CIntToPy */
                  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int64(npy_int64 value) {
    const npy_int64 neg_one = (npy_int64) -1, const_zero = (npy_int64) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_int64) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_int64) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int64) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_int64) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int64) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_int64),
                                     little, !is_unsigned);
    }
}

/* MemviewDtypeToObject */
                  static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_float64_t(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(__pyx_t_5numpy_float64_t *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_float64_t(const char *itemp, PyObject *obj) {
    __pyx_t_5numpy_float64_t value = __pyx_PyFloat_AsDouble(obj);
    if ((value == ((npy_float64)-1)) && PyErr_Occurred())
        return 0;
    *(__pyx_t_5numpy_float64_t *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
                  static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_int64_t(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_npy_int64(*(__pyx_t_5numpy_int64_t *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_int64_t(const char *itemp, PyObject *obj) {
    __pyx_t_5numpy_int64_t value = __Pyx_PyInt_As_npy_int64(obj);
    if ((value == ((npy_int64)-1)) && PyErr_Occurred())
        return 0;
    *(__pyx_t_5numpy_int64_t *) itemp = value;
    return 1;
}

/* Declarations */
                  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
                  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
                  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
                  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
                  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* MemviewSliceCopyTemplate */
                  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
                  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE int_t __Pyx_PyInt_As_int_t(PyObject *x) {
    const int_t neg_one = (int_t) -1, const_zero = (int_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) >= 2 * PyLong_SHIFT) {
                            return (int_t) (((((int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) >= 3 * PyLong_SHIFT) {
                            return (int_t) (((((((int_t)digits[2]) << PyLong_SHIFT) | (int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) >= 4 * PyLong_SHIFT) {
                            return (int_t) (((((((((int_t)digits[3]) << PyLong_SHIFT) | (int_t)digits[2]) << PyLong_SHIFT) | (int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int_t) (((int_t)-1)*(((((int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int_t) ((((((int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int_t) (((int_t)-1)*(((((((int_t)digits[2]) << PyLong_SHIFT) | (int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int_t) ((((((((int_t)digits[2]) << PyLong_SHIFT) | (int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int_t) (((int_t)-1)*(((((((((int_t)digits[3]) << PyLong_SHIFT) | (int_t)digits[2]) << PyLong_SHIFT) | (int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int_t) ((((((((((int_t)digits[3]) << PyLong_SHIFT) | (int_t)digits[2]) << PyLong_SHIFT) | (int_t)digits[1]) << PyLong_SHIFT) | (int_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int_t) -1;
        }
    } else {
        int_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int_t) -1;
        val = __Pyx_PyInt_As_int_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int_t");
    return (int_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int_t");
    return (int_t) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE npy_int64 __Pyx_PyInt_As_npy_int64(PyObject *x) {
    const npy_int64 neg_one = (npy_int64) -1, const_zero = (npy_int64) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_int64) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_int64, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_int64) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_int64) 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_int64, digit, digits[0])
                case 2:
                    if (8 * sizeof(npy_int64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 2 * PyLong_SHIFT) {
                            return (npy_int64) (((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_int64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 3 * PyLong_SHIFT) {
                            return (npy_int64) (((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_int64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 4 * PyLong_SHIFT) {
                            return (npy_int64) (((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (npy_int64) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(npy_int64) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_int64) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_int64) 0;
                case -1: __PYX_VERIFY_RETURN_INT(npy_int64, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(npy_int64,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(npy_int64) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(npy_int64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_int64) ((((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_int64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_int64) ((((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_int64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_int64) ((((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(npy_int64) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_int64) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_int64 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_int64) -1;
        }
    } else {
        npy_int64 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (npy_int64) -1;
        val = __Pyx_PyInt_As_npy_int64(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_int64");
    return (npy_int64) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_int64");
    return (npy_int64) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
                  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* TypeInfoCompare */
                  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
                  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (buf->strides[dim] != sizeof(void *)) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (buf->strides[dim] != buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (stride < buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (spec & (__Pyx_MEMVIEW_PTR)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (buf->suboffsets) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (buf->suboffsets && buf->suboffsets[dim] >= 0) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (!buf->suboffsets || (buf->suboffsets && buf->suboffsets[dim] < 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1)
            {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (buf->ndim != ndim) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
    }
    if ((unsigned) buf->itemsize != dtype->size) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    for (i = 0; i < ndim; i++) {
        spec = axes_specs[i];
        if (!__pyx_check_strides(buf, i, ndim, spec))
            goto fail;
        if (!__pyx_check_suboffsets(buf, i, ndim, spec))
            goto fail;
    }
    if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int64_t(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_int_t(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
                  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int_t(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CheckBinaryVersion */
                  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
